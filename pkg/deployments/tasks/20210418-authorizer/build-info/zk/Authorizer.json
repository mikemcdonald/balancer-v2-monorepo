{
	"id": "993c1051b582375e4a621c618e7e70b8",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.1",
	"solcLongVersion": "0.7.1+commit.f4a555be",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/AccessControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        _require(hasRole(_roles[role].adminRole, msg.sender), Errors.GRANT_SENDER_NOT_ADMIN);\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had already been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        _require(hasRole(_roles[role].adminRole, msg.sender), Errors.REVOKE_SENDER_NOT_ADMIN);\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        _require(account == msg.sender, Errors.RENOUNCE_SENDER_NOT_ALLOWED);\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, msg.sender);\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, msg.sender);\n        }\n    }\n}"
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\n// Based on the EnumerableSet library from OpenZeppelin Contracts, altered to remove the base private functions that\n// work on bytes32, replacing them with a native implementation for address and bytes32 values, to reduce bytecode\n// size and runtime costs.\n// The `unchecked_at` function was also added, which allows for more gas efficient data reads in some scenarios.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // The original OpenZeppelin implementation uses a generic Set type with bytes32 values: this was replaced with\n    // AddressSet, which uses address keys natively, resulting in more dense bytecode.\n\n    struct AddressSet {\n        // Storage of set values\n        address[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(address => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, if it was not already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        if (!contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // The swap is only necessary if we're not removing the last element\n            if (toDeleteIndex != lastIndex) {\n                address lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        _require(set._values.length > index, Errors.OUT_OF_BOUNDS);\n        return unchecked_at(set, index);\n    }\n\n    /**\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\n     * than {length}). O(1).\n     *\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\n     * within bounds.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function unchecked_at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return set._values[index];\n    }\n\n    function rawIndexOf(AddressSet storage set, address value) internal view returns (uint256) {\n        return set._indexes[value] - 1;\n    }\n\n    struct Bytes32Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        if (!contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // The swap is only necessary if we're not removing the last element\n            if (toDeleteIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        _require(set._values.length > index, Errors.OUT_OF_BOUNDS);\n        return unchecked_at(set, index);\n    }\n\n    /**\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\n     * than {length}). O(1).\n     *\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\n     * within bounds.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function unchecked_at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return set._values[index];\n    }\n\n    function rawIndexOf(Bytes32Set storage set, bytes32 value) internal view returns (uint256) {\n        return set._indexes[value] - 1;\n    }\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n// solhint-disable\n\n/**\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\n * supported.\n * Uses the default 'BAL' prefix for the error code\n */\nfunction _require(bool condition, uint256 errorCode) pure {\n    if (!condition) _revert(errorCode);\n}\n\n/**\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\n * supported.\n */\nfunction _require(bool condition, uint256 errorCode, bytes3 prefix) pure {\n    if (!condition) _revert(errorCode, prefix);\n}\n\n/**\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\n * Uses the default 'BAL' prefix for the error code\n */\nfunction _revert(uint256 errorCode) pure {\n    _revert(errorCode, 0x42414c); // This is the raw byte representation of \"BAL\"\n}\n\n/**\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\n */\nfunction _revert(uint256 errorCode, bytes3 prefix) pure {\n    uint256 prefixUint = uint256(uint24(prefix));\n    // We're going to dynamically create a revert string based on the error code, with the following format:\n    // 'BAL#{errorCode}'\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\n    //\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\n    // number (8 to 16 bits) than the individual string characters.\n    //\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\n    assembly {\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\n        // the '0' character.\n\n        let units := add(mod(errorCode, 10), 0x30)\n\n        errorCode := div(errorCode, 10)\n        let tenths := add(mod(errorCode, 10), 0x30)\n\n        errorCode := div(errorCode, 10)\n        let hundreds := add(mod(errorCode, 10), 0x30)\n\n        // With the individual characters, we can now construct the full string.\n        // We first append the '#' character (0x23) to the prefix. In the case of 'BAL', it results in 0x42414c23 ('BAL#')\n        // Then, we shift this by 24 (to provide space for the 3 bytes of the error code), and add the\n        // characters to it, each shifted by a multiple of 8.\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\n        // array).\n        let formattedPrefix := shl(24, add(0x23, shl(8, prefixUint)))\n\n        let revertReason := shl(200, add(formattedPrefix, add(add(units, shl(8, tenths)), shl(16, hundreds))))\n\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\n        // message will have the following layout:\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\n\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\n        // The string length is fixed: 7 characters.\n        mstore(0x24, 7)\n        // Finally, the string itself is stored.\n        mstore(0x44, revertReason)\n\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\n        revert(0, 100)\n    }\n}\n\nlibrary Errors {\n    // Math\n    uint256 internal constant ADD_OVERFLOW = 0;\n    uint256 internal constant SUB_OVERFLOW = 1;\n    uint256 internal constant SUB_UNDERFLOW = 2;\n    uint256 internal constant MUL_OVERFLOW = 3;\n    uint256 internal constant ZERO_DIVISION = 4;\n    uint256 internal constant DIV_INTERNAL = 5;\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\n    uint256 internal constant INVALID_EXPONENT = 9;\n\n    // Input\n    uint256 internal constant OUT_OF_BOUNDS = 100;\n    uint256 internal constant UNSORTED_ARRAY = 101;\n    uint256 internal constant UNSORTED_TOKENS = 102;\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\n    uint256 internal constant ZERO_TOKEN = 104;\n\n    // Shared pools\n    uint256 internal constant MIN_TOKENS = 200;\n    uint256 internal constant MAX_TOKENS = 201;\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\n    uint256 internal constant MINIMUM_BPT = 204;\n    uint256 internal constant CALLER_NOT_VAULT = 205;\n    uint256 internal constant UNINITIALIZED = 206;\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\n    uint256 internal constant EXPIRED_PERMIT = 209;\n    uint256 internal constant NOT_TWO_TOKENS = 210;\n    uint256 internal constant DISABLED = 211;\n\n    // Pools\n    uint256 internal constant MIN_AMP = 300;\n    uint256 internal constant MAX_AMP = 301;\n    uint256 internal constant MIN_WEIGHT = 302;\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\n    uint256 internal constant MAX_IN_RATIO = 304;\n    uint256 internal constant MAX_OUT_RATIO = 305;\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\n    uint256 internal constant INVALID_TOKEN = 309;\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\n    uint256 internal constant ZERO_INVARIANT = 311;\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\n    uint256 internal constant ORACLE_BAD_SECS = 316;\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\n    uint256 internal constant SWAPS_DISABLED = 327;\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\n    uint256 internal constant INVALID_INITIALIZATION = 342;\n    uint256 internal constant OUT_OF_NEW_TARGET_RANGE = 343;\n    uint256 internal constant FEATURE_DISABLED = 344;\n    uint256 internal constant UNINITIALIZED_POOL_CONTROLLER = 345;\n    uint256 internal constant SET_SWAP_FEE_DURING_FEE_CHANGE = 346;\n    uint256 internal constant SET_SWAP_FEE_PENDING_FEE_CHANGE = 347;\n    uint256 internal constant CHANGE_TOKENS_DURING_WEIGHT_CHANGE = 348;\n    uint256 internal constant CHANGE_TOKENS_PENDING_WEIGHT_CHANGE = 349;\n    uint256 internal constant MAX_WEIGHT = 350;\n    uint256 internal constant UNAUTHORIZED_JOIN = 351;\n    uint256 internal constant MAX_MANAGEMENT_AUM_FEE_PERCENTAGE = 352;\n    uint256 internal constant FRACTIONAL_TARGET = 353;\n\n    // Lib\n    uint256 internal constant REENTRANCY = 400;\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\n    uint256 internal constant PAUSED = 402;\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\n    uint256 internal constant NOT_PAUSED = 431;\n    uint256 internal constant ADDRESS_ALREADY_ALLOWLISTED = 432;\n    uint256 internal constant ADDRESS_NOT_ALLOWLISTED = 433;\n    uint256 internal constant ERC20_BURN_EXCEEDS_BALANCE = 434;\n    uint256 internal constant INVALID_OPERATION = 435;\n    uint256 internal constant CODEC_OVERFLOW = 436;\n    uint256 internal constant IN_RECOVERY_MODE = 437;\n    uint256 internal constant NOT_IN_RECOVERY_MODE = 438;\n    uint256 internal constant INDUCED_FAILURE = 439;\n    uint256 internal constant EXPIRED_SIGNATURE = 440;\n    uint256 internal constant MALFORMED_SIGNATURE = 441;\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_UINT64 = 442;\n    uint256 internal constant UNHANDLED_FEE_TYPE = 443;\n\n    // Vault\n    uint256 internal constant INVALID_POOL_ID = 500;\n    uint256 internal constant CALLER_NOT_POOL = 501;\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\n    uint256 internal constant INVALID_SIGNATURE = 504;\n    uint256 internal constant EXIT_BELOW_MIN = 505;\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\n    uint256 internal constant SWAP_LIMIT = 507;\n    uint256 internal constant SWAP_DEADLINE = 508;\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\n    uint256 internal constant INSUFFICIENT_ETH = 516;\n    uint256 internal constant UNALLOCATED_ETH = 517;\n    uint256 internal constant ETH_TRANSFER = 518;\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\n    uint256 internal constant TOKENS_MISMATCH = 520;\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\n    uint256 internal constant POOL_NO_TOKENS = 527;\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\n\n    // Fees\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\n    uint256 internal constant AUM_FEE_PERCENTAGE_TOO_HIGH = 603;\n\n    // Misc\n    uint256 internal constant UNIMPLEMENTED = 998;\n    uint256 internal constant SHOULD_NOT_HAPPEN = 999;\n}\n"
			},
			"contracts/Authorizer.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\";\nimport \"./AccessControl.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\";\n\n/**\n * @dev Basic Authorizer implementation, based on OpenZeppelin's Access Control.\n *\n * Users are allowed to perform actions if they have the role with the same identifier. In this sense, roles are not\n * being truly used as such, since they each map to a single action identifier.\n *\n * This temporary implementation is expected to be replaced soon after launch by a more sophisticated one, able to\n * manage permissions across multiple contracts and to natively handle timelocks.\n */\ncontract Authorizer is AccessControl, IAuthorizer {\n    constructor(address admin) {\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    function canPerform(\n        bytes32 actionId,\n        address account,\n        address\n    ) public view override returns (bool) {\n        // This Authorizer ignores the 'where' field completely.\n        return AccessControl.hasRole(actionId, account);\n    }\n\n    /**\n     * @dev Grants multiple roles to a single account.\n     */\n    function grantRoles(bytes32[] memory roles, address account) external {\n        for (uint256 i = 0; i < roles.length; i++) {\n            grantRole(roles[i], account);\n        }\n    }\n\n    /**\n     * @dev Grants roles to a list of accounts.\n     */\n    function grantRolesToMany(bytes32[] memory roles, address[] memory accounts) external {\n        InputHelpers.ensureInputLengthMatch(roles.length, accounts.length);\n        for (uint256 i = 0; i < roles.length; i++) {\n            grantRole(roles[i], accounts[i]);\n        }\n    }\n\n    /**\n     * @dev Revokes multiple roles from a single account.\n     */\n    function revokeRoles(bytes32[] memory roles, address account) external {\n        for (uint256 i = 0; i < roles.length; i++) {\n            revokeRole(roles[i], account);\n        }\n    }\n\n    /**\n     * @dev Revokes roles from a list of accounts.\n     */\n    function revokeRolesFromMany(bytes32[] memory roles, address[] memory accounts) external {\n        InputHelpers.ensureInputLengthMatch(roles.length, accounts.length);\n        for (uint256 i = 0; i < roles.length; i++) {\n            revokeRole(roles[i], accounts[i]);\n        }\n    }\n}"
			},
			"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\n\nlibrary InputHelpers {\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\n    }\n\n    function ensureInputLengthMatch(\n        uint256 a,\n        uint256 b,\n        uint256 c\n    ) internal pure {\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\n    }\n\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\n        address[] memory addressArray;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            addressArray := array\n        }\n        ensureArrayIsSorted(addressArray);\n    }\n\n    function ensureArrayIsSorted(address[] memory array) internal pure {\n        if (array.length < 2) {\n            return;\n        }\n\n        address previous = array[0];\n        for (uint256 i = 1; i < array.length; ++i) {\n            address current = array[i];\n            _require(previous < current, Errors.UNSORTED_ARRAY);\n            previous = current;\n        }\n    }\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\ninterface IAuthorizer {\n    /**\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\n     */\n    function canPerform(\n        bytes32 actionId,\n        address account,\n        address where\n    ) external view returns (bool);\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IBasicAuthorizer.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"./IAuthorizer.sol\";\n\ninterface IBasicAuthorizer is IAuthorizer {\n    // solhint-disable-next-line func-name-mixedcase\n    function DEFAULT_ADMIN_ROLE() external returns (bytes32);\n\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
			},
			"contracts/test/MockBasicAuthorizer.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IBasicAuthorizer.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\";\n\ncontract MockBasicAuthorizer is IBasicAuthorizer {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    bytes32 public constant override DEFAULT_ADMIN_ROLE = 0x00;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    function canPerform(\n        bytes32 actionId,\n        address account,\n        address\n    ) external view override returns (bool) {\n        return hasRole(actionId, account);\n    }\n\n    function getRoleMemberCount(bytes32 role) external view override returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    function getRoleMember(bytes32 role, uint256 index) external view override returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    function getRoleAdmin(bytes32 role) external view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    function grantRolesToMany(bytes32[] memory roles, address[] memory accounts) external {\n        InputHelpers.ensureInputLengthMatch(roles.length, accounts.length);\n        for (uint256 i = 0; i < roles.length; i++) {\n            grantRole(roles[i], accounts[i]);\n        }\n    }\n\n    function grantRole(bytes32 role, address account) public {\n        _require(hasRole(_roles[role].adminRole, msg.sender), Errors.GRANT_SENDER_NOT_ADMIN);\n        _grantRole(role, account);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        _roles[role].members.add(account);\n    }\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        _require(c >= a, Errors.ADD_OVERFLOW);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, Errors.SUB_OVERFLOW);\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        uint256 errorCode\n    ) internal pure returns (uint256) {\n        _require(b <= a, errorCode);\n        uint256 c = a - b;\n\n        return c;\n    }\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\n\nimport \"./SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}. The total supply should only be read using this function\n     *\n     * Can be overridden by derived contracts to store the total supply in a different way (e.g. packed with other\n     * storage values).\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Sets a new value for the total supply. It should only be set using this function.\n     *\n     * * Can be overridden by derived contracts to store the total supply in a different way (e.g. packed with other\n     * storage values).\n     */\n    function _setTotalSupply(uint256 value) internal virtual {\n        _totalSupply = value;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            msg.sender,\n            _allowances[sender][msg.sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(\n            msg.sender,\n            spender,\n            _allowances[msg.sender][spender].sub(subtractedValue, Errors.ERC20_DECREASED_ALLOWANCE_BELOW_ZERO)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        _require(sender != address(0), Errors.ERC20_TRANSFER_FROM_ZERO_ADDRESS);\n        _require(recipient != address(0), Errors.ERC20_TRANSFER_TO_ZERO_ADDRESS);\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_BALANCE);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _setTotalSupply(totalSupply().add(amount));\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        _require(account != address(0), Errors.ERC20_BURN_FROM_ZERO_ADDRESS);\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, Errors.ERC20_BURN_EXCEEDS_BALANCE);\n        _setTotalSupply(totalSupply().sub(amount));\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"../openzeppelin/IERC20.sol\";\n\n/**\n * @dev Interface for WETH9.\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\n */\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma experimental ABIEncoderV2;\n\nimport \"../solidity-utils/openzeppelin/IERC20.sol\";\nimport \"../solidity-utils/helpers/IAuthentication.sol\";\nimport \"../solidity-utils/helpers/ISignaturesValidator.sol\";\nimport \"../solidity-utils/helpers/ITemporarilyPausable.sol\";\nimport \"../solidity-utils/misc/IWETH.sol\";\n\nimport \"./IAsset.sol\";\nimport \"./IAuthorizer.sol\";\nimport \"./IFlashLoanRecipient.sol\";\nimport \"./IProtocolFeesCollector.sol\";\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\n * don't override one of these declarations.\n */\ninterface IVault is ISignaturesValidator, ITemporarilyPausable, IAuthentication {\n    // Generalities about the Vault:\n    //\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\n    //\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\n    //\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\n\n    // Authorizer\n    //\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\n    // can perform a given action.\n\n    /**\n     * @dev Returns the Vault's Authorizer.\n     */\n    function getAuthorizer() external view returns (IAuthorizer);\n\n    /**\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\n     *\n     * Emits an `AuthorizerChanged` event.\n     */\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\n\n    /**\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\n     */\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\n\n    // Relayers\n    //\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\n    // this power, two things must occur:\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\n    //    functions.\n    //  - Each user must approve the relayer to act on their behalf.\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\n\n    /**\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\n     */\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\n\n    /**\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\n     *\n     * Emits a `RelayerApprovalChanged` event.\n     */\n    function setRelayerApproval(\n        address sender,\n        address relayer,\n        bool approved\n    ) external;\n\n    /**\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\n     */\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\n\n    // Internal Balance\n    //\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\n    //\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\n    // operations of different kinds, with different senders and recipients, at once.\n\n    /**\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\n     */\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\n\n    /**\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\n     * it lets integrators reuse a user's Vault allowance.\n     *\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\n     */\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\n\n    /**\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\n     without manual WETH wrapping or unwrapping.\n     */\n    struct UserBalanceOp {\n        UserBalanceOpKind kind;\n        IAsset asset;\n        uint256 amount;\n        address sender;\n        address payable recipient;\n    }\n\n    // There are four possible operations in `manageUserBalance`:\n    //\n    // - DEPOSIT_INTERNAL\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\n    //\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\n    // relevant for relayers).\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - WITHDRAW_INTERNAL\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\n    //\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\n    // it to the recipient as ETH.\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - TRANSFER_INTERNAL\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\n    //\n    // Reverts if the ETH sentinel value is passed.\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - TRANSFER_EXTERNAL\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\n    // relayers, as it lets them reuse a user's Vault allowance.\n    //\n    // Reverts if the ETH sentinel value is passed.\n    //\n    // Emits an `ExternalBalanceTransfer` event.\n\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\n\n    /**\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\n     * interacting with Pools using Internal Balance.\n     *\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\n     * address.\n     */\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\n\n    /**\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\n     */\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\n\n    // Pools\n    //\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\n    // functionality:\n    //\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\n    // which increase with the number of registered tokens.\n    //\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\n    // independent of the number of registered tokens.\n    //\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\n\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\n\n    /**\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\n     * changed.\n     *\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\n     *\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\n     * multiple Pools may share the same contract.\n     *\n     * Emits a `PoolRegistered` event.\n     */\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\n\n    /**\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\n     */\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\n\n    /**\n     * @dev Returns a Pool's contract address and specialization setting.\n     */\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\n\n    /**\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n     *\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\n     * exit by receiving registered tokens, and can only swap registered tokens.\n     *\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\n     * ascending order.\n     *\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\n     * Asset Manager should not be made lightly.\n     *\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\n     * different Asset Manager.\n     *\n     * Emits a `TokensRegistered` event.\n     */\n    function registerTokens(\n        bytes32 poolId,\n        IERC20[] memory tokens,\n        address[] memory assetManagers\n    ) external;\n\n    /**\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\n     */\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\n\n    /**\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n     *\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\n     * must be deregistered in the same `deregisterTokens` call.\n     *\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\n     *\n     * Emits a `TokensDeregistered` event.\n     */\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\n\n    /**\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\n     */\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\n\n    /**\n     * @dev Returns detailed information for a Pool's registered token.\n     *\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\n     * equals the sum of `cash` and `managed`.\n     *\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\n     * `managed` or `total` balance to be greater than 2^112 - 1.\n     *\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\n     * change for this purpose, and will update `lastChangeBlock`.\n     *\n     * `assetManager` is the Pool's token Asset Manager.\n     */\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\n        external\n        view\n        returns (\n            uint256 cash,\n            uint256 managed,\n            uint256 lastChangeBlock,\n            address assetManager\n        );\n\n    /**\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\n     * the tokens' `balances` changed.\n     *\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\n     *\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\n     * order as passed to `registerTokens`.\n     *\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\n     * instead.\n     */\n    function getPoolTokens(bytes32 poolId)\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 lastChangeBlock\n        );\n\n    /**\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\n     * Pool shares.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\n     * these maximums.\n     *\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\n     * back to the caller (not the sender, which is important for relayers).\n     *\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\n     *\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\n     *\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\n     * directly to the Pool's contract, as is `recipient`.\n     *\n     * Emits a `PoolBalanceChanged` event.\n     */\n    function joinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        JoinPoolRequest memory request\n    ) external payable;\n\n    struct JoinPoolRequest {\n        IAsset[] assets;\n        uint256[] maxAmountsIn;\n        bytes userData;\n        bool fromInternalBalance;\n    }\n\n    /**\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\n     * `getPoolTokenInfo`).\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\n     * it just enforces these minimums.\n     *\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\n     *\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\n     *\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\n     * do so will trigger a revert.\n     *\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\n     * `tokens` array. This array must match the Pool's registered tokens.\n     *\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\n     * passed directly to the Pool's contract.\n     *\n     * Emits a `PoolBalanceChanged` event.\n     */\n    function exitPool(\n        bytes32 poolId,\n        address sender,\n        address payable recipient,\n        ExitPoolRequest memory request\n    ) external;\n\n    struct ExitPoolRequest {\n        IAsset[] assets;\n        uint256[] minAmountsOut;\n        bytes userData;\n        bool toInternalBalance;\n    }\n\n    /**\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\n     */\n    event PoolBalanceChanged(\n        bytes32 indexed poolId,\n        address indexed liquidityProvider,\n        IERC20[] tokens,\n        int256[] deltas,\n        uint256[] protocolFeeAmounts\n    );\n\n    enum PoolBalanceChangeKind { JOIN, EXIT }\n\n    // Swaps\n    //\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\n    //\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\n    // individual swaps.\n    //\n    // There are two swap kinds:\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\n    //\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\n    // the final intended token.\n    //\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\n    // much less gas than they would otherwise.\n    //\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\n    // updating the Pool's internal accounting).\n    //\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\n    //\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\n    //\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\n    //\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\n\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    /**\n     * @dev Performs a swap with a single Pool.\n     *\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n     * taken from the Pool, which must be greater than or equal to `limit`.\n     *\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n     * sent to the Pool, which must be less than or equal to `limit`.\n     *\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\n     *\n     * Emits a `Swap` event.\n     */\n    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    /**\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\n     * the `kind` value.\n     *\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        IAsset assetIn;\n        IAsset assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    /**\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\n     *\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n     * the same index in the `assets` array.\n     *\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\n     * `amountOut` depending on the swap kind.\n     *\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\n     *\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\n     * or unwrapped from WETH by the Vault.\n     *\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\n     *\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\n     * equivalent `swap` call.\n     *\n     * Emits `Swap` events.\n     */\n    function batchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds,\n        int256[] memory limits,\n        uint256 deadline\n    ) external payable returns (int256[] memory);\n\n    /**\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\n     *\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\n     * from the previous swap, depending on the swap kind.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    /**\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\n     */\n    event Swap(\n        bytes32 indexed poolId,\n        IERC20 indexed tokenIn,\n        IERC20 indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    /**\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\n     * `recipient` account.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\n     * `joinPool`.\n     *\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\n     * transferred. This matches the behavior of `exitPool`.\n     *\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\n     * revert.\n     */\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    /**\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n     *\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n     * receives are the same that an equivalent `batchSwap` call would receive.\n     *\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\n     * approve them for the Vault, or even know a user's address.\n     *\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\n     * eth_call instead of eth_sendTransaction.\n     */\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds\n    ) external returns (int256[] memory assetDeltas);\n\n    // Flash Loans\n\n    /**\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\n     *\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\n     * for each token contract. `tokens` must be sorted in ascending order.\n     *\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\n     * `receiveFlashLoan` call.\n     *\n     * Emits `FlashLoan` events.\n     */\n    function flashLoan(\n        IFlashLoanRecipient recipient,\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        bytes memory userData\n    ) external;\n\n    /**\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\n     */\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\n\n    // Asset Management\n    //\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\n    //\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\n    //\n    // This concept is unrelated to the IAsset interface.\n\n    /**\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\n     *\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\n     * operations of different kinds, with different Pools and tokens, at once.\n     *\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\n     */\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\n\n    struct PoolBalanceOp {\n        PoolBalanceOpKind kind;\n        bytes32 poolId;\n        IERC20 token;\n        uint256 amount;\n    }\n\n    /**\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\n     *\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\n     *\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\n     */\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\n\n    /**\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\n     */\n    event PoolBalanceManaged(\n        bytes32 indexed poolId,\n        address indexed assetManager,\n        IERC20 indexed token,\n        int256 cashDelta,\n        int256 managedDelta\n    );\n\n    // Protocol Fees\n    //\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\n    // permissioned accounts.\n    //\n    // There are two kinds of protocol fees:\n    //\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\n    //\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\n    // exiting a Pool in debt without first paying their share.\n\n    /**\n     * @dev Returns the current protocol fee module.\n     */\n    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);\n\n    /**\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\n     * error in some part of the system.\n     *\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\n     *\n     * While the contract is paused, the following features are disabled:\n     * - depositing and transferring internal balance\n     * - transferring external balance (using the Vault's allowance)\n     * - swaps\n     * - joining Pools\n     * - Asset Manager interactions\n     *\n     * Internal Balance can still be withdrawn, and Pools exited.\n     */\n    function setPaused(bool paused) external;\n\n    /**\n     * @dev Returns the Vault's WETH instance.\n     */\n    function WETH() external view returns (IWETH);\n    // solhint-disable-previous-line func-name-mixedcase\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n/**\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\n * types.\n *\n * This concept is unrelated to a Pool's Asset Managers.\n */\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"../solidity-utils/openzeppelin/IERC20.sol\";\n\nimport \"./IVault.sol\";\nimport \"./IAuthorizer.sol\";\n\ninterface IProtocolFeesCollector {\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\n\n    function withdrawCollectedFees(\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        address recipient\n    ) external;\n\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external;\n\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;\n\n    function getSwapFeePercentage() external view returns (uint256);\n\n    function getFlashLoanFeePercentage() external view returns (uint256);\n\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);\n\n    function getAuthorizer() external view returns (IAuthorizer);\n\n    function vault() external view returns (IVault);\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n// Inspired by Aave Protocol's IFlashLoanReceiver.\n\nimport \"../solidity-utils/openzeppelin/IERC20.sol\";\n\ninterface IFlashLoanRecipient {\n    /**\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\n     *\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\n     * Vault, or else the entire flash loan will revert.\n     *\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\n     */\n    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external;\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\ninterface IAuthentication {\n    /**\n     * @dev Returns the action identifier associated with the external function described by `selector`.\n     */\n    function getActionId(bytes4 selector) external view returns (bytes32);\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\n */\ninterface ISignaturesValidator {\n    /**\n     * @dev Returns the EIP712 domain separator.\n     */\n    function getDomainSeparator() external view returns (bytes32);\n\n    /**\n     * @dev Returns the next nonce used by an address to sign messages.\n     */\n    function getNextNonce(address user) external view returns (uint256);\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface for the TemporarilyPausable helper.\n */\ninterface ITemporarilyPausable {\n    /**\n     * @dev Emitted every time the pause state changes by `_setPaused`.\n     */\n    event PausedStateChanged(bool paused);\n\n    /**\n     * @dev Returns the current paused state.\n     */\n    function getPausedState()\n        external\n        view\n        returns (\n            bool paused,\n            uint256 pauseWindowEndTime,\n            uint256 bufferPeriodEndTime\n        );\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"../solidity-utils/helpers/IAuthentication.sol\";\nimport \"../vault/IVault.sol\";\n\ninterface IAuthorizerAdaptor is IAuthentication {\n    /**\n     * @notice Returns the Balancer Vault\n     */\n    function getVault() external view returns (IVault);\n\n    /**\n     * @notice Returns the Authorizer\n     */\n    function getAuthorizer() external view returns (IAuthorizer);\n\n    /**\n     * @notice Performs an arbitrary function call on a target contract, provided the caller is authorized to do so.\n     * @param target - Address of the contract to be called\n     * @param data - Calldata to be sent to the target contract\n     * @return The bytes encoded return value from the performed function call\n     */\n    function performAction(address target, bytes calldata data) external payable returns (bytes memory);\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\";\n\n/**\n * @dev Building block for performing access control on external functions.\n *\n * This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied\n * to external functions to only make them callable by authorized accounts.\n *\n * Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\n */\nabstract contract Authentication is IAuthentication {\n    bytes32 private immutable _actionIdDisambiguator;\n\n    /**\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\n     * multi contract systems.\n     *\n     * There are two main uses for it:\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\n     *    unique. The contract's own address is a good option.\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\n     *    shared by the entire family (and no other contract) should be used instead.\n     */\n    constructor(bytes32 actionIdDisambiguator) {\n        _actionIdDisambiguator = actionIdDisambiguator;\n    }\n\n    /**\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\n     */\n    modifier authenticate() {\n        _authenticateCaller();\n        _;\n    }\n\n    /**\n     * @dev Reverts unless the caller is allowed to call the entry point function.\n     */\n    function _authenticateCaller() internal view {\n        bytes32 actionId = getActionId(msg.sig);\n        _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED);\n    }\n\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\n        // multiple contracts.\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\n    }\n\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\";\n\nimport \"./Authentication.sol\";\n\nabstract contract SingletonAuthentication is Authentication {\n    IVault private immutable _vault;\n\n    // Use the contract's own address to disambiguate action identifiers\n    constructor(IVault vault) Authentication(bytes32(uint256(address(this)))) {\n        _vault = vault;\n    }\n\n    /**\n     * @notice Returns the Balancer Vault\n     */\n    function getVault() public view returns (IVault) {\n        return _vault;\n    }\n\n    /**\n     * @notice Returns the Authorizer\n     */\n    function getAuthorizer() public view returns (IAuthorizer) {\n        return getVault().getAuthorizer();\n    }\n\n    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\n        return getAuthorizer().canPerform(actionId, account, address(this));\n    }\n\n    function _canPerform(\n        bytes32 actionId,\n        address account,\n        address where\n    ) internal view returns (bool) {\n        return getAuthorizer().canPerform(actionId, account, where);\n    }\n}\n"
			},
			"contracts/test/MockAuthenticatedContract.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol\";\n\n/*\n * @author Balancer Labs\n * @title MockAuthenticatedContract\n * @notice Generic authenticated contract\n * @dev A general purpose contract that can be used for testing permissioned functions in a more abstract way,\n * to test Authorizer functionality independent of specific Vault functions.\n */\ncontract MockAuthenticatedContract is SingletonAuthentication {\n    event ProtectedFunctionCalled(bytes data);\n    event SecondProtectedFunctionCalled(bytes data);\n\n    constructor(IVault vault) SingletonAuthentication(vault) {}\n\n    function protectedFunction(bytes calldata data) external authenticate returns (bytes memory) {\n        emit ProtectedFunctionCalled(data);\n        return data;\n    }\n\n    function secondProtectedFunction(bytes calldata data) external authenticate returns (bytes memory) {\n        emit SecondProtectedFunctionCalled(data);\n        return data;\n    }\n}\n"
			},
			"contracts/VaultAuthorization.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\";\n\n/**\n * @dev Manages access control of Vault permissioned functions by relying on the Authorizer and signature validation.\n *\n * Additionally handles relayer access and approval.\n */\nabstract contract VaultAuthorization is\n    IVault,\n    ReentrancyGuard,\n    Authentication,\n    ExtraCalldataEOASignaturesValidator,\n    TemporarilyPausable\n{\n    // Ideally, we'd store the type hashes as immutable state variables to avoid computing the hash at runtime, but\n    // unfortunately immutable variables cannot be used in assembly, so we just keep the precomputed hashes instead.\n\n    // _JOIN_TYPE_HASH = keccak256(\"JoinPool(bytes calldata,address sender,uint256 nonce,uint256 deadline)\");\n    bytes32 private constant _JOIN_TYPE_HASH = 0x3f7b71252bd19113ff48c19c6e004a9bcfcca320a0d74d58e85877cbd7dcae58;\n\n    // _EXIT_TYPE_HASH = keccak256(\"ExitPool(bytes calldata,address sender,uint256 nonce,uint256 deadline)\");\n    bytes32 private constant _EXIT_TYPE_HASH = 0x8bbc57f66ea936902f50a71ce12b92c43f3c5340bb40c27c4e90ab84eeae3353;\n\n    // _SWAP_TYPE_HASH = keccak256(\"Swap(bytes calldata,address sender,uint256 nonce,uint256 deadline)\");\n    bytes32 private constant _SWAP_TYPE_HASH = 0xe192dcbc143b1e244ad73b813fd3c097b832ad260a157340b4e5e5beda067abe;\n\n    // _BATCH_SWAP_TYPE_HASH = keccak256(\"BatchSwap(bytes calldata,address sender,uint256 nonce,uint256 deadline)\");\n    bytes32 private constant _BATCH_SWAP_TYPE_HASH = 0x9bfc43a4d98313c6766986ffd7c916c7481566d9f224c6819af0a53388aced3a;\n\n    // _SET_RELAYER_TYPE_HASH =\n    //     keccak256(\"SetRelayerApproval(bytes calldata,address sender,uint256 nonce,uint256 deadline)\");\n    bytes32\n        private constant _SET_RELAYER_TYPE_HASH = 0xa3f865aa351e51cfeb40f5178d1564bb629fe9030b83caf6361d1baaf5b90b5a;\n\n    IAuthorizer private _authorizer;\n    mapping(address => mapping(address => bool)) private _approvedRelayers;\n\n    /**\n     * @dev Reverts unless `user` is the caller, or the caller is approved by the Authorizer to call this function (that\n     * is, it is a relayer for that function), and either:\n     *  a) `user` approved the caller as a relayer (via `setRelayerApproval`), or\n     *  b) a valid signature from them was appended to the calldata.\n     *\n     * Should only be applied to external functions.\n     */\n    modifier authenticateFor(address user) {\n        _authenticateFor(user);\n        _;\n    }\n\n    constructor(IAuthorizer authorizer)\n        // The Vault is a singleton, so it simply uses its own address to disambiguate action identifiers.\n        Authentication(bytes32(uint256(address(this))))\n        EIP712(\"Balancer V2 Vault\", \"1\")\n    {\n        _setAuthorizer(authorizer);\n    }\n\n    function setAuthorizer(IAuthorizer newAuthorizer) external override nonReentrant authenticate {\n        _setAuthorizer(newAuthorizer);\n    }\n\n    function _setAuthorizer(IAuthorizer newAuthorizer) private {\n        emit AuthorizerChanged(newAuthorizer);\n        _authorizer = newAuthorizer;\n    }\n\n    function getAuthorizer() external view override returns (IAuthorizer) {\n        return _authorizer;\n    }\n\n    function setRelayerApproval(\n        address sender,\n        address relayer,\n        bool approved\n    ) external override nonReentrant whenNotPaused authenticateFor(sender) {\n        _approvedRelayers[sender][relayer] = approved;\n        emit RelayerApprovalChanged(relayer, sender, approved);\n    }\n\n    function hasApprovedRelayer(address user, address relayer) external view override returns (bool) {\n        return _hasApprovedRelayer(user, relayer);\n    }\n\n    /**\n     * @dev Reverts unless `user` is the caller, or the caller is approved by the Authorizer to call the entry point\n     * function (that is, it is a relayer for that function) and either:\n     *  a) `user` approved the caller as a relayer (via `setRelayerApproval`), or\n     *  b) a valid signature from them was appended to the calldata.\n     */\n    function _authenticateFor(address user) internal {\n        if (msg.sender != user) {\n            // In this context, 'permission to call a function' means 'being a relayer for a function'.\n            _authenticateCaller();\n\n            // Being a relayer is not sufficient: `user` must have also approved the caller either via\n            // `setRelayerApproval`, or by providing a signature appended to the calldata.\n            if (!_hasApprovedRelayer(user, msg.sender)) {\n                _validateExtraCalldataSignature(user, Errors.USER_DOESNT_ALLOW_RELAYER);\n            }\n        }\n    }\n\n    /**\n     * @dev Returns true if `user` approved `relayer` to act as a relayer for them.\n     */\n    function _hasApprovedRelayer(address user, address relayer) internal view returns (bool) {\n        return _approvedRelayers[user][relayer];\n    }\n\n    function _canPerform(bytes32 actionId, address user) internal view override returns (bool) {\n        // Access control is delegated to the Authorizer.\n        return _authorizer.canPerform(actionId, user, address(this));\n    }\n\n    function _entrypointTypeHash() internal pure override returns (bytes32 hash) {\n        // This is a simple switch-case statement, trivially written in Solidity by chaining else-if statements, but the\n        // assembly implementation results in much denser bytecode.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // The function selector is located at the first 4 bytes of calldata. We copy the first full calldata\n            // 256 word, and then perform a logical shift to the right, moving the selector to the least significant\n            // 4 bytes.\n            let selector := shr(224, calldataload(0))\n\n            // With the selector in the least significant 4 bytes, we can use 4 byte literals with leading zeros,\n            // resulting in dense bytecode (PUSH4 opcodes).\n            switch selector\n                case 0xb95cac28 {\n                    hash := _JOIN_TYPE_HASH\n                }\n                case 0x8bdb3913 {\n                    hash := _EXIT_TYPE_HASH\n                }\n                case 0x52bbbe29 {\n                    hash := _SWAP_TYPE_HASH\n                }\n                case 0x945bcec9 {\n                    hash := _BATCH_SWAP_TYPE_HASH\n                }\n                case 0xfa6e671d {\n                    hash := _SET_RELAYER_TYPE_HASH\n                }\n                default {\n                    hash := 0x0000000000000000000000000000000000000000000000000000000000000000\n                }\n        }\n    }\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce bytecode size.\n// Modifier code is inlined by the compiler, which causes its code to appear multiple times in the codebase. By using\n// private functions, we achieve the same end result with slightly higher runtime gas costs, but reduced bytecode size.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _enterNonReentrant();\n        _;\n        _exitNonReentrant();\n    }\n\n    function _enterNonReentrant() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        _require(_status != _ENTERED, Errors.REENTRANCY);\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _exitNonReentrant() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\";\n\n/**\n * @dev Allows for a contract to be paused during an initial period after deployment, disabling functionality. Can be\n * used as an emergency switch in case a security vulnerability or threat is identified.\n *\n * The contract can only be paused during the Pause Window, a period that starts at deployment. It can also be\n * unpaused and repaused any number of times during this period. This is intended to serve as a safety measure: it lets\n * system managers react quickly to potentially dangerous situations, knowing that this action is reversible if careful\n * analysis later determines there was a false alarm.\n *\n * If the contract is paused when the Pause Window finishes, it will remain in the paused state through an additional\n * Buffer Period, after which it will be automatically unpaused forever. This is to ensure there is always enough time\n * to react to an emergency, even if the threat is discovered shortly before the Pause Window expires.\n *\n * Note that since the contract can only be paused within the Pause Window, unpausing during the Buffer Period is\n * irreversible.\n */\nabstract contract TemporarilyPausable is ITemporarilyPausable {\n    // The Pause Window and Buffer Period are timestamp-based: they should not be relied upon for sub-minute accuracy.\n    // solhint-disable not-rely-on-time\n\n    uint256 private constant _MAX_PAUSE_WINDOW_DURATION = 90 days;\n    uint256 private constant _MAX_BUFFER_PERIOD_DURATION = 30 days;\n\n    uint256 private immutable _pauseWindowEndTime;\n    uint256 private immutable _bufferPeriodEndTime;\n\n    bool private _paused;\n\n    constructor(uint256 pauseWindowDuration, uint256 bufferPeriodDuration) {\n        _require(pauseWindowDuration <= _MAX_PAUSE_WINDOW_DURATION, Errors.MAX_PAUSE_WINDOW_DURATION);\n        _require(bufferPeriodDuration <= _MAX_BUFFER_PERIOD_DURATION, Errors.MAX_BUFFER_PERIOD_DURATION);\n\n        uint256 pauseWindowEndTime = block.timestamp + pauseWindowDuration;\n\n        _pauseWindowEndTime = pauseWindowEndTime;\n        _bufferPeriodEndTime = pauseWindowEndTime + bufferPeriodDuration;\n    }\n\n    /**\n     * @dev Reverts if the contract is paused.\n     */\n    modifier whenNotPaused() {\n        _ensureNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Returns the current contract pause status, as well as the end times of the Pause Window and Buffer\n     * Period.\n     */\n    function getPausedState()\n        external\n        view\n        override\n        returns (\n            bool paused,\n            uint256 pauseWindowEndTime,\n            uint256 bufferPeriodEndTime\n        )\n    {\n        paused = !_isNotPaused();\n        pauseWindowEndTime = _getPauseWindowEndTime();\n        bufferPeriodEndTime = _getBufferPeriodEndTime();\n    }\n\n    /**\n     * @dev Sets the pause state to `paused`. The contract can only be paused until the end of the Pause Window, and\n     * unpaused until the end of the Buffer Period.\n     *\n     * Once the Buffer Period expires, this function reverts unconditionally.\n     */\n    function _setPaused(bool paused) internal {\n        if (paused) {\n            _require(block.timestamp < _getPauseWindowEndTime(), Errors.PAUSE_WINDOW_EXPIRED);\n        } else {\n            _require(block.timestamp < _getBufferPeriodEndTime(), Errors.BUFFER_PERIOD_EXPIRED);\n        }\n\n        _paused = paused;\n        emit PausedStateChanged(paused);\n    }\n\n    /**\n     * @dev Reverts if the contract is paused.\n     */\n    function _ensureNotPaused() internal view {\n        _require(_isNotPaused(), Errors.PAUSED);\n    }\n\n    /**\n     * @dev Reverts if the contract is not paused.\n     */\n    function _ensurePaused() internal view {\n        _require(!_isNotPaused(), Errors.NOT_PAUSED);\n    }\n\n    /**\n     * @dev Returns true if the contract is unpaused.\n     *\n     * Once the Buffer Period expires, the gas cost of calling this function is reduced dramatically, as storage is no\n     * longer accessed.\n     */\n    function _isNotPaused() internal view returns (bool) {\n        // After the Buffer Period, the (inexpensive) timestamp check short-circuits the storage access.\n        return block.timestamp > _getBufferPeriodEndTime() || !_paused;\n    }\n\n    // These getters lead to reduced bytecode size by inlining the immutable variables in a single place.\n\n    function _getPauseWindowEndTime() private view returns (uint256) {\n        return _pauseWindowEndTime;\n    }\n\n    function _getBufferPeriodEndTime() private view returns (uint256) {\n        return _bufferPeriodEndTime;\n    }\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\n\nimport \"./EOASignaturesValidator.sol\";\n\n/**\n * @dev Utility for signing Solidity function calls.\n *\n * This contract relies on the fact that Solidity contracts can be called with extra calldata, and enables\n * meta-transaction schemes by appending an EIP712 signature of the original calldata at the end.\n *\n * Derived contracts must implement the `_entrypointTypeHash` function to map function selectors to EIP712 structs.\n */\nabstract contract ExtraCalldataEOASignaturesValidator is EOASignaturesValidator {\n    // The appended data consists of a deadline, plus the [v,r,s] signature. For simplicity, we use a full 256 bit slot\n    // for each of these values, even if 'v' is typically an 8 bit value.\n    uint256 internal constant _EXTRA_CALLDATA_LENGTH = 4 * 32;\n\n    /**\n     * @dev Reverts with `errorCode` unless a valid signature for `user` was appended to the calldata.\n     */\n    function _validateExtraCalldataSignature(address user, uint256 errorCode) internal {\n        bytes32 typeHash = _entrypointTypeHash();\n\n        // Prevent accidental signature validation for functions that don't have an associated type hash.\n        _require(typeHash != bytes32(0), errorCode);\n\n        uint256 deadline = _deadline();\n\n        // All type hashes have this format: (bytes calldata, address sender, uint256 nonce, uint256 deadline).\n        bytes32 structHash = keccak256(\n            abi.encode(typeHash, keccak256(_calldata()), msg.sender, getNextNonce(user), deadline)\n        );\n\n        _ensureValidSignature(user, structHash, _signature(), deadline, errorCode);\n    }\n\n    /**\n     * @dev Returns the EIP712 type hash for the current entry point function, which can be identified by its function\n     * selector (available as `msg.sig`).\n     *\n     * The type hash must conform to the following format:\n     *  <name>(bytes calldata, address sender, uint256 nonce, uint256 deadline)\n     *\n     * If 0x00, all signatures will be considered invalid.\n     */\n    function _entrypointTypeHash() internal view virtual returns (bytes32);\n\n    /**\n     * @dev Extracts the signature deadline from extra calldata.\n     *\n     * This function returns bogus data if no signature is included.\n     */\n    function _deadline() internal pure returns (uint256) {\n        // The deadline is the first extra argument at the end of the original calldata.\n        return uint256(_decodeExtraCalldataWord(0));\n    }\n\n    /**\n     * @dev Extracts the signature parameters from extra calldata.\n     *\n     * This function returns bogus data if no signature is included. This is not a security risk, as that data would not\n     * be considered a valid signature in the first place.\n     */\n    function _signature() internal pure returns (bytes memory) {\n        // v, r and s are appended after the signature deadline, in that order.\n        uint8 v = uint8(uint256(_decodeExtraCalldataWord(0x20)));\n        bytes32 r = _decodeExtraCalldataWord(0x40);\n        bytes32 s = _decodeExtraCalldataWord(0x60);\n\n        return _toArraySignature(v, r, s);\n    }\n\n    /**\n     * @dev Returns the original calldata, without the extra bytes containing the signature.\n     *\n     * This function returns bogus data if no signature is included.\n     */\n    function _calldata() internal pure returns (bytes memory result) {\n        result = msg.data; // A calldata to memory assignment results in memory allocation and copy of contents.\n        if (result.length > _EXTRA_CALLDATA_LENGTH) {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // We simply overwrite the array length with the reduced one.\n                mstore(result, sub(calldatasize(), _EXTRA_CALLDATA_LENGTH))\n            }\n        }\n    }\n\n    /**\n     * @dev Returns a 256 bit word from 'extra' calldata, at some offset from the expected end of the original calldata.\n     *\n     * This function returns bogus data if no signature is included.\n     */\n    function _decodeExtraCalldataWord(uint256 offset) private pure returns (bytes32 result) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            result := calldataload(add(sub(calldatasize(), _EXTRA_CALLDATA_LENGTH), offset))\n        }\n    }\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\";\n\nimport \"../openzeppelin/EIP712.sol\";\n\n/**\n * @dev Utility for signing Solidity function calls.\n */\nabstract contract EOASignaturesValidator is ISignaturesValidator, EIP712 {\n    // Replay attack prevention for each account.\n    mapping(address => uint256) internal _nextNonce;\n\n    function getDomainSeparator() public view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    function getNextNonce(address account) public view override returns (uint256) {\n        return _nextNonce[account];\n    }\n\n    function _ensureValidSignature(\n        address account,\n        bytes32 structHash,\n        bytes memory signature,\n        uint256 errorCode\n    ) internal {\n        return _ensureValidSignature(account, structHash, signature, type(uint256).max, errorCode);\n    }\n\n    function _ensureValidSignature(\n        address account,\n        bytes32 structHash,\n        bytes memory signature,\n        uint256 deadline,\n        uint256 errorCode\n    ) internal {\n        bytes32 digest = _hashTypedDataV4(structHash);\n        _require(_isValidSignature(account, digest, signature), errorCode);\n\n        // We could check for the deadline before validating the signature, but this leads to saner error processing (as\n        // we only care about expired deadlines if the signature is correct) and only affects the gas cost of the revert\n        // scenario, which will only occur infrequently, if ever.\n        // The deadline is timestamp-based: it should not be relied upon for sub-minute accuracy.\n        // solhint-disable-next-line not-rely-on-time\n        _require(deadline >= block.timestamp, Errors.EXPIRED_SIGNATURE);\n\n        // We only advance the nonce after validating the signature. This is irrelevant for this module, but it can be\n        // important in derived contracts that override _isValidSignature (e.g. SignaturesValidator), as we want for\n        // the observable state to still have the current nonce as the next valid one.\n        _nextNonce[account] += 1;\n    }\n\n    function _isValidSignature(\n        address account,\n        bytes32 digest,\n        bytes memory signature\n    ) internal view virtual returns (bool) {\n        _require(signature.length == 65, Errors.MALFORMED_SIGNATURE);\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the r, s and v signature parameters, and the only way to get them is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        address recoveredAddress = ecrecover(digest, v, r, s);\n\n        // ecrecover returns the zero address on recover failure, so we need to handle that explicitly.\n        return (recoveredAddress != address(0) && recoveredAddress == account);\n    }\n\n    function _toArraySignature(\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (bytes memory) {\n        bytes memory signature = new bytes(65);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            mstore(add(signature, 32), r)\n            mstore(add(signature, 64), s)\n            mstore8(add(signature, 96), v)\n        }\n\n        return signature;\n    }\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _HASHED_NAME = keccak256(bytes(name));\n        _HASHED_VERSION = keccak256(bytes(version));\n        _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, _getChainId(), address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\n    }\n\n    // solc-ignore-next-line func-mutability\n    function _getChainId() private view returns (uint256 chainId) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            chainId := chainid()\n        }\n    }\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol\";\n\nimport \"./ERC20.sol\";\nimport \"../helpers/EOASignaturesValidator.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EOASignaturesValidator {\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH = keccak256(\n        \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n    );\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        bytes32 structHash = keccak256(\n            abi.encode(_PERMIT_TYPEHASH, owner, spender, value, getNextNonce(owner), deadline)\n        );\n\n        _ensureValidSignature(owner, structHash, _toArraySignature(v, r, s), deadline, Errors.INVALID_SIGNATURE);\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view override returns (uint256) {\n        return getNextNonce(owner);\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return getDomainSeparator();\n    }\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n     * given `owner`'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"../openzeppelin/ERC20Burnable.sol\";\nimport \"../openzeppelin/ERC20Permit.sol\";\nimport \"../openzeppelin/ERC20.sol\";\n\ncontract TestToken is ERC20, ERC20Burnable, ERC20Permit {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals\n    ) ERC20(name, symbol) ERC20Permit(name) {\n        _setupDecimals(decimals);\n    }\n\n    function mint(address recipient, uint256 amount) external {\n        _mint(recipient, amount);\n    }\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Burnable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is ERC20 {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(msg.sender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, msg.sender).sub(amount, Errors.ERC20_BURN_EXCEEDS_ALLOWANCE);\n\n        _approve(account, msg.sender, decreasedAllowance);\n        _burn(account, amount);\n    }\n}\n"
			},
			"contracts/test/MockFlashLoanRecipient.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\";\n\ncontract MockFlashLoanRecipient is IFlashLoanRecipient {\n    using Math for uint256;\n    using SafeERC20 for IERC20;\n\n    address public immutable vault;\n    bool public repayLoan;\n    bool public repayInExcess;\n    bool public reenter;\n\n    constructor(address _vault) {\n        vault = _vault;\n        repayLoan = true;\n        repayInExcess = false;\n        reenter = false;\n    }\n\n    function setRepayLoan(bool _repayLoan) public {\n        repayLoan = _repayLoan;\n    }\n\n    function setRepayInExcess(bool _repayInExcess) public {\n        repayInExcess = _repayInExcess;\n    }\n\n    function setReenter(bool _reenter) public {\n        reenter = _reenter;\n    }\n\n    // Repays loan unless setRepayLoan was called with 'false'\n    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external override {\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            IERC20 token = tokens[i];\n            uint256 amount = amounts[i];\n            uint256 feeAmount = feeAmounts[i];\n\n            require(token.balanceOf(address(this)) == amount, \"INVALID_FLASHLOAN_BALANCE\");\n\n            if (reenter) {\n                IVault(msg.sender).flashLoan(IFlashLoanRecipient(address(this)), tokens, amounts, userData);\n            }\n\n            // The recipient will mint the fees it pays\n            TestToken(address(token)).mint(address(this), repayInExcess ? feeAmount.add(1) : feeAmount);\n\n            uint256 totalDebt = amount.add(feeAmount);\n\n            if (!repayLoan) {\n                totalDebt = totalDebt.sub(1);\n            } else if (repayInExcess) {\n                totalDebt = totalDebt.add(1);\n            }\n\n            token.safeTransfer(vault, totalDebt);\n        }\n    }\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\n * Adapted from OpenZeppelin's SafeMath library.\n */\nlibrary Math {\n    /**\n     * @dev Returns the absolute value of a signed integer.\n     */\n    function abs(int256 a) internal pure returns (uint256) {\n        return a > 0 ? uint256(a) : uint256(-a);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        _require(c >= a, Errors.ADD_OVERFLOW);\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        _require((b >= 0 && c >= a) || (b < 0 && c < a), Errors.ADD_OVERFLOW);\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        _require(b <= a, Errors.SUB_OVERFLOW);\n        uint256 c = a - b;\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        _require((b >= 0 && c <= a) || (b < 0 && c > a), Errors.SUB_OVERFLOW);\n        return c;\n    }\n\n    /**\n     * @dev Returns the largest of two numbers of 256 bits.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers of 256 bits.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        _require(a == 0 || c / a == b, Errors.MUL_OVERFLOW);\n        return c;\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        bool roundUp\n    ) internal pure returns (uint256) {\n        return roundUp ? divUp(a, b) : divDown(a, b);\n    }\n\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\n        _require(b != 0, Errors.ZERO_DIVISION);\n        return a / b;\n    }\n\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\n        _require(b != 0, Errors.ZERO_DIVISION);\n\n        if (a == 0) {\n            return 0;\n        } else {\n            return 1 + (a - 1) / b;\n        }\n    }\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\n// work differently from the OpenZeppelin version if it is not.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     *\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\n     */\n    function _callOptionalReturn(address token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = token.call(data);\n\n        // If the low-level call didn't succeed we return whatever was returned from it.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            if eq(success, 0) {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n        }\n\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\n        _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\n    }\n}\n"
			},
			"contracts/FlashLoans.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// This flash loan provider was based on the Aave protocol's open source\n// implementation and terminology and interfaces are intentionally kept\n// similar\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\";\n\nimport \"./Fees.sol\";\n\n/**\n * @dev Handles Flash Loans through the Vault. Calls the `receiveFlashLoan` hook on the flash loan recipient\n * contract, which implements the `IFlashLoanRecipient` interface.\n */\nabstract contract FlashLoans is Fees, ReentrancyGuard, TemporarilyPausable {\n    using SafeERC20 for IERC20;\n\n    function flashLoan(\n        IFlashLoanRecipient recipient,\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        bytes memory userData\n    ) external override nonReentrant whenNotPaused {\n        InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length);\n\n        uint256[] memory feeAmounts = new uint256[](tokens.length);\n        uint256[] memory preLoanBalances = new uint256[](tokens.length);\n\n        // Used to ensure `tokens` is sorted in ascending order, which ensures token uniqueness.\n        IERC20 previousToken = IERC20(0);\n\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            IERC20 token = tokens[i];\n            uint256 amount = amounts[i];\n\n            _require(token > previousToken, token == IERC20(0) ? Errors.ZERO_TOKEN : Errors.UNSORTED_TOKENS);\n            previousToken = token;\n\n            preLoanBalances[i] = token.balanceOf(address(this));\n            feeAmounts[i] = _calculateFlashLoanFeeAmount(amount);\n\n            _require(preLoanBalances[i] >= amount, Errors.INSUFFICIENT_FLASH_LOAN_BALANCE);\n            token.safeTransfer(address(recipient), amount);\n        }\n\n        recipient.receiveFlashLoan(tokens, amounts, feeAmounts, userData);\n\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            IERC20 token = tokens[i];\n            uint256 preLoanBalance = preLoanBalances[i];\n\n            // Checking for loan repayment first (without accounting for fees) makes for simpler debugging, and results\n            // in more accurate revert reasons if the flash loan protocol fee percentage is zero.\n            uint256 postLoanBalance = token.balanceOf(address(this));\n            _require(postLoanBalance >= preLoanBalance, Errors.INVALID_POST_LOAN_BALANCE);\n\n            // No need for checked arithmetic since we know the loan was fully repaid.\n            uint256 receivedFeeAmount = postLoanBalance - preLoanBalance;\n            _require(receivedFeeAmount >= feeAmounts[i], Errors.INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT);\n\n            _payFeeAmount(token, receivedFeeAmount);\n            emit FlashLoan(recipient, token, amounts[i], receivedFeeAmount);\n        }\n    }\n}\n"
			},
			"contracts/Fees.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\";\n\nimport \"./ProtocolFeesCollector.sol\";\nimport \"./VaultAuthorization.sol\";\n\n/**\n * @dev To reduce the bytecode size of the Vault, most of the protocol fee logic is not here, but in the\n * ProtocolFeesCollector contract.\n */\nabstract contract Fees is IVault {\n    using SafeERC20 for IERC20;\n\n    ProtocolFeesCollector private immutable _protocolFeesCollector;\n\n    constructor() {\n        _protocolFeesCollector = new ProtocolFeesCollector(IVault(this));\n    }\n\n    function getProtocolFeesCollector() public view override returns (IProtocolFeesCollector) {\n        return _protocolFeesCollector;\n    }\n\n    /**\n     * @dev Returns the protocol swap fee percentage.\n     */\n    function _getProtocolSwapFeePercentage() internal view returns (uint256) {\n        return getProtocolFeesCollector().getSwapFeePercentage();\n    }\n\n    /**\n     * @dev Returns the protocol fee amount to charge for a flash loan of `amount`.\n     */\n    function _calculateFlashLoanFeeAmount(uint256 amount) internal view returns (uint256) {\n        // Fixed point multiplication introduces error: we round up, which means in certain scenarios the charged\n        // percentage can be slightly higher than intended.\n        uint256 percentage = getProtocolFeesCollector().getFlashLoanFeePercentage();\n        return FixedPoint.mulUp(amount, percentage);\n    }\n\n    function _payFeeAmount(IERC20 token, uint256 amount) internal {\n        if (amount > 0) {\n            token.safeTransfer(address(getProtocolFeesCollector()), amount);\n        }\n    }\n}\n"
			},
			"contracts/ProtocolFeesCollector.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\";\n\n/**\n * @dev This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the\n * Vault performs to reduce its overall bytecode size.\n *\n * The current values for all protocol fee percentages are stored here, and any tokens charged as protocol fees are\n * sent to this contract, where they may be withdrawn by authorized entities. All authorization tasks are delegated\n * to the Vault's own authorizer.\n */\ncontract ProtocolFeesCollector is IProtocolFeesCollector, Authentication, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // Absolute maximum fee percentages (1e18 = 100%, 1e16 = 1%).\n    uint256 private constant _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE = 50e16; // 50%\n    uint256 private constant _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE = 1e16; // 1%\n\n    IVault public immutable override vault;\n\n    // All fee percentages are 18-decimal fixed point numbers.\n\n    // The swap fee is charged whenever a swap occurs, as a percentage of the fee charged by the Pool. These are not\n    // actually charged on each individual swap: the `Vault` relies on the Pools being honest and reporting fees due\n    // when users join and exit them.\n    uint256 private _swapFeePercentage;\n\n    // The flash loan fee is charged whenever a flash loan occurs, as a percentage of the tokens lent.\n    uint256 private _flashLoanFeePercentage;\n\n    constructor(IVault _vault)\n        // The ProtocolFeesCollector is a singleton, so it simply uses its own address to disambiguate action\n        // identifiers.\n        Authentication(bytes32(uint256(address(this))))\n    {\n        vault = _vault;\n    }\n\n    function withdrawCollectedFees(\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        address recipient\n    ) external override nonReentrant authenticate {\n        InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length);\n\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            IERC20 token = tokens[i];\n            uint256 amount = amounts[i];\n            token.safeTransfer(recipient, amount);\n        }\n    }\n\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external override authenticate {\n        _require(newSwapFeePercentage <= _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE, Errors.SWAP_FEE_PERCENTAGE_TOO_HIGH);\n        _swapFeePercentage = newSwapFeePercentage;\n        emit SwapFeePercentageChanged(newSwapFeePercentage);\n    }\n\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external override authenticate {\n        _require(\n            newFlashLoanFeePercentage <= _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE,\n            Errors.FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH\n        );\n        _flashLoanFeePercentage = newFlashLoanFeePercentage;\n        emit FlashLoanFeePercentageChanged(newFlashLoanFeePercentage);\n    }\n\n    function getSwapFeePercentage() external view override returns (uint256) {\n        return _swapFeePercentage;\n    }\n\n    function getFlashLoanFeePercentage() external view override returns (uint256) {\n        return _flashLoanFeePercentage;\n    }\n\n    function getCollectedFeeAmounts(IERC20[] memory tokens)\n        external\n        view\n        override\n        returns (uint256[] memory feeAmounts)\n    {\n        feeAmounts = new uint256[](tokens.length);\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            feeAmounts[i] = tokens[i].balanceOf(address(this));\n        }\n    }\n\n    function getAuthorizer() external view override returns (IAuthorizer) {\n        return _getAuthorizer();\n    }\n\n    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\n        return _getAuthorizer().canPerform(actionId, account, address(this));\n    }\n\n    function _getAuthorizer() internal view returns (IAuthorizer) {\n        return vault.getAuthorizer();\n    }\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\n\nimport \"./LogExpMath.sol\";\n\n/* solhint-disable private-vars-leading-underscore */\n\nlibrary FixedPoint {\n    uint256 internal constant ONE = 1e18; // 18 decimal places\n    uint256 internal constant TWO = 2 * ONE;\n    uint256 internal constant FOUR = 4 * ONE;\n    uint256 internal constant MAX_POW_RELATIVE_ERROR = 10000; // 10^(-14)\n\n    // Minimum base for the power function when the exponent is 'free' (larger than ONE).\n    uint256 internal constant MIN_POW_BASE_FREE_EXPONENT = 0.7e18;\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Fixed Point addition is the same as regular checked addition\n\n        uint256 c = a + b;\n        _require(c >= a, Errors.ADD_OVERFLOW);\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Fixed Point addition is the same as regular checked addition\n\n        _require(b <= a, Errors.SUB_OVERFLOW);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 product = a * b;\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\n\n        return product / ONE;\n    }\n\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 product = a * b;\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\n\n        if (product == 0) {\n            return 0;\n        } else {\n            // The traditional divUp formula is:\n            // divUp(x, y) := (x + y - 1) / y\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\n            // divUp(x, y) := (x - 1) / y + 1\n            // Note that this requires x != 0, which we already tested for.\n\n            return ((product - 1) / ONE) + 1;\n        }\n    }\n\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\n        _require(b != 0, Errors.ZERO_DIVISION);\n\n        if (a == 0) {\n            return 0;\n        } else {\n            uint256 aInflated = a * ONE;\n            _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\n\n            return aInflated / b;\n        }\n    }\n\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\n        _require(b != 0, Errors.ZERO_DIVISION);\n\n        if (a == 0) {\n            return 0;\n        } else {\n            uint256 aInflated = a * ONE;\n            _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\n\n            // The traditional divUp formula is:\n            // divUp(x, y) := (x + y - 1) / y\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\n            // divUp(x, y) := (x - 1) / y + 1\n            // Note that this requires x != 0, which we already tested for.\n\n            return ((aInflated - 1) / b) + 1;\n        }\n    }\n\n    /**\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\n     * the true value (that is, the error function expected - actual is always positive).\n     */\n    function powDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        // Optimize for when y equals 1.0, 2.0 or 4.0, as those are very simple to implement and occur often in 50/50\n        // and 80/20 Weighted Pools\n        if (y == ONE) {\n            return x;\n        } else if (y == TWO) {\n            return mulDown(x, x);\n        } else if (y == FOUR) {\n            uint256 square = mulDown(x, x);\n            return mulDown(square, square);\n        } else {\n            uint256 raw = LogExpMath.pow(x, y);\n            uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\n\n            if (raw < maxError) {\n                return 0;\n            } else {\n                return sub(raw, maxError);\n            }\n        }\n    }\n\n    /**\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\n     * the true value (that is, the error function expected - actual is always negative).\n     */\n    function powUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        // Optimize for when y equals 1.0, 2.0 or 4.0, as those are very simple to implement and occur often in 50/50\n        // and 80/20 Weighted Pools\n        if (y == ONE) {\n            return x;\n        } else if (y == TWO) {\n            return mulUp(x, x);\n        } else if (y == FOUR) {\n            uint256 square = mulUp(x, x);\n            return mulUp(square, square);\n        } else {\n            uint256 raw = LogExpMath.pow(x, y);\n            uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\n\n            return add(raw, maxError);\n        }\n    }\n\n    /**\n     * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\n     *\n     * Useful when computing the complement for values with some level of relative error, as it strips this error and\n     * prevents intermediate negative values.\n     */\n    function complement(uint256 x) internal pure returns (uint256) {\n        return (x < ONE) ? (ONE - x) : 0;\n    }\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the “Software”), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n\n// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\n\n/* solhint-disable */\n\n/**\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\n *\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\n * exponentiation and logarithm (where the base is Euler's number).\n *\n * @author Fernando Martinelli - @fernandomartinelli\n * @author Sergio Yuhjtman - @sergioyuhjtman\n * @author Daniel Fernandez - @dmf7z\n */\nlibrary LogExpMath {\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\n    // two numbers, and multiply by ONE when dividing them.\n\n    // All arguments and return values are 18 decimal fixed point numbers.\n    int256 constant ONE_18 = 1e18;\n\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\n    // case of ln36, 36 decimals.\n    int256 constant ONE_20 = 1e20;\n    int256 constant ONE_36 = 1e36;\n\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\n    //\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\n    // The smallest possible result is 10^(-18), which makes largest negative argument\n    // ln(10^(-18)) = -41.446531673892822312.\n    // We use 130.0 and -41.0 to have some safety margin.\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\n\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\n    // 256 bit integer.\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\n\n    uint256 constant MILD_EXPONENT_BOUND = 2**254 / uint256(ONE_20);\n\n    // 18 decimal constants\n    int256 constant x0 = 128000000000000000000; // 2ˆ7\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // eˆ(x0) (no decimals)\n    int256 constant x1 = 64000000000000000000; // 2ˆ6\n    int256 constant a1 = 6235149080811616882910000000; // eˆ(x1) (no decimals)\n\n    // 20 decimal constants\n    int256 constant x2 = 3200000000000000000000; // 2ˆ5\n    int256 constant a2 = 7896296018268069516100000000000000; // eˆ(x2)\n    int256 constant x3 = 1600000000000000000000; // 2ˆ4\n    int256 constant a3 = 888611052050787263676000000; // eˆ(x3)\n    int256 constant x4 = 800000000000000000000; // 2ˆ3\n    int256 constant a4 = 298095798704172827474000; // eˆ(x4)\n    int256 constant x5 = 400000000000000000000; // 2ˆ2\n    int256 constant a5 = 5459815003314423907810; // eˆ(x5)\n    int256 constant x6 = 200000000000000000000; // 2ˆ1\n    int256 constant a6 = 738905609893065022723; // eˆ(x6)\n    int256 constant x7 = 100000000000000000000; // 2ˆ0\n    int256 constant a7 = 271828182845904523536; // eˆ(x7)\n    int256 constant x8 = 50000000000000000000; // 2ˆ-1\n    int256 constant a8 = 164872127070012814685; // eˆ(x8)\n    int256 constant x9 = 25000000000000000000; // 2ˆ-2\n    int256 constant a9 = 128402541668774148407; // eˆ(x9)\n    int256 constant x10 = 12500000000000000000; // 2ˆ-3\n    int256 constant a10 = 113314845306682631683; // eˆ(x10)\n    int256 constant x11 = 6250000000000000000; // 2ˆ-4\n    int256 constant a11 = 106449445891785942956; // eˆ(x11)\n\n    /**\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\n     *\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\n     */\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\n        if (y == 0) {\n            // We solve the 0^0 indetermination by making it equal one.\n            return uint256(ONE_18);\n        }\n\n        if (x == 0) {\n            return 0;\n        }\n\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\n        // x^y = exp(y * ln(x)).\n\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\n        _require(x >> 255 == 0, Errors.X_OUT_OF_BOUNDS);\n        int256 x_int256 = int256(x);\n\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\n\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\n        _require(y < MILD_EXPONENT_BOUND, Errors.Y_OUT_OF_BOUNDS);\n        int256 y_int256 = int256(y);\n\n        int256 logx_times_y;\n        if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\n            int256 ln_36_x = _ln_36(x_int256);\n\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\n            // (downscaled) last 18 decimals.\n            logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\n        } else {\n            logx_times_y = _ln(x_int256) * y_int256;\n        }\n        logx_times_y /= ONE_18;\n\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\n        _require(\n            MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\n            Errors.PRODUCT_OUT_OF_BOUNDS\n        );\n\n        return uint256(exp(logx_times_y));\n    }\n\n    /**\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\n     *\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\n     */\n    function exp(int256 x) internal pure returns (int256) {\n        _require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, Errors.INVALID_EXPONENT);\n\n        if (x < 0) {\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\n            // Fixed point division requires multiplying by ONE_18.\n            return ((ONE_18 * ONE_18) / exp(-x));\n        }\n\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\n        // decomposition.\n        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\n        // decomposition, which will be lower than the smallest x_n.\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\n\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\n        // decomposition.\n\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\n        // it and compute the accumulated product.\n\n        int256 firstAN;\n        if (x >= x0) {\n            x -= x0;\n            firstAN = a0;\n        } else if (x >= x1) {\n            x -= x1;\n            firstAN = a1;\n        } else {\n            firstAN = 1; // One with no decimal places\n        }\n\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\n        // smaller terms.\n        x *= 100;\n\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\n        int256 product = ONE_20;\n\n        if (x >= x2) {\n            x -= x2;\n            product = (product * a2) / ONE_20;\n        }\n        if (x >= x3) {\n            x -= x3;\n            product = (product * a3) / ONE_20;\n        }\n        if (x >= x4) {\n            x -= x4;\n            product = (product * a4) / ONE_20;\n        }\n        if (x >= x5) {\n            x -= x5;\n            product = (product * a5) / ONE_20;\n        }\n        if (x >= x6) {\n            x -= x6;\n            product = (product * a6) / ONE_20;\n        }\n        if (x >= x7) {\n            x -= x7;\n            product = (product * a7) / ONE_20;\n        }\n        if (x >= x8) {\n            x -= x8;\n            product = (product * a8) / ONE_20;\n        }\n        if (x >= x9) {\n            x -= x9;\n            product = (product * a9) / ONE_20;\n        }\n\n        // x10 and x11 are unnecessary here since we have high enough precision already.\n\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\n\n        int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\n        int256 term; // Each term in the sum, where the nth term is (x^n / n!).\n\n        // The first term is simply x.\n        term = x;\n        seriesSum += term;\n\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\n        // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\n\n        term = ((term * x) / ONE_20) / 2;\n        seriesSum += term;\n\n        term = ((term * x) / ONE_20) / 3;\n        seriesSum += term;\n\n        term = ((term * x) / ONE_20) / 4;\n        seriesSum += term;\n\n        term = ((term * x) / ONE_20) / 5;\n        seriesSum += term;\n\n        term = ((term * x) / ONE_20) / 6;\n        seriesSum += term;\n\n        term = ((term * x) / ONE_20) / 7;\n        seriesSum += term;\n\n        term = ((term * x) / ONE_20) / 8;\n        seriesSum += term;\n\n        term = ((term * x) / ONE_20) / 9;\n        seriesSum += term;\n\n        term = ((term * x) / ONE_20) / 10;\n        seriesSum += term;\n\n        term = ((term * x) / ONE_20) / 11;\n        seriesSum += term;\n\n        term = ((term * x) / ONE_20) / 12;\n        seriesSum += term;\n\n        // 12 Taylor terms are sufficient for 18 decimal precision.\n\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\n        // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\n        // and then drop two digits to return an 18 decimal value.\n\n        return (((product * seriesSum) / ONE_20) * firstAN) / 100;\n    }\n\n    /**\n     * @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument.\n     */\n    function log(int256 arg, int256 base) internal pure returns (int256) {\n        // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\n\n        // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\n        // upscaling.\n\n        int256 logBase;\n        if (LN_36_LOWER_BOUND < base && base < LN_36_UPPER_BOUND) {\n            logBase = _ln_36(base);\n        } else {\n            logBase = _ln(base) * ONE_18;\n        }\n\n        int256 logArg;\n        if (LN_36_LOWER_BOUND < arg && arg < LN_36_UPPER_BOUND) {\n            logArg = _ln_36(arg);\n        } else {\n            logArg = _ln(arg) * ONE_18;\n        }\n\n        // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\n        return (logArg * ONE_18) / logBase;\n    }\n\n    /**\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n     */\n    function ln(int256 a) internal pure returns (int256) {\n        // The real natural logarithm is not defined for negative numbers or zero.\n        _require(a > 0, Errors.OUT_OF_BOUNDS);\n        if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\n            return _ln_36(a) / ONE_18;\n        } else {\n            return _ln(a);\n        }\n    }\n\n    /**\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n     */\n    function _ln(int256 a) private pure returns (int256) {\n        if (a < ONE_18) {\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\n            // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\n            // Fixed point division requires multiplying by ONE_18.\n            return (-_ln((ONE_18 * ONE_18) / a));\n        }\n\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\n        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\n        // decomposition, which will be lower than the smallest a_n.\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\n\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\n        // ONE_18 to convert them to fixed point.\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\n        // by it and compute the accumulated sum.\n\n        int256 sum = 0;\n        if (a >= a0 * ONE_18) {\n            a /= a0; // Integer, not fixed point division\n            sum += x0;\n        }\n\n        if (a >= a1 * ONE_18) {\n            a /= a1; // Integer, not fixed point division\n            sum += x1;\n        }\n\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\n        sum *= 100;\n        a *= 100;\n\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\n\n        if (a >= a2) {\n            a = (a * ONE_20) / a2;\n            sum += x2;\n        }\n\n        if (a >= a3) {\n            a = (a * ONE_20) / a3;\n            sum += x3;\n        }\n\n        if (a >= a4) {\n            a = (a * ONE_20) / a4;\n            sum += x4;\n        }\n\n        if (a >= a5) {\n            a = (a * ONE_20) / a5;\n            sum += x5;\n        }\n\n        if (a >= a6) {\n            a = (a * ONE_20) / a6;\n            sum += x6;\n        }\n\n        if (a >= a7) {\n            a = (a * ONE_20) / a7;\n            sum += x7;\n        }\n\n        if (a >= a8) {\n            a = (a * ONE_20) / a8;\n            sum += x8;\n        }\n\n        if (a >= a9) {\n            a = (a * ONE_20) / a9;\n            sum += x9;\n        }\n\n        if (a >= a10) {\n            a = (a * ONE_20) / a10;\n            sum += x10;\n        }\n\n        if (a >= a11) {\n            a = (a * ONE_20) / a11;\n            sum += x11;\n        }\n\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\n        // Let z = (a - 1) / (a + 1).\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\n        // division by ONE_20.\n        int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\n        int256 z_squared = (z * z) / ONE_20;\n\n        // num is the numerator of the series: the z^(2 * n + 1) term\n        int256 num = z;\n\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n        int256 seriesSum = num;\n\n        // In each step, the numerator is multiplied by z^2\n        num = (num * z_squared) / ONE_20;\n        seriesSum += num / 3;\n\n        num = (num * z_squared) / ONE_20;\n        seriesSum += num / 5;\n\n        num = (num * z_squared) / ONE_20;\n        seriesSum += num / 7;\n\n        num = (num * z_squared) / ONE_20;\n        seriesSum += num / 9;\n\n        num = (num * z_squared) / ONE_20;\n        seriesSum += num / 11;\n\n        // 6 Taylor terms are sufficient for 36 decimal precision.\n\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\n        seriesSum *= 2;\n\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\n        // value.\n\n        return (sum + seriesSum) / 100;\n    }\n\n    /**\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\n     * for x close to one.\n     *\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\n     */\n    function _ln_36(int256 x) private pure returns (int256) {\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\n        // worthwhile.\n\n        // First, we transform x to a 36 digit fixed point value.\n        x *= ONE_18;\n\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\n        // division by ONE_36.\n        int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\n        int256 z_squared = (z * z) / ONE_36;\n\n        // num is the numerator of the series: the z^(2 * n + 1) term\n        int256 num = z;\n\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n        int256 seriesSum = num;\n\n        // In each step, the numerator is multiplied by z^2\n        num = (num * z_squared) / ONE_36;\n        seriesSum += num / 3;\n\n        num = (num * z_squared) / ONE_36;\n        seriesSum += num / 5;\n\n        num = (num * z_squared) / ONE_36;\n        seriesSum += num / 7;\n\n        num = (num * z_squared) / ONE_36;\n        seriesSum += num / 9;\n\n        num = (num * z_squared) / ONE_36;\n        seriesSum += num / 11;\n\n        num = (num * z_squared) / ONE_36;\n        seriesSum += num / 13;\n\n        num = (num * z_squared) / ONE_36;\n        seriesSum += num / 15;\n\n        // 8 Taylor terms are sufficient for 36 decimal precision.\n\n        // All that remains is multiplying by 2 (non fixed point).\n        return seriesSum * 2;\n    }\n}\n"
			},
			"contracts/Swaps.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\n\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableMap.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\";\n\nimport \"./PoolBalances.sol\";\nimport \"./balances/BalanceAllocation.sol\";\n\n/**\n * Implements the Vault's high-level swap functionality.\n *\n * Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. They need not trust the Pool\n * contracts to do this: all security checks are made by the Vault.\n *\n * The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\n * In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\n * and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\n * More complex swaps, such as one 'token in' to multiple tokens out can be achieved by batching together\n * individual swaps.\n */\nabstract contract Swaps is ReentrancyGuard, PoolBalances {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableMap for EnumerableMap.IERC20ToBytes32Map;\n\n    using Math for int256;\n    using Math for uint256;\n    using SafeCast for uint256;\n    using BalanceAllocation for bytes32;\n\n    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    )\n        external\n        payable\n        override\n        nonReentrant\n        whenNotPaused\n        authenticateFor(funds.sender)\n        returns (uint256 amountCalculated)\n    {\n        // The deadline is timestamp-based: it should not be relied upon for sub-minute accuracy.\n        // solhint-disable-next-line not-rely-on-time\n        _require(block.timestamp <= deadline, Errors.SWAP_DEADLINE);\n\n        // This revert reason is for consistency with `batchSwap`: an equivalent `swap` performed using that function\n        // would result in this error.\n        _require(singleSwap.amount > 0, Errors.UNKNOWN_AMOUNT_IN_FIRST_SWAP);\n\n        IERC20 tokenIn = _translateToIERC20(singleSwap.assetIn);\n        IERC20 tokenOut = _translateToIERC20(singleSwap.assetOut);\n        _require(tokenIn != tokenOut, Errors.CANNOT_SWAP_SAME_TOKEN);\n\n        // Initializing each struct field one-by-one uses less gas than setting all at once.\n        IPoolSwapStructs.SwapRequest memory poolRequest;\n        poolRequest.poolId = singleSwap.poolId;\n        poolRequest.kind = singleSwap.kind;\n        poolRequest.tokenIn = tokenIn;\n        poolRequest.tokenOut = tokenOut;\n        poolRequest.amount = singleSwap.amount;\n        poolRequest.userData = singleSwap.userData;\n        poolRequest.from = funds.sender;\n        poolRequest.to = funds.recipient;\n        // The lastChangeBlock field is left uninitialized.\n\n        uint256 amountIn;\n        uint256 amountOut;\n\n        (amountCalculated, amountIn, amountOut) = _swapWithPool(poolRequest);\n        _require(singleSwap.kind == SwapKind.GIVEN_IN ? amountOut >= limit : amountIn <= limit, Errors.SWAP_LIMIT);\n\n        _receiveAsset(singleSwap.assetIn, amountIn, funds.sender, funds.fromInternalBalance);\n        _sendAsset(singleSwap.assetOut, amountOut, funds.recipient, funds.toInternalBalance);\n\n        // If the asset in is ETH, then `amountIn` ETH was wrapped into WETH.\n        _handleRemainingEth(_isETH(singleSwap.assetIn) ? amountIn : 0);\n    }\n\n    function batchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds,\n        int256[] memory limits,\n        uint256 deadline\n    )\n        external\n        payable\n        override\n        nonReentrant\n        whenNotPaused\n        authenticateFor(funds.sender)\n        returns (int256[] memory assetDeltas)\n    {\n        // The deadline is timestamp-based: it should not be relied upon for sub-minute accuracy.\n        // solhint-disable-next-line not-rely-on-time\n        _require(block.timestamp <= deadline, Errors.SWAP_DEADLINE);\n\n        InputHelpers.ensureInputLengthMatch(assets.length, limits.length);\n\n        // Perform the swaps, updating the Pool token balances and computing the net Vault asset deltas.\n        assetDeltas = _swapWithPools(swaps, assets, funds, kind);\n\n        // Process asset deltas, by either transferring assets from the sender (for positive deltas) or to the recipient\n        // (for negative deltas).\n        uint256 wrappedEth = 0;\n        for (uint256 i = 0; i < assets.length; ++i) {\n            IAsset asset = assets[i];\n            int256 delta = assetDeltas[i];\n            _require(delta <= limits[i], Errors.SWAP_LIMIT);\n\n            if (delta > 0) {\n                uint256 toReceive = uint256(delta);\n                _receiveAsset(asset, toReceive, funds.sender, funds.fromInternalBalance);\n\n                if (_isETH(asset)) {\n                    wrappedEth = wrappedEth.add(toReceive);\n                }\n            } else if (delta < 0) {\n                uint256 toSend = uint256(-delta);\n                _sendAsset(asset, toSend, funds.recipient, funds.toInternalBalance);\n            }\n        }\n\n        // Handle any used and remaining ETH.\n        _handleRemainingEth(wrappedEth);\n    }\n\n    // For `_swapWithPools` to handle both 'given in' and 'given out' swaps, it internally tracks the 'given' amount\n    // (supplied by the caller), and the 'calculated' amount (returned by the Pool in response to the swap request).\n\n    /**\n     * @dev Given the two swap tokens and the swap kind, returns which one is the 'given' token (the token whose\n     * amount is supplied by the caller).\n     */\n    function _tokenGiven(\n        SwapKind kind,\n        IERC20 tokenIn,\n        IERC20 tokenOut\n    ) private pure returns (IERC20) {\n        return kind == SwapKind.GIVEN_IN ? tokenIn : tokenOut;\n    }\n\n    /**\n     * @dev Given the two swap tokens and the swap kind, returns which one is the 'calculated' token (the token whose\n     * amount is calculated by the Pool).\n     */\n    function _tokenCalculated(\n        SwapKind kind,\n        IERC20 tokenIn,\n        IERC20 tokenOut\n    ) private pure returns (IERC20) {\n        return kind == SwapKind.GIVEN_IN ? tokenOut : tokenIn;\n    }\n\n    /**\n     * @dev Returns an ordered pair (amountIn, amountOut) given the 'given' and 'calculated' amounts, and the swap kind.\n     */\n    function _getAmounts(\n        SwapKind kind,\n        uint256 amountGiven,\n        uint256 amountCalculated\n    ) private pure returns (uint256 amountIn, uint256 amountOut) {\n        if (kind == SwapKind.GIVEN_IN) {\n            (amountIn, amountOut) = (amountGiven, amountCalculated);\n        } else {\n            // SwapKind.GIVEN_OUT\n            (amountIn, amountOut) = (amountCalculated, amountGiven);\n        }\n    }\n\n    /**\n     * @dev Performs all `swaps`, calling swap hooks on the Pool contracts and updating their balances. Does not cause\n     * any transfer of tokens - instead it returns the net Vault token deltas: positive if the Vault should receive\n     * tokens, and negative if it should send them.\n     */\n    function _swapWithPools(\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds,\n        SwapKind kind\n    ) private returns (int256[] memory assetDeltas) {\n        assetDeltas = new int256[](assets.length);\n\n        // These variables could be declared inside the loop, but that causes the compiler to allocate memory on each\n        // loop iteration, increasing gas costs.\n        BatchSwapStep memory batchSwapStep;\n        IPoolSwapStructs.SwapRequest memory poolRequest;\n\n        // These store data about the previous swap here to implement multihop logic across swaps.\n        IERC20 previousTokenCalculated;\n        uint256 previousAmountCalculated;\n\n        for (uint256 i = 0; i < swaps.length; ++i) {\n            batchSwapStep = swaps[i];\n\n            bool withinBounds = batchSwapStep.assetInIndex < assets.length &&\n                batchSwapStep.assetOutIndex < assets.length;\n            _require(withinBounds, Errors.OUT_OF_BOUNDS);\n\n            IERC20 tokenIn = _translateToIERC20(assets[batchSwapStep.assetInIndex]);\n            IERC20 tokenOut = _translateToIERC20(assets[batchSwapStep.assetOutIndex]);\n            _require(tokenIn != tokenOut, Errors.CANNOT_SWAP_SAME_TOKEN);\n\n            // Sentinel value for multihop logic\n            if (batchSwapStep.amount == 0) {\n                // When the amount given is zero, we use the calculated amount for the previous swap, as long as the\n                // current swap's given token is the previous calculated token. This makes it possible to swap a\n                // given amount of token A for token B, and then use the resulting token B amount to swap for token C.\n                _require(i > 0, Errors.UNKNOWN_AMOUNT_IN_FIRST_SWAP);\n                bool usingPreviousToken = previousTokenCalculated == _tokenGiven(kind, tokenIn, tokenOut);\n                _require(usingPreviousToken, Errors.MALCONSTRUCTED_MULTIHOP_SWAP);\n                batchSwapStep.amount = previousAmountCalculated;\n            }\n\n            // Initializing each struct field one-by-one uses less gas than setting all at once\n            poolRequest.poolId = batchSwapStep.poolId;\n            poolRequest.kind = kind;\n            poolRequest.tokenIn = tokenIn;\n            poolRequest.tokenOut = tokenOut;\n            poolRequest.amount = batchSwapStep.amount;\n            poolRequest.userData = batchSwapStep.userData;\n            poolRequest.from = funds.sender;\n            poolRequest.to = funds.recipient;\n            // The lastChangeBlock field is left uninitialized\n\n            uint256 amountIn;\n            uint256 amountOut;\n            (previousAmountCalculated, amountIn, amountOut) = _swapWithPool(poolRequest);\n\n            previousTokenCalculated = _tokenCalculated(kind, tokenIn, tokenOut);\n\n            // Accumulate Vault deltas across swaps\n            assetDeltas[batchSwapStep.assetInIndex] = assetDeltas[batchSwapStep.assetInIndex].add(amountIn.toInt256());\n            assetDeltas[batchSwapStep.assetOutIndex] = assetDeltas[batchSwapStep.assetOutIndex].sub(\n                amountOut.toInt256()\n            );\n        }\n    }\n\n    /**\n     * @dev Performs a swap according to the parameters specified in `request`, calling the Pool's contract hook and\n     * updating the Pool's balance.\n     *\n     * Returns the amount of tokens going into or out of the Vault as a result of this swap, depending on the swap kind.\n     */\n    function _swapWithPool(IPoolSwapStructs.SwapRequest memory request)\n        private\n        returns (\n            uint256 amountCalculated,\n            uint256 amountIn,\n            uint256 amountOut\n        )\n    {\n        // Get the calculated amount from the Pool and update its balances\n        address pool = _getPoolAddress(request.poolId);\n        PoolSpecialization specialization = _getPoolSpecialization(request.poolId);\n\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\n            amountCalculated = _processTwoTokenPoolSwapRequest(request, IMinimalSwapInfoPool(pool));\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\n            amountCalculated = _processMinimalSwapInfoPoolSwapRequest(request, IMinimalSwapInfoPool(pool));\n        } else {\n            // PoolSpecialization.GENERAL\n            amountCalculated = _processGeneralPoolSwapRequest(request, IGeneralPool(pool));\n        }\n\n        (amountIn, amountOut) = _getAmounts(request.kind, request.amount, amountCalculated);\n        emit Swap(request.poolId, request.tokenIn, request.tokenOut, amountIn, amountOut);\n    }\n\n    function _processTwoTokenPoolSwapRequest(IPoolSwapStructs.SwapRequest memory request, IMinimalSwapInfoPool pool)\n        private\n        returns (uint256 amountCalculated)\n    {\n        // For gas efficiency reasons, this function uses low-level knowledge of how Two Token Pool balances are\n        // stored internally, instead of using getters and setters for all operations.\n\n        (\n            bytes32 tokenABalance,\n            bytes32 tokenBBalance,\n            TwoTokenPoolBalances storage poolBalances\n        ) = _getTwoTokenPoolSharedBalances(request.poolId, request.tokenIn, request.tokenOut);\n\n        // We have the two Pool balances, but we don't know which one is 'token in' or 'token out'.\n        bytes32 tokenInBalance;\n        bytes32 tokenOutBalance;\n\n        // In Two Token Pools, token A has a smaller address than token B\n        if (request.tokenIn < request.tokenOut) {\n            // in is A, out is B\n            tokenInBalance = tokenABalance;\n            tokenOutBalance = tokenBBalance;\n        } else {\n            // in is B, out is A\n            tokenOutBalance = tokenABalance;\n            tokenInBalance = tokenBBalance;\n        }\n\n        // Perform the swap request and compute the new balances for 'token in' and 'token out' after the swap\n        (tokenInBalance, tokenOutBalance, amountCalculated) = _callMinimalSwapInfoPoolOnSwapHook(\n            request,\n            pool,\n            tokenInBalance,\n            tokenOutBalance\n        );\n\n        // We check the token ordering again to create the new shared cash packed struct\n        poolBalances.sharedCash = request.tokenIn < request.tokenOut\n            ? BalanceAllocation.toSharedCash(tokenInBalance, tokenOutBalance) // in is A, out is B\n            : BalanceAllocation.toSharedCash(tokenOutBalance, tokenInBalance); // in is B, out is A\n    }\n\n    function _processMinimalSwapInfoPoolSwapRequest(\n        IPoolSwapStructs.SwapRequest memory request,\n        IMinimalSwapInfoPool pool\n    ) private returns (uint256 amountCalculated) {\n        bytes32 tokenInBalance = _getMinimalSwapInfoPoolBalance(request.poolId, request.tokenIn);\n        bytes32 tokenOutBalance = _getMinimalSwapInfoPoolBalance(request.poolId, request.tokenOut);\n\n        // Perform the swap request and compute the new balances for 'token in' and 'token out' after the swap\n        (tokenInBalance, tokenOutBalance, amountCalculated) = _callMinimalSwapInfoPoolOnSwapHook(\n            request,\n            pool,\n            tokenInBalance,\n            tokenOutBalance\n        );\n\n        _minimalSwapInfoPoolsBalances[request.poolId][request.tokenIn] = tokenInBalance;\n        _minimalSwapInfoPoolsBalances[request.poolId][request.tokenOut] = tokenOutBalance;\n    }\n\n    /**\n     * @dev Calls the onSwap hook for a Pool that implements IMinimalSwapInfoPool: both Minimal Swap Info and Two Token\n     * Pools do this.\n     */\n    function _callMinimalSwapInfoPoolOnSwapHook(\n        IPoolSwapStructs.SwapRequest memory request,\n        IMinimalSwapInfoPool pool,\n        bytes32 tokenInBalance,\n        bytes32 tokenOutBalance\n    )\n        internal\n        returns (\n            bytes32 newTokenInBalance,\n            bytes32 newTokenOutBalance,\n            uint256 amountCalculated\n        )\n    {\n        uint256 tokenInTotal = tokenInBalance.total();\n        uint256 tokenOutTotal = tokenOutBalance.total();\n        request.lastChangeBlock = Math.max(tokenInBalance.lastChangeBlock(), tokenOutBalance.lastChangeBlock());\n\n        // Perform the swap request callback, and compute the new balances for 'token in' and 'token out' after the swap\n        amountCalculated = pool.onSwap(request, tokenInTotal, tokenOutTotal);\n        (uint256 amountIn, uint256 amountOut) = _getAmounts(request.kind, request.amount, amountCalculated);\n\n        newTokenInBalance = tokenInBalance.increaseCash(amountIn);\n        newTokenOutBalance = tokenOutBalance.decreaseCash(amountOut);\n    }\n\n    function _processGeneralPoolSwapRequest(IPoolSwapStructs.SwapRequest memory request, IGeneralPool pool)\n        private\n        returns (uint256 amountCalculated)\n    {\n        bytes32 tokenInBalance;\n        bytes32 tokenOutBalance;\n\n        // We access both token indexes without checking existence, because we will do it manually immediately after.\n        EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[request.poolId];\n        uint256 indexIn = poolBalances.unchecked_indexOf(request.tokenIn);\n        uint256 indexOut = poolBalances.unchecked_indexOf(request.tokenOut);\n\n        if (indexIn == 0 || indexOut == 0) {\n            // The tokens might not be registered because the Pool itself is not registered. We check this to provide a\n            // more accurate revert reason.\n            _ensureRegisteredPool(request.poolId);\n            _revert(Errors.TOKEN_NOT_REGISTERED);\n        }\n\n        // EnumerableMap stores indices *plus one* to use the zero index as a sentinel value - because these are valid,\n        // we can undo this.\n        indexIn -= 1;\n        indexOut -= 1;\n\n        uint256 tokenAmount = poolBalances.length();\n        uint256[] memory currentBalances = new uint256[](tokenAmount);\n\n        request.lastChangeBlock = 0;\n        for (uint256 i = 0; i < tokenAmount; i++) {\n            // Because the iteration is bounded by `tokenAmount`, and no tokens are registered or deregistered here, we\n            // know `i` is a valid token index and can use `unchecked_valueAt` to save storage reads.\n            bytes32 balance = poolBalances.unchecked_valueAt(i);\n\n            currentBalances[i] = balance.total();\n            request.lastChangeBlock = Math.max(request.lastChangeBlock, balance.lastChangeBlock());\n\n            if (i == indexIn) {\n                tokenInBalance = balance;\n            } else if (i == indexOut) {\n                tokenOutBalance = balance;\n            }\n        }\n\n        // Perform the swap request callback and compute the new balances for 'token in' and 'token out' after the swap\n        amountCalculated = pool.onSwap(request, currentBalances, indexIn, indexOut);\n        (uint256 amountIn, uint256 amountOut) = _getAmounts(request.kind, request.amount, amountCalculated);\n        tokenInBalance = tokenInBalance.increaseCash(amountIn);\n        tokenOutBalance = tokenOutBalance.decreaseCash(amountOut);\n\n        // Because no tokens were registered or deregistered between now or when we retrieved the indexes for\n        // 'token in' and 'token out', we can use `unchecked_setAt` to save storage reads.\n        poolBalances.unchecked_setAt(indexIn, tokenInBalance);\n        poolBalances.unchecked_setAt(indexOut, tokenOutBalance);\n    }\n\n    // This function is not marked as `nonReentrant` because the underlying mechanism relies on reentrancy\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds\n    ) external override returns (int256[] memory) {\n        // In order to accurately 'simulate' swaps, this function actually does perform the swaps, including calling the\n        // Pool hooks and updating balances in storage. However, once it computes the final Vault Deltas, it\n        // reverts unconditionally, returning this array as the revert data.\n        //\n        // By wrapping this reverting call, we can decode the deltas 'returned' and return them as a normal Solidity\n        // function would. The only caveat is the function becomes non-view, but off-chain clients can still call it\n        // via eth_call to get the expected result.\n        //\n        // This technique was inspired by the work from the Gnosis team in the Gnosis Safe contract:\n        // https://github.com/gnosis/safe-contracts/blob/v1.2.0/contracts/GnosisSafe.sol#L265\n        //\n        // Most of this function is implemented using inline assembly, as the actual work it needs to do is not\n        // significant, and Solidity is not particularly well-suited to generate this behavior, resulting in a large\n        // amount of generated bytecode.\n\n        if (msg.sender != address(this)) {\n            // We perform an external call to ourselves, forwarding the same calldata. In this call, the else clause of\n            // the preceding if statement will be executed instead.\n\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, ) = address(this).call(msg.data);\n\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // This call should always revert to decode the actual asset deltas from the revert reason\n                switch success\n                    case 0 {\n                        // Note we are manually writing the memory slot 0. We can safely overwrite whatever is\n                        // stored there as we take full control of the execution and then immediately return.\n\n                        // We copy the first 4 bytes to check if it matches with the expected signature, otherwise\n                        // there was another revert reason and we should forward it.\n                        returndatacopy(0, 0, 0x04)\n                        let error := and(mload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n                        // If the first 4 bytes don't match with the expected signature, we forward the revert reason.\n                        if eq(eq(error, 0xfa61cc1200000000000000000000000000000000000000000000000000000000), 0) {\n                            returndatacopy(0, 0, returndatasize())\n                            revert(0, returndatasize())\n                        }\n\n                        // The returndata contains the signature, followed by the raw memory representation of an array:\n                        // length + data. We need to return an ABI-encoded representation of this array.\n                        // An ABI-encoded array contains an additional field when compared to its raw memory\n                        // representation: an offset to the location of the length. The offset itself is 32 bytes long,\n                        // so the smallest value we  can use is 32 for the data to be located immediately after it.\n                        mstore(0, 32)\n\n                        // We now copy the raw memory array from returndata into memory. Since the offset takes up 32\n                        // bytes, we start copying at address 0x20. We also get rid of the error signature, which takes\n                        // the first four bytes of returndata.\n                        let size := sub(returndatasize(), 0x04)\n                        returndatacopy(0x20, 0x04, size)\n\n                        // We finally return the ABI-encoded array, which has a total length equal to that of the array\n                        // (returndata), plus the 32 bytes for the offset.\n                        return(0, add(size, 32))\n                    }\n                    default {\n                        // This call should always revert, but we fail nonetheless if that didn't happen\n                        invalid()\n                    }\n            }\n        } else {\n            int256[] memory deltas = _swapWithPools(swaps, assets, funds, kind);\n\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // We will return a raw representation of the array in memory, which is composed of a 32 byte length,\n                // followed by the 32 byte int256 values. Because revert expects a size in bytes, we multiply the array\n                // length (stored at `deltas`) by 32.\n                let size := mul(mload(deltas), 32)\n\n                // We send one extra value for the error signature \"QueryError(int256[])\" which is 0xfa61cc12.\n                // We store it in the previous slot to the `deltas` array. We know there will be at least one available\n                // slot due to how the memory scratch space works.\n                // We can safely overwrite whatever is stored in this slot as we will revert immediately after that.\n                mstore(sub(deltas, 0x20), 0x00000000000000000000000000000000000000000000000000000000fa61cc12)\n                let start := sub(deltas, 0x04)\n\n                // When copying from `deltas` into returndata, we copy an additional 36 bytes to also return the array's\n                // length and the error signature.\n                revert(start, add(size, 36))\n            }\n        }\n    }\n}\n"
			},
			"contracts/PoolBalances.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\";\n\nimport \"./Fees.sol\";\nimport \"./PoolTokens.sol\";\nimport \"./UserBalance.sol\";\n\n/**\n * @dev Stores the Asset Managers (by Pool and token), and implements the top level Asset Manager and Pool interfaces,\n * such as registering and deregistering tokens, joining and exiting Pools, and informational functions like `getPool`\n * and `getPoolTokens`, delegating to specialization-specific functions as needed.\n *\n * `managePoolBalance` handles all Asset Manager interactions.\n */\nabstract contract PoolBalances is Fees, ReentrancyGuard, PoolTokens, UserBalance {\n    using Math for uint256;\n    using SafeERC20 for IERC20;\n    using BalanceAllocation for bytes32;\n    using BalanceAllocation for bytes32[];\n\n    function joinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        JoinPoolRequest memory request\n    ) external payable override whenNotPaused {\n        // This function doesn't have the nonReentrant modifier: it is applied to `_joinOrExit` instead.\n\n        // Note that `recipient` is not actually payable in the context of a join - we cast it because we handle both\n        // joins and exits at once.\n        _joinOrExit(PoolBalanceChangeKind.JOIN, poolId, sender, payable(recipient), _toPoolBalanceChange(request));\n    }\n\n    function exitPool(\n        bytes32 poolId,\n        address sender,\n        address payable recipient,\n        ExitPoolRequest memory request\n    ) external override {\n        // This function doesn't have the nonReentrant modifier: it is applied to `_joinOrExit` instead.\n        _joinOrExit(PoolBalanceChangeKind.EXIT, poolId, sender, recipient, _toPoolBalanceChange(request));\n    }\n\n    // This has the exact same layout as JoinPoolRequest and ExitPoolRequest, except the `maxAmountsIn` and\n    // `minAmountsOut` are called `limits`. Internally we use this struct for both since these two functions are quite\n    // similar, but expose the others to callers for clarity.\n    struct PoolBalanceChange {\n        IAsset[] assets;\n        uint256[] limits;\n        bytes userData;\n        bool useInternalBalance;\n    }\n\n    /**\n     * @dev Converts a JoinPoolRequest into a PoolBalanceChange, with no runtime cost.\n     */\n    function _toPoolBalanceChange(JoinPoolRequest memory request)\n        private\n        pure\n        returns (PoolBalanceChange memory change)\n    {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            change := request\n        }\n    }\n\n    /**\n     * @dev Converts an ExitPoolRequest into a PoolBalanceChange, with no runtime cost.\n     */\n    function _toPoolBalanceChange(ExitPoolRequest memory request)\n        private\n        pure\n        returns (PoolBalanceChange memory change)\n    {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            change := request\n        }\n    }\n\n    /**\n     * @dev Implements both `joinPool` and `exitPool`, based on `kind`.\n     */\n    function _joinOrExit(\n        PoolBalanceChangeKind kind,\n        bytes32 poolId,\n        address sender,\n        address payable recipient,\n        PoolBalanceChange memory change\n    ) private nonReentrant withRegisteredPool(poolId) authenticateFor(sender) {\n        // This function uses a large number of stack variables (poolId, sender and recipient, balances, amounts, fees,\n        // etc.), which leads to 'stack too deep' issues. It relies on private functions with seemingly arbitrary\n        // interfaces to work around this limitation.\n\n        InputHelpers.ensureInputLengthMatch(change.assets.length, change.limits.length);\n\n        // We first check that the caller passed the Pool's registered tokens in the correct order, and retrieve the\n        // current balance for each.\n        IERC20[] memory tokens = _translateToIERC20(change.assets);\n        bytes32[] memory balances = _validateTokensAndGetBalances(poolId, tokens);\n\n        // The bulk of the work is done here: the corresponding Pool hook is called, its final balances are computed,\n        // assets are transferred, and fees are paid.\n        (\n            bytes32[] memory finalBalances,\n            uint256[] memory amountsInOrOut,\n            uint256[] memory paidProtocolSwapFeeAmounts\n        ) = _callPoolBalanceChange(kind, poolId, sender, recipient, change, balances);\n\n        // All that remains is storing the new Pool balances.\n        PoolSpecialization specialization = _getPoolSpecialization(poolId);\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\n            _setTwoTokenPoolCashBalances(poolId, tokens[0], finalBalances[0], tokens[1], finalBalances[1]);\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\n            _setMinimalSwapInfoPoolBalances(poolId, tokens, finalBalances);\n        } else {\n            // PoolSpecialization.GENERAL\n            _setGeneralPoolBalances(poolId, finalBalances);\n        }\n\n        bool positive = kind == PoolBalanceChangeKind.JOIN; // Amounts in are positive, out are negative\n        emit PoolBalanceChanged(\n            poolId,\n            sender,\n            tokens,\n            // We can unsafely cast to int256 because balances are actually stored as uint112\n            _unsafeCastToInt256(amountsInOrOut, positive),\n            paidProtocolSwapFeeAmounts\n        );\n    }\n\n    /**\n     * @dev Calls the corresponding Pool hook to get the amounts in/out plus protocol fee amounts, and performs the\n     * associated token transfers and fee payments, returning the Pool's final balances.\n     */\n    function _callPoolBalanceChange(\n        PoolBalanceChangeKind kind,\n        bytes32 poolId,\n        address sender,\n        address payable recipient,\n        PoolBalanceChange memory change,\n        bytes32[] memory balances\n    )\n        private\n        returns (\n            bytes32[] memory finalBalances,\n            uint256[] memory amountsInOrOut,\n            uint256[] memory dueProtocolFeeAmounts\n        )\n    {\n        (uint256[] memory totalBalances, uint256 lastChangeBlock) = balances.totalsAndLastChangeBlock();\n\n        IBasePool pool = IBasePool(_getPoolAddress(poolId));\n        (amountsInOrOut, dueProtocolFeeAmounts) = kind == PoolBalanceChangeKind.JOIN\n            ? pool.onJoinPool(\n                poolId,\n                sender,\n                recipient,\n                totalBalances,\n                lastChangeBlock,\n                _getProtocolSwapFeePercentage(),\n                change.userData\n            )\n            : pool.onExitPool(\n                poolId,\n                sender,\n                recipient,\n                totalBalances,\n                lastChangeBlock,\n                _getProtocolSwapFeePercentage(),\n                change.userData\n            );\n\n        InputHelpers.ensureInputLengthMatch(balances.length, amountsInOrOut.length, dueProtocolFeeAmounts.length);\n\n        // The Vault ignores the `recipient` in joins and the `sender` in exits: it is up to the Pool to keep track of\n        // their participation.\n        finalBalances = kind == PoolBalanceChangeKind.JOIN\n            ? _processJoinPoolTransfers(sender, change, balances, amountsInOrOut, dueProtocolFeeAmounts)\n            : _processExitPoolTransfers(recipient, change, balances, amountsInOrOut, dueProtocolFeeAmounts);\n    }\n\n    /**\n     * @dev Transfers `amountsIn` from `sender`, checking that they are within their accepted limits, and pays\n     * accumulated protocol swap fees.\n     *\n     * Returns the Pool's final balances, which are the current balances plus `amountsIn` minus accumulated protocol\n     * swap fees.\n     */\n    function _processJoinPoolTransfers(\n        address sender,\n        PoolBalanceChange memory change,\n        bytes32[] memory balances,\n        uint256[] memory amountsIn,\n        uint256[] memory dueProtocolFeeAmounts\n    ) private returns (bytes32[] memory finalBalances) {\n        // We need to track how much of the received ETH was used and wrapped into WETH to return any excess.\n        uint256 wrappedEth = 0;\n\n        finalBalances = new bytes32[](balances.length);\n        for (uint256 i = 0; i < change.assets.length; ++i) {\n            uint256 amountIn = amountsIn[i];\n            _require(amountIn <= change.limits[i], Errors.JOIN_ABOVE_MAX);\n\n            // Receive assets from the sender - possibly from Internal Balance.\n            IAsset asset = change.assets[i];\n            _receiveAsset(asset, amountIn, sender, change.useInternalBalance);\n\n            if (_isETH(asset)) {\n                wrappedEth = wrappedEth.add(amountIn);\n            }\n\n            uint256 feeAmount = dueProtocolFeeAmounts[i];\n            _payFeeAmount(_translateToIERC20(asset), feeAmount);\n\n            // Compute the new Pool balances. Note that the fee amount might be larger than `amountIn`,\n            // resulting in an overall decrease of the Pool's balance for a token.\n            finalBalances[i] = (amountIn >= feeAmount) // This lets us skip checked arithmetic\n                ? balances[i].increaseCash(amountIn - feeAmount)\n                : balances[i].decreaseCash(feeAmount - amountIn);\n        }\n\n        // Handle any used and remaining ETH.\n        _handleRemainingEth(wrappedEth);\n    }\n\n    /**\n     * @dev Transfers `amountsOut` to `recipient`, checking that they are within their accepted limits, and pays\n     * accumulated protocol swap fees from the Pool.\n     *\n     * Returns the Pool's final balances, which are the current `balances` minus `amountsOut` and fees paid\n     * (`dueProtocolFeeAmounts`).\n     */\n    function _processExitPoolTransfers(\n        address payable recipient,\n        PoolBalanceChange memory change,\n        bytes32[] memory balances,\n        uint256[] memory amountsOut,\n        uint256[] memory dueProtocolFeeAmounts\n    ) private returns (bytes32[] memory finalBalances) {\n        finalBalances = new bytes32[](balances.length);\n        for (uint256 i = 0; i < change.assets.length; ++i) {\n            uint256 amountOut = amountsOut[i];\n            _require(amountOut >= change.limits[i], Errors.EXIT_BELOW_MIN);\n\n            // Send tokens to the recipient - possibly to Internal Balance\n            IAsset asset = change.assets[i];\n            _sendAsset(asset, amountOut, recipient, change.useInternalBalance);\n\n            uint256 feeAmount = dueProtocolFeeAmounts[i];\n            _payFeeAmount(_translateToIERC20(asset), feeAmount);\n\n            // Compute the new Pool balances. A Pool's token balance always decreases after an exit (potentially by 0).\n            finalBalances[i] = balances[i].decreaseCash(amountOut.add(feeAmount));\n        }\n    }\n\n    /**\n     * @dev Returns the total balance for `poolId`'s `expectedTokens`.\n     *\n     * `expectedTokens` must exactly equal the token array returned by `getPoolTokens`: both arrays must have the same\n     * length, elements and order. Additionally, the Pool must have at least one registered token.\n     */\n    function _validateTokensAndGetBalances(bytes32 poolId, IERC20[] memory expectedTokens)\n        private\n        view\n        returns (bytes32[] memory)\n    {\n        (IERC20[] memory actualTokens, bytes32[] memory balances) = _getPoolTokens(poolId);\n        InputHelpers.ensureInputLengthMatch(actualTokens.length, expectedTokens.length);\n        _require(actualTokens.length > 0, Errors.POOL_NO_TOKENS);\n\n        for (uint256 i = 0; i < actualTokens.length; ++i) {\n            _require(actualTokens[i] == expectedTokens[i], Errors.TOKENS_MISMATCH);\n        }\n\n        return balances;\n    }\n\n    /**\n     * @dev Casts an array of uint256 to int256, setting the sign of the result according to the `positive` flag,\n     * without checking whether the values fit in the signed 256 bit range.\n     */\n    function _unsafeCastToInt256(uint256[] memory values, bool positive)\n        private\n        pure\n        returns (int256[] memory signedValues)\n    {\n        signedValues = new int256[](values.length);\n        for (uint256 i = 0; i < values.length; i++) {\n            signedValues[i] = positive ? int256(values[i]) : -int256(values[i]);\n        }\n    }\n}\n"
			},
			"contracts/balances/BalanceAllocation.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\";\n\n// This library is used to create a data structure that represents a token's balance for a Pool. 'cash' is how many\n// tokens the Pool has sitting inside of the Vault. 'managed' is how many tokens were withdrawn from the Vault by the\n// Pool's Asset Manager. 'total' is the sum of these two, and represents the Pool's total token balance, including\n// tokens that are *not* inside of the Vault.\n//\n// 'cash' is updated whenever tokens enter and exit the Vault, while 'managed' is only updated if the reason tokens are\n// moving is due to an Asset Manager action. This is reflected in the different methods available: 'increaseCash'\n// and 'decreaseCash' for swaps and add/remove liquidity events, and 'cashToManaged' and 'managedToCash' for events\n// transferring funds to and from the Asset Manager.\n//\n// The Vault disallows the Pool's 'cash' from becoming negative. In other words, it can never use any tokens that are\n// not inside the Vault.\n//\n// One of the goals of this library is to store the entire token balance in a single storage slot, which is why we use\n// 112 bit unsigned integers for 'cash' and 'managed'. For consistency, we also disallow any combination of 'cash' and\n// 'managed' that yields a 'total' that doesn't fit in 112 bits.\n//\n// The remaining 32 bits of the slot are used to store the most recent block when the total balance changed. This\n// can be used to implement price oracles that are resilient to 'sandwich' attacks.\n//\n// We could use a Solidity struct to pack these three values together in a single storage slot, but unfortunately\n// Solidity only allows for structs to live in either storage, calldata or memory. Because a memory struct still takes\n// up a slot in the stack (to store its memory location), and because the entire balance fits in a single stack slot\n// (two 112 bit values plus the 32 bit block), using memory is strictly less gas performant. Therefore, we do manual\n// packing and unpacking.\n//\n// Since we cannot define new types, we rely on bytes32 to represent these values instead, as it doesn't have any\n// associated arithmetic operations and therefore reduces the chance of misuse.\nlibrary BalanceAllocation {\n    using Math for uint256;\n\n    // The 'cash' portion of the balance is stored in the least significant 112 bits of a 256 bit word, while the\n    // 'managed' part uses the following 112 bits. The most significant 32 bits are used to store the block\n\n    /**\n     * @dev Returns the total amount of Pool tokens, including those that are not currently in the Vault ('managed').\n     */\n    function total(bytes32 balance) internal pure returns (uint256) {\n        // Since 'cash' and 'managed' are 112 bit values, we don't need checked arithmetic. Additionally, `toBalance`\n        // ensures that 'total' always fits in 112 bits.\n        return cash(balance) + managed(balance);\n    }\n\n    /**\n     * @dev Returns the amount of Pool tokens currently in the Vault.\n     */\n    function cash(bytes32 balance) internal pure returns (uint256) {\n        uint256 mask = 2**(112) - 1;\n        return uint256(balance) & mask;\n    }\n\n    /**\n     * @dev Returns the amount of Pool tokens that are being managed by an Asset Manager.\n     */\n    function managed(bytes32 balance) internal pure returns (uint256) {\n        uint256 mask = 2**(112) - 1;\n        return uint256(balance >> 112) & mask;\n    }\n\n    /**\n     * @dev Returns the last block when the total balance changed.\n     */\n    function lastChangeBlock(bytes32 balance) internal pure returns (uint256) {\n        uint256 mask = 2**(32) - 1;\n        return uint256(balance >> 224) & mask;\n    }\n\n    /**\n     * @dev Returns the difference in 'managed' between two balances.\n     */\n    function managedDelta(bytes32 newBalance, bytes32 oldBalance) internal pure returns (int256) {\n        // Because `managed` is a 112 bit value, we can safely perform unchecked arithmetic in 256 bits.\n        return int256(managed(newBalance)) - int256(managed(oldBalance));\n    }\n\n    /**\n     * @dev Returns the total balance for each entry in `balances`, as well as the latest block when the total\n     * balance of *any* of them last changed.\n     */\n    function totalsAndLastChangeBlock(bytes32[] memory balances)\n        internal\n        pure\n        returns (\n            uint256[] memory results,\n            uint256 lastChangeBlock_ // Avoid shadowing\n        )\n    {\n        results = new uint256[](balances.length);\n        lastChangeBlock_ = 0;\n\n        for (uint256 i = 0; i < results.length; i++) {\n            bytes32 balance = balances[i];\n            results[i] = total(balance);\n            lastChangeBlock_ = Math.max(lastChangeBlock_, lastChangeBlock(balance));\n        }\n    }\n\n    /**\n     * @dev Returns true if `balance`'s 'total' balance is zero. Costs less gas than computing 'total' and comparing\n     * with zero.\n     */\n    function isZero(bytes32 balance) internal pure returns (bool) {\n        // We simply need to check the least significant 224 bytes of the word: the block does not affect this.\n        uint256 mask = 2**(224) - 1;\n        return (uint256(balance) & mask) == 0;\n    }\n\n    /**\n     * @dev Returns true if `balance`'s 'total' balance is not zero. Costs less gas than computing 'total' and comparing\n     * with zero.\n     */\n    function isNotZero(bytes32 balance) internal pure returns (bool) {\n        return !isZero(balance);\n    }\n\n    /**\n     * @dev Packs together `cash` and `managed` amounts with a block to create a balance value.\n     *\n     * For consistency, this also checks that the sum of `cash` and `managed` (`total`) fits in 112 bits.\n     */\n    function toBalance(\n        uint256 _cash,\n        uint256 _managed,\n        uint256 _blockNumber\n    ) internal pure returns (bytes32) {\n        uint256 _total = _cash + _managed;\n\n        // Since both 'cash' and 'managed' are positive integers, by checking that their sum ('total') fits in 112 bits\n        // we are also indirectly checking that both 'cash' and 'managed' themselves fit in 112 bits.\n        _require(_total >= _cash && _total < 2**112, Errors.BALANCE_TOTAL_OVERFLOW);\n\n        // We assume the block fits in 32 bits - this is expected to hold for at least a few decades.\n        return _pack(_cash, _managed, _blockNumber);\n    }\n\n    /**\n     * @dev Increases a Pool's 'cash' (and therefore its 'total'). Called when Pool tokens are sent to the Vault (except\n     * for Asset Manager deposits).\n     *\n     * Updates the last total balance change block, even if `amount` is zero.\n     */\n    function increaseCash(bytes32 balance, uint256 amount) internal view returns (bytes32) {\n        uint256 newCash = cash(balance).add(amount);\n        uint256 currentManaged = managed(balance);\n        uint256 newLastChangeBlock = block.number;\n\n        return toBalance(newCash, currentManaged, newLastChangeBlock);\n    }\n\n    /**\n     * @dev Decreases a Pool's 'cash' (and therefore its 'total'). Called when Pool tokens are sent from the Vault\n     * (except for Asset Manager withdrawals).\n     *\n     * Updates the last total balance change block, even if `amount` is zero.\n     */\n    function decreaseCash(bytes32 balance, uint256 amount) internal view returns (bytes32) {\n        uint256 newCash = cash(balance).sub(amount);\n        uint256 currentManaged = managed(balance);\n        uint256 newLastChangeBlock = block.number;\n\n        return toBalance(newCash, currentManaged, newLastChangeBlock);\n    }\n\n    /**\n     * @dev Moves 'cash' into 'managed', leaving 'total' unchanged. Called when an Asset Manager withdraws Pool tokens\n     * from the Vault.\n     */\n    function cashToManaged(bytes32 balance, uint256 amount) internal pure returns (bytes32) {\n        uint256 newCash = cash(balance).sub(amount);\n        uint256 newManaged = managed(balance).add(amount);\n        uint256 currentLastChangeBlock = lastChangeBlock(balance);\n\n        return toBalance(newCash, newManaged, currentLastChangeBlock);\n    }\n\n    /**\n     * @dev Moves 'managed' into 'cash', leaving 'total' unchanged. Called when an Asset Manager deposits Pool tokens\n     * into the Vault.\n     */\n    function managedToCash(bytes32 balance, uint256 amount) internal pure returns (bytes32) {\n        uint256 newCash = cash(balance).add(amount);\n        uint256 newManaged = managed(balance).sub(amount);\n        uint256 currentLastChangeBlock = lastChangeBlock(balance);\n\n        return toBalance(newCash, newManaged, currentLastChangeBlock);\n    }\n\n    /**\n     * @dev Sets 'managed' balance to an arbitrary value, changing 'total'. Called when the Asset Manager reports\n     * profits or losses. It's the Manager's responsibility to provide a meaningful value.\n     *\n     * Updates the last total balance change block, even if `newManaged` is equal to the current 'managed' value.\n     */\n    function setManaged(bytes32 balance, uint256 newManaged) internal view returns (bytes32) {\n        uint256 currentCash = cash(balance);\n        uint256 newLastChangeBlock = block.number;\n        return toBalance(currentCash, newManaged, newLastChangeBlock);\n    }\n\n    // Alternative mode for Pools with the Two Token specialization setting\n\n    // Instead of storing cash and external for each 'token in' a single storage slot, Two Token Pools store the cash\n    // for both tokens in the same slot, and the managed for both in another one. This reduces the gas cost for swaps,\n    // because the only slot that needs to be updated is the one with the cash. However, it also means that managing\n    // balances is more cumbersome, as both tokens need to be read/written at the same time.\n    //\n    // The field with both cash balances packed is called sharedCash, and the one with external amounts is called\n    // sharedManaged. These two are collectively called the 'shared' balance fields. In both of these, the portion\n    // that corresponds to token A is stored in the least significant 112 bits of a 256 bit word, while token B's part\n    // uses the next least significant 112 bits.\n    //\n    // Because only cash is written to during a swap, we store the last total balance change block with the\n    // packed cash fields. Typically Pools have a distinct block per token: in the case of Two Token Pools they\n    // are the same.\n\n    /**\n     * @dev Extracts the part of the balance that corresponds to token A. This function can be used to decode both\n     * shared cash and managed balances.\n     */\n    function _decodeBalanceA(bytes32 sharedBalance) private pure returns (uint256) {\n        uint256 mask = 2**(112) - 1;\n        return uint256(sharedBalance) & mask;\n    }\n\n    /**\n     * @dev Extracts the part of the balance that corresponds to token B. This function can be used to decode both\n     * shared cash and managed balances.\n     */\n    function _decodeBalanceB(bytes32 sharedBalance) private pure returns (uint256) {\n        uint256 mask = 2**(112) - 1;\n        return uint256(sharedBalance >> 112) & mask;\n    }\n\n    // To decode the last balance change block, we can simply use the `blockNumber` function.\n\n    /**\n     * @dev Unpacks the shared token A and token B cash and managed balances into the balance for token A.\n     */\n    function fromSharedToBalanceA(bytes32 sharedCash, bytes32 sharedManaged) internal pure returns (bytes32) {\n        // Note that we extract the block from the sharedCash field, which is the one that is updated by swaps.\n        // Both token A and token B use the same block\n        return toBalance(_decodeBalanceA(sharedCash), _decodeBalanceA(sharedManaged), lastChangeBlock(sharedCash));\n    }\n\n    /**\n     * @dev Unpacks the shared token A and token B cash and managed balances into the balance for token B.\n     */\n    function fromSharedToBalanceB(bytes32 sharedCash, bytes32 sharedManaged) internal pure returns (bytes32) {\n        // Note that we extract the block from the sharedCash field, which is the one that is updated by swaps.\n        // Both token A and token B use the same block\n        return toBalance(_decodeBalanceB(sharedCash), _decodeBalanceB(sharedManaged), lastChangeBlock(sharedCash));\n    }\n\n    /**\n     * @dev Returns the sharedCash shared field, given the current balances for token A and token B.\n     */\n    function toSharedCash(bytes32 tokenABalance, bytes32 tokenBBalance) internal pure returns (bytes32) {\n        // Both balances are assigned the same block  Since it is possible a single one of them has changed (for\n        // example, in an Asset Manager update), we keep the latest (largest) one.\n        uint32 newLastChangeBlock = uint32(Math.max(lastChangeBlock(tokenABalance), lastChangeBlock(tokenBBalance)));\n\n        return _pack(cash(tokenABalance), cash(tokenBBalance), newLastChangeBlock);\n    }\n\n    /**\n     * @dev Returns the sharedManaged shared field, given the current balances for token A and token B.\n     */\n    function toSharedManaged(bytes32 tokenABalance, bytes32 tokenBBalance) internal pure returns (bytes32) {\n        // We don't bother storing a last change block, as it is read from the shared cash field.\n        return _pack(managed(tokenABalance), managed(tokenBBalance), 0);\n    }\n\n    // Shared functions\n\n    /**\n     * @dev Packs together two uint112 and one uint32 into a bytes32\n     */\n    function _pack(\n        uint256 _leastSignificant,\n        uint256 _midSignificant,\n        uint256 _mostSignificant\n    ) private pure returns (bytes32) {\n        return bytes32((_mostSignificant << 224) + (_midSignificant << 112) + _leastSignificant);\n    }\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"../solidity-utils/openzeppelin/IERC20.sol\";\n\nimport \"./IVault.sol\";\n\ninterface IPoolSwapStructs {\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\n    // IMinimalSwapInfoPool.\n    //\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\n    //\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\n    //\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\n    // some Pools.\n    //\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\n    // one Pool.\n    //\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\n    //    balance.\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\n    //\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\n    // where the Pool sends the outgoing tokens.\n    //\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\n    struct SwapRequest {\n        IVault.SwapKind kind;\n        IERC20 tokenIn;\n        IERC20 tokenOut;\n        uint256 amount;\n        // Misc data\n        bytes32 poolId;\n        uint256 lastChangeBlock;\n        address from;\n        address to;\n        bytes userData;\n    }\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./IBasePool.sol\";\n\n/**\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\n *\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\n * to the pool in a 'given out' swap.\n *\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\n * indeed the Vault.\n */\ninterface IMinimalSwapInfoPool is IBasePool {\n    function onSwap(\n        SwapRequest memory swapRequest,\n        uint256 currentBalanceTokenIn,\n        uint256 currentBalanceTokenOut\n    ) external returns (uint256 amount);\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./IBasePool.sol\";\n\n/**\n * @dev IPools with the General specialization setting should implement this interface.\n *\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will\n * grant to the pool in a 'given out' swap.\n *\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\n * indeed the Vault.\n */\ninterface IGeneralPool is IBasePool {\n    function onSwap(\n        SwapRequest memory swapRequest,\n        uint256[] memory balances,\n        uint256 indexIn,\n        uint256 indexOut\n    ) external returns (uint256 amount);\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        _require(value >> 255 == 0, Errors.SAFE_CAST_VALUE_CANT_FIT_INT256);\n        return int256(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into an unsigned uint64.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxUint64.\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        _require(value <= type(uint64).max, Errors.SAFE_CAST_VALUE_CANT_FIT_UINT64);\n        return uint64(value);\n    }\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableMap.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\n// Based on the EnumerableMap library from OpenZeppelin Contracts, altered to include the following:\n//  * a map from IERC20 to bytes32\n//  * entries are stored in mappings instead of arrays, reducing implicit storage reads for out-of-bounds checks\n//  * unchecked_at and unchecked_valueAt, which allow for more gas efficient data reads in some scenarios\n//  * indexOf, unchecked_indexOf and unchecked_setAt, which allow for more gas efficient data writes in some scenarios\n//\n// Additionally, the base private functions that work on bytes32 were removed and replaced with a native implementation\n// for IERC20 keys, to reduce bytecode size and runtime costs.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n */\nlibrary EnumerableMap {\n    // The original OpenZeppelin implementation uses a generic Map type with bytes32 keys: this was replaced with\n    // IERC20ToBytes32Map and IERC20ToUint256Map, resulting in more dense bytecode (as long as each contract only uses\n    // one of these - there'll otherwise be duplicated code).\n\n    // IERC20ToBytes32Map\n\n    // solhint-disable func-name-mixedcase\n\n    struct IERC20ToBytes32MapEntry {\n        IERC20 _key;\n        bytes32 _value;\n    }\n\n    struct IERC20ToBytes32Map {\n        // Number of entries in the map\n        uint256 _length;\n        // Storage of map keys and values\n        mapping(uint256 => IERC20ToBytes32MapEntry) _entries;\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping(IERC20 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        IERC20ToBytes32Map storage map,\n        IERC20 key,\n        bytes32 value\n    ) internal returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        // Equivalent to !contains(map, key)\n        if (keyIndex == 0) {\n            uint256 previousLength = map._length;\n            map._entries[previousLength] = IERC20ToBytes32MapEntry({ _key: key, _value: value });\n            map._length = previousLength + 1;\n\n            // The entry is stored at previousLength, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = previousLength + 1;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Updates the value for an entry, given its key's index. The key index can be retrieved via\n     * {unchecked_indexOf}, and it should be noted that key indices may change when calling {set} or {remove}. O(1).\n     *\n     * This function performs one less storage read than {set}, but it should only be used when `index` is known to be\n     * within bounds.\n     */\n    function unchecked_setAt(\n        IERC20ToBytes32Map storage map,\n        uint256 index,\n        bytes32 value\n    ) internal {\n        map._entries[index]._value = value;\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(IERC20ToBytes32Map storage map, IERC20 key) internal returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        // Equivalent to contains(map, key)\n        if (keyIndex != 0) {\n            // To delete a key-value pair from the _entries pseudo-array in O(1), we swap the entry to delete with the\n            // one at the highest index, and then remove this last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the pseudo-array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._length - 1;\n\n            // The swap is only necessary if we're not removing the last element\n            if (toDeleteIndex != lastIndex) {\n                IERC20ToBytes32MapEntry storage lastEntry = map._entries[lastIndex];\n\n                // Move the last entry to the index where the entry to delete is\n                map._entries[toDeleteIndex] = lastEntry;\n                // Update the index for the moved entry\n                map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n            }\n\n            // Delete the slot where the moved entry was stored\n            delete map._entries[lastIndex];\n            map._length = lastIndex;\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(IERC20ToBytes32Map storage map, IERC20 key) internal view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(IERC20ToBytes32Map storage map) internal view returns (uint256) {\n        return map._length;\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(IERC20ToBytes32Map storage map, uint256 index) internal view returns (IERC20, bytes32) {\n        _require(map._length > index, Errors.OUT_OF_BOUNDS);\n        return unchecked_at(map, index);\n    }\n\n    /**\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the map (i.e. if it is equal or larger\n     * than {length}). O(1).\n     *\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\n     * within bounds.\n     */\n    function unchecked_at(IERC20ToBytes32Map storage map, uint256 index) internal view returns (IERC20, bytes32) {\n        IERC20ToBytes32MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Same as {unchecked_At}, except it only returns the value and not the key (performing one less storage\n     * read). O(1).\n     */\n    function unchecked_valueAt(IERC20ToBytes32Map storage map, uint256 index) internal view returns (bytes32) {\n        return map._entries[index]._value;\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map. Reverts with `errorCode` otherwise.\n     */\n    function get(\n        IERC20ToBytes32Map storage map,\n        IERC20 key,\n        uint256 errorCode\n    ) internal view returns (bytes32) {\n        uint256 index = map._indexes[key];\n        _require(index > 0, errorCode);\n        return unchecked_valueAt(map, index - 1);\n    }\n\n    /**\n     * @dev Returns the index for `key`.\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function indexOf(\n        IERC20ToBytes32Map storage map,\n        IERC20 key,\n        uint256 errorCode\n    ) internal view returns (uint256) {\n        uint256 uncheckedIndex = unchecked_indexOf(map, key);\n        _require(uncheckedIndex != 0, errorCode);\n        return uncheckedIndex - 1;\n    }\n\n    /**\n     * @dev Returns the index for `key` **plus one**. Does not revert if the key is not in the map, and returns 0\n     * instead.\n     */\n    function unchecked_indexOf(IERC20ToBytes32Map storage map, IERC20 key) internal view returns (uint256) {\n        return map._indexes[key];\n    }\n\n    // IERC20ToUint256Map\n\n    struct IERC20ToUint256MapEntry {\n        IERC20 _key;\n        uint256 _value;\n    }\n\n    struct IERC20ToUint256Map {\n        // Number of entries in the map\n        uint256 _length;\n        // Storage of map keys and values\n        mapping(uint256 => IERC20ToUint256MapEntry) _entries;\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping(IERC20 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        IERC20ToUint256Map storage map,\n        IERC20 key,\n        uint256 value\n    ) internal returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        // Equivalent to !contains(map, key)\n        if (keyIndex == 0) {\n            uint256 previousLength = map._length;\n            map._entries[previousLength] = IERC20ToUint256MapEntry({ _key: key, _value: value });\n            map._length = previousLength + 1;\n\n            // The entry is stored at previousLength, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = previousLength + 1;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Updates the value for an entry, given its key's index. The key index can be retrieved via\n     * {unchecked_indexOf}, and it should be noted that key indices may change when calling {set} or {remove}. O(1).\n     *\n     * This function performs one less storage read than {set}, but it should only be used when `index` is known to be\n     * within bounds.\n     */\n    function unchecked_setAt(\n        IERC20ToUint256Map storage map,\n        uint256 index,\n        uint256 value\n    ) internal {\n        map._entries[index]._value = value;\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(IERC20ToUint256Map storage map, IERC20 key) internal returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        // Equivalent to contains(map, key)\n        if (keyIndex != 0) {\n            // To delete a key-value pair from the _entries pseudo-array in O(1), we swap the entry to delete with the\n            // one at the highest index, and then remove this last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the pseudo-array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._length - 1;\n\n            // The swap is only necessary if we're not removing the last element\n            if (toDeleteIndex != lastIndex) {\n                IERC20ToUint256MapEntry storage lastEntry = map._entries[lastIndex];\n\n                // Move the last entry to the index where the entry to delete is\n                map._entries[toDeleteIndex] = lastEntry;\n                // Update the index for the moved entry\n                map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n            }\n\n            // Delete the slot where the moved entry was stored\n            delete map._entries[lastIndex];\n            map._length = lastIndex;\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(IERC20ToUint256Map storage map, IERC20 key) internal view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(IERC20ToUint256Map storage map) internal view returns (uint256) {\n        return map._length;\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(IERC20ToUint256Map storage map, uint256 index) internal view returns (IERC20, uint256) {\n        _require(map._length > index, Errors.OUT_OF_BOUNDS);\n        return unchecked_at(map, index);\n    }\n\n    /**\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the map (i.e. if it is equal or larger\n     * than {length}). O(1).\n     *\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\n     * within bounds.\n     */\n    function unchecked_at(IERC20ToUint256Map storage map, uint256 index) internal view returns (IERC20, uint256) {\n        IERC20ToUint256MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Same as {unchecked_At}, except it only returns the value and not the key (performing one less storage\n     * read). O(1).\n     */\n    function unchecked_valueAt(IERC20ToUint256Map storage map, uint256 index) internal view returns (uint256) {\n        return map._entries[index]._value;\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map. Reverts with `errorCode` otherwise.\n     */\n    function get(\n        IERC20ToUint256Map storage map,\n        IERC20 key,\n        uint256 errorCode\n    ) internal view returns (uint256) {\n        uint256 index = map._indexes[key];\n        _require(index > 0, errorCode);\n        return unchecked_valueAt(map, index - 1);\n    }\n\n    /**\n     * @dev Returns the index for `key`.\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function indexOf(\n        IERC20ToUint256Map storage map,\n        IERC20 key,\n        uint256 errorCode\n    ) internal view returns (uint256) {\n        uint256 uncheckedIndex = unchecked_indexOf(map, key);\n        _require(uncheckedIndex != 0, errorCode);\n        return uncheckedIndex - 1;\n    }\n\n    /**\n     * @dev Returns the index for `key` **plus one**. Does not revert if the key is not in the map, and returns 0\n     * instead.\n     */\n    function unchecked_indexOf(IERC20ToUint256Map storage map, IERC20 key) internal view returns (uint256) {\n        return map._indexes[key];\n    }\n}\n"
			},
			"contracts/PoolTokens.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\";\n\nimport \"./AssetManagers.sol\";\nimport \"./PoolRegistry.sol\";\nimport \"./balances/BalanceAllocation.sol\";\n\nabstract contract PoolTokens is ReentrancyGuard, PoolRegistry, AssetManagers {\n    using BalanceAllocation for bytes32;\n    using BalanceAllocation for bytes32[];\n\n    function registerTokens(\n        bytes32 poolId,\n        IERC20[] memory tokens,\n        address[] memory assetManagers\n    ) external override nonReentrant whenNotPaused onlyPool(poolId) {\n        InputHelpers.ensureInputLengthMatch(tokens.length, assetManagers.length);\n\n        // Validates token addresses and assigns Asset Managers\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            IERC20 token = tokens[i];\n            _require(token != IERC20(0), Errors.INVALID_TOKEN);\n\n            _poolAssetManagers[poolId][token] = assetManagers[i];\n        }\n\n        PoolSpecialization specialization = _getPoolSpecialization(poolId);\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\n            _require(tokens.length == 2, Errors.TOKENS_LENGTH_MUST_BE_2);\n            _registerTwoTokenPoolTokens(poolId, tokens[0], tokens[1]);\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\n            _registerMinimalSwapInfoPoolTokens(poolId, tokens);\n        } else {\n            // PoolSpecialization.GENERAL\n            _registerGeneralPoolTokens(poolId, tokens);\n        }\n\n        emit TokensRegistered(poolId, tokens, assetManagers);\n    }\n\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens)\n        external\n        override\n        nonReentrant\n        whenNotPaused\n        onlyPool(poolId)\n    {\n        PoolSpecialization specialization = _getPoolSpecialization(poolId);\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\n            _require(tokens.length == 2, Errors.TOKENS_LENGTH_MUST_BE_2);\n            _deregisterTwoTokenPoolTokens(poolId, tokens[0], tokens[1]);\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\n            _deregisterMinimalSwapInfoPoolTokens(poolId, tokens);\n        } else {\n            // PoolSpecialization.GENERAL\n            _deregisterGeneralPoolTokens(poolId, tokens);\n        }\n\n        // The deregister calls above ensure the total token balance is zero. Therefore it is now safe to remove any\n        // associated Asset Managers, since they hold no Pool balance.\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            delete _poolAssetManagers[poolId][tokens[i]];\n        }\n\n        emit TokensDeregistered(poolId, tokens);\n    }\n\n    function getPoolTokens(bytes32 poolId)\n        external\n        view\n        override\n        withRegisteredPool(poolId)\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 lastChangeBlock\n        )\n    {\n        bytes32[] memory rawBalances;\n        (tokens, rawBalances) = _getPoolTokens(poolId);\n        (balances, lastChangeBlock) = rawBalances.totalsAndLastChangeBlock();\n    }\n\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\n        external\n        view\n        override\n        withRegisteredPool(poolId)\n        returns (\n            uint256 cash,\n            uint256 managed,\n            uint256 lastChangeBlock,\n            address assetManager\n        )\n    {\n        bytes32 balance;\n        PoolSpecialization specialization = _getPoolSpecialization(poolId);\n\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\n            balance = _getTwoTokenPoolBalance(poolId, token);\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\n            balance = _getMinimalSwapInfoPoolBalance(poolId, token);\n        } else {\n            // PoolSpecialization.GENERAL\n            balance = _getGeneralPoolBalance(poolId, token);\n        }\n\n        cash = balance.cash();\n        managed = balance.managed();\n        lastChangeBlock = balance.lastChangeBlock();\n        assetManager = _poolAssetManagers[poolId][token];\n    }\n\n    /**\n     * @dev Returns all of `poolId`'s registered tokens, along with their raw balances.\n     */\n    function _getPoolTokens(bytes32 poolId) internal view returns (IERC20[] memory tokens, bytes32[] memory balances) {\n        PoolSpecialization specialization = _getPoolSpecialization(poolId);\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\n            return _getTwoTokenPoolTokens(poolId);\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\n            return _getMinimalSwapInfoPoolTokens(poolId);\n        } else {\n            // PoolSpecialization.GENERAL\n            return _getGeneralPoolTokens(poolId);\n        }\n    }\n}\n"
			},
			"contracts/UserBalance.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\";\n\nimport \"./AssetTransfersHandler.sol\";\nimport \"./VaultAuthorization.sol\";\n\n/**\n * Implement User Balance interactions, which combine Internal Balance and using the Vault's ERC20 allowance.\n *\n * Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\n * transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\n * when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\n * gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\n *\n * Internal Balance management features batching, which means a single contract call can be used to perform multiple\n * operations of different kinds, with different senders and recipients, at once.\n */\nabstract contract UserBalance is ReentrancyGuard, AssetTransfersHandler, VaultAuthorization {\n    using Math for uint256;\n    using SafeCast for uint256;\n    using SafeERC20 for IERC20;\n\n    // Internal Balance for each token, for each account.\n    mapping(address => mapping(IERC20 => uint256)) private _internalTokenBalance;\n\n    function getInternalBalance(address user, IERC20[] memory tokens)\n        external\n        view\n        override\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            balances[i] = _getInternalBalance(user, tokens[i]);\n        }\n    }\n\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable override nonReentrant {\n        // We need to track how much of the received ETH was used and wrapped into WETH to return any excess.\n        uint256 ethWrapped = 0;\n\n        // Cache for these checks so we only perform them once (if at all).\n        bool checkedCallerIsRelayer = false;\n        bool checkedNotPaused = false;\n\n        for (uint256 i = 0; i < ops.length; i++) {\n            UserBalanceOpKind kind;\n            IAsset asset;\n            uint256 amount;\n            address sender;\n            address payable recipient;\n\n            // This destructuring by calling `_validateUserBalanceOp` seems odd, but results in reduced bytecode size.\n            (kind, asset, amount, sender, recipient, checkedCallerIsRelayer) = _validateUserBalanceOp(\n                ops[i],\n                checkedCallerIsRelayer\n            );\n\n            if (kind == UserBalanceOpKind.WITHDRAW_INTERNAL) {\n                // Internal Balance withdrawals can always be performed by an authorized account.\n                _withdrawFromInternalBalance(asset, sender, recipient, amount);\n            } else {\n                // All other operations are blocked if the contract is paused.\n\n                // We cache the result of the pause check and skip it for other operations in this same transaction\n                // (if any).\n                if (!checkedNotPaused) {\n                    _ensureNotPaused();\n                    checkedNotPaused = true;\n                }\n\n                if (kind == UserBalanceOpKind.DEPOSIT_INTERNAL) {\n                    _depositToInternalBalance(asset, sender, recipient, amount);\n\n                    // Keep track of all ETH wrapped into WETH as part of a deposit.\n                    if (_isETH(asset)) {\n                        ethWrapped = ethWrapped.add(amount);\n                    }\n                } else {\n                    // Transfers don't support ETH.\n                    _require(!_isETH(asset), Errors.CANNOT_USE_ETH_SENTINEL);\n                    IERC20 token = _asIERC20(asset);\n\n                    if (kind == UserBalanceOpKind.TRANSFER_INTERNAL) {\n                        _transferInternalBalance(token, sender, recipient, amount);\n                    } else {\n                        // TRANSFER_EXTERNAL\n                        _transferToExternalBalance(token, sender, recipient, amount);\n                    }\n                }\n            }\n        }\n\n        // Handle any remaining ETH.\n        _handleRemainingEth(ethWrapped);\n    }\n\n    function _depositToInternalBalance(\n        IAsset asset,\n        address sender,\n        address recipient,\n        uint256 amount\n    ) private {\n        _increaseInternalBalance(recipient, _translateToIERC20(asset), amount);\n        _receiveAsset(asset, amount, sender, false);\n    }\n\n    function _withdrawFromInternalBalance(\n        IAsset asset,\n        address sender,\n        address payable recipient,\n        uint256 amount\n    ) private {\n        // A partial decrease of Internal Balance is disallowed: `sender` must have the full `amount`.\n        _decreaseInternalBalance(sender, _translateToIERC20(asset), amount, false);\n        _sendAsset(asset, amount, recipient, false);\n    }\n\n    function _transferInternalBalance(\n        IERC20 token,\n        address sender,\n        address recipient,\n        uint256 amount\n    ) private {\n        // A partial decrease of Internal Balance is disallowed: `sender` must have the full `amount`.\n        _decreaseInternalBalance(sender, token, amount, false);\n        _increaseInternalBalance(recipient, token, amount);\n    }\n\n    function _transferToExternalBalance(\n        IERC20 token,\n        address sender,\n        address recipient,\n        uint256 amount\n    ) private {\n        if (amount > 0) {\n            token.safeTransferFrom(sender, recipient, amount);\n            emit ExternalBalanceTransfer(token, sender, recipient, amount);\n        }\n    }\n\n    /**\n     * @dev Increases `account`'s Internal Balance for `token` by `amount`.\n     */\n    function _increaseInternalBalance(\n        address account,\n        IERC20 token,\n        uint256 amount\n    ) internal override {\n        uint256 currentBalance = _getInternalBalance(account, token);\n        uint256 newBalance = currentBalance.add(amount);\n        _setInternalBalance(account, token, newBalance, amount.toInt256());\n    }\n\n    /**\n     * @dev Decreases `account`'s Internal Balance for `token` by `amount`. If `allowPartial` is true, this function\n     * doesn't revert if `account` doesn't have enough balance, and sets it to zero and returns the deducted amount\n     * instead.\n     */\n    function _decreaseInternalBalance(\n        address account,\n        IERC20 token,\n        uint256 amount,\n        bool allowPartial\n    ) internal override returns (uint256 deducted) {\n        uint256 currentBalance = _getInternalBalance(account, token);\n        _require(allowPartial || (currentBalance >= amount), Errors.INSUFFICIENT_INTERNAL_BALANCE);\n\n        deducted = Math.min(currentBalance, amount);\n        // By construction, `deducted` is lower or equal to `currentBalance`, so we don't need to use checked\n        // arithmetic.\n        uint256 newBalance = currentBalance - deducted;\n        _setInternalBalance(account, token, newBalance, -(deducted.toInt256()));\n    }\n\n    /**\n     * @dev Sets `account`'s Internal Balance for `token` to `newBalance`.\n     *\n     * Emits an `InternalBalanceChanged` event. This event includes `delta`, which is the amount the balance increased\n     * (if positive) or decreased (if negative). To avoid reading the current balance in order to compute the delta,\n     * this function relies on the caller providing it directly.\n     */\n    function _setInternalBalance(\n        address account,\n        IERC20 token,\n        uint256 newBalance,\n        int256 delta\n    ) private {\n        _internalTokenBalance[account][token] = newBalance;\n        emit InternalBalanceChanged(account, token, delta);\n    }\n\n    /**\n     * @dev Returns `account`'s Internal Balance for `token`.\n     */\n    function _getInternalBalance(address account, IERC20 token) internal view returns (uint256) {\n        return _internalTokenBalance[account][token];\n    }\n\n    /**\n     * @dev Destructures a User Balance operation, validating that the contract caller is allowed to perform it.\n     */\n    function _validateUserBalanceOp(UserBalanceOp memory op, bool checkedCallerIsRelayer)\n        private\n        view\n        returns (\n            UserBalanceOpKind,\n            IAsset,\n            uint256,\n            address,\n            address payable,\n            bool\n        )\n    {\n        // The only argument we need to validate is `sender`, which can only be either the contract caller, or a\n        // relayer approved by `sender`.\n        address sender = op.sender;\n\n        if (sender != msg.sender) {\n            // We need to check both that the contract caller is a relayer, and that `sender` approved them.\n\n            // Because the relayer check is global (i.e. independent of `sender`), we cache that result and skip it for\n            // other operations in this same transaction (if any).\n            if (!checkedCallerIsRelayer) {\n                _authenticateCaller();\n                checkedCallerIsRelayer = true;\n            }\n\n            _require(_hasApprovedRelayer(sender, msg.sender), Errors.USER_DOESNT_ALLOW_RELAYER);\n        }\n\n        return (op.kind, op.asset, op.amount, sender, op.recipient, checkedCallerIsRelayer);\n    }\n}\n"
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./IVault.sol\";\nimport \"./IPoolSwapStructs.sol\";\n\n/**\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\n * either IGeneralPool or IMinimalSwapInfoPool\n */\ninterface IBasePool is IPoolSwapStructs {\n    /**\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\n     *\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\n     *\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\n     *\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\n     * balance.\n     *\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\n     *\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\n     * state-changing operations, such as minting pool shares.\n     */\n    function onJoinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\n\n    /**\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\n     * `protocolSwapFeePercentage`.\n     *\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\n     *\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\n     *\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\n     * balance.\n     *\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\n     *\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\n     * state-changing operations, such as burning pool shares.\n     */\n    function onExitPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\n\n    /**\n     * @dev Returns this Pool's ID, used when interacting with the Vault (to e.g. join the Pool or swap with it).\n     */\n    function getPoolId() external view returns (bytes32);\n\n    /**\n     * @dev Returns the current swap fee percentage as a 18 decimal fixed point number, so e.g. 1e17 corresponds to a\n     * 10% swap fee.\n     */\n    function getSwapFeePercentage() external view returns (uint256);\n\n    /**\n     * @dev Returns the scaling factors of each of the Pool's tokens. This is an implementation detail that is typically\n     * not relevant for outside parties, but which might be useful for some types of Pools.\n     */\n    function getScalingFactors() external view returns (uint256[] memory);\n\n    function queryJoin(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn);\n\n    function queryExit(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut);\n}\n"
			},
			"contracts/AssetManagers.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\";\n\nimport \"./UserBalance.sol\";\nimport \"./balances/BalanceAllocation.sol\";\nimport \"./balances/GeneralPoolsBalance.sol\";\nimport \"./balances/MinimalSwapInfoPoolsBalance.sol\";\nimport \"./balances/TwoTokenPoolsBalance.sol\";\n\nabstract contract AssetManagers is\n    ReentrancyGuard,\n    GeneralPoolsBalance,\n    MinimalSwapInfoPoolsBalance,\n    TwoTokenPoolsBalance\n{\n    using Math for uint256;\n    using SafeERC20 for IERC20;\n\n    // Stores the Asset Manager for each token of each Pool.\n    mapping(bytes32 => mapping(IERC20 => address)) internal _poolAssetManagers;\n\n    function managePoolBalance(PoolBalanceOp[] memory ops) external override nonReentrant whenNotPaused {\n        // This variable could be declared inside the loop, but that causes the compiler to allocate memory on each\n        // loop iteration, increasing gas costs.\n        PoolBalanceOp memory op;\n\n        for (uint256 i = 0; i < ops.length; ++i) {\n            // By indexing the array only once, we don't spend extra gas in the same bounds check.\n            op = ops[i];\n\n            bytes32 poolId = op.poolId;\n            _ensureRegisteredPool(poolId);\n\n            IERC20 token = op.token;\n            _require(_isTokenRegistered(poolId, token), Errors.TOKEN_NOT_REGISTERED);\n            _require(_poolAssetManagers[poolId][token] == msg.sender, Errors.SENDER_NOT_ASSET_MANAGER);\n\n            PoolBalanceOpKind kind = op.kind;\n            uint256 amount = op.amount;\n            (int256 cashDelta, int256 managedDelta) = _performPoolManagementOperation(kind, poolId, token, amount);\n\n            emit PoolBalanceManaged(poolId, msg.sender, token, cashDelta, managedDelta);\n        }\n    }\n\n    /**\n     * @dev Performs the `kind` Asset Manager operation on a Pool.\n     *\n     * Withdrawals will transfer `amount` tokens to the caller, deposits will transfer `amount` tokens from the caller,\n     * and updates will set the managed balance to `amount`.\n     *\n     * Returns a tuple with the 'cash' and 'managed' balance deltas as a result of this call.\n     */\n    function _performPoolManagementOperation(\n        PoolBalanceOpKind kind,\n        bytes32 poolId,\n        IERC20 token,\n        uint256 amount\n    ) private returns (int256, int256) {\n        PoolSpecialization specialization = _getPoolSpecialization(poolId);\n\n        if (kind == PoolBalanceOpKind.WITHDRAW) {\n            return _withdrawPoolBalance(poolId, specialization, token, amount);\n        } else if (kind == PoolBalanceOpKind.DEPOSIT) {\n            return _depositPoolBalance(poolId, specialization, token, amount);\n        } else {\n            // PoolBalanceOpKind.UPDATE\n            return _updateManagedBalance(poolId, specialization, token, amount);\n        }\n    }\n\n    /**\n     * @dev Moves `amount` tokens from a Pool's 'cash' to 'managed' balance, and transfers them to the caller.\n     *\n     * Returns the 'cash' and 'managed' balance deltas as a result of this call, which will be complementary.\n     */\n    function _withdrawPoolBalance(\n        bytes32 poolId,\n        PoolSpecialization specialization,\n        IERC20 token,\n        uint256 amount\n    ) private returns (int256 cashDelta, int256 managedDelta) {\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\n            _twoTokenPoolCashToManaged(poolId, token, amount);\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\n            _minimalSwapInfoPoolCashToManaged(poolId, token, amount);\n        } else {\n            // PoolSpecialization.GENERAL\n            _generalPoolCashToManaged(poolId, token, amount);\n        }\n\n        if (amount > 0) {\n            token.safeTransfer(msg.sender, amount);\n        }\n\n        // Since 'cash' and 'managed' are stored as uint112, `amount` is guaranteed to also fit in 112 bits. It will\n        // therefore always fit in a 256 bit integer.\n        cashDelta = int256(-amount);\n        managedDelta = int256(amount);\n    }\n\n    /**\n     * @dev Moves `amount` tokens from a Pool's 'managed' to 'cash' balance, and transfers them from the caller.\n     *\n     * Returns the 'cash' and 'managed' balance deltas as a result of this call, which will be complementary.\n     */\n    function _depositPoolBalance(\n        bytes32 poolId,\n        PoolSpecialization specialization,\n        IERC20 token,\n        uint256 amount\n    ) private returns (int256 cashDelta, int256 managedDelta) {\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\n            _twoTokenPoolManagedToCash(poolId, token, amount);\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\n            _minimalSwapInfoPoolManagedToCash(poolId, token, amount);\n        } else {\n            // PoolSpecialization.GENERAL\n            _generalPoolManagedToCash(poolId, token, amount);\n        }\n\n        if (amount > 0) {\n            token.safeTransferFrom(msg.sender, address(this), amount);\n        }\n\n        // Since 'cash' and 'managed' are stored as uint112, `amount` is guaranteed to also fit in 112 bits. It will\n        // therefore always fit in a 256 bit integer.\n        cashDelta = int256(amount);\n        managedDelta = int256(-amount);\n    }\n\n    /**\n     * @dev Sets a Pool's 'managed' balance to `amount`.\n     *\n     * Returns the 'cash' and 'managed' balance deltas as a result of this call (the 'cash' delta will always be zero).\n     */\n    function _updateManagedBalance(\n        bytes32 poolId,\n        PoolSpecialization specialization,\n        IERC20 token,\n        uint256 amount\n    ) private returns (int256 cashDelta, int256 managedDelta) {\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\n            managedDelta = _setTwoTokenPoolManagedBalance(poolId, token, amount);\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\n            managedDelta = _setMinimalSwapInfoPoolManagedBalance(poolId, token, amount);\n        } else {\n            // PoolSpecialization.GENERAL\n            managedDelta = _setGeneralPoolManagedBalance(poolId, token, amount);\n        }\n\n        cashDelta = 0;\n    }\n\n    /**\n     * @dev Returns true if `token` is registered for `poolId`.\n     */\n    function _isTokenRegistered(bytes32 poolId, IERC20 token) private view returns (bool) {\n        PoolSpecialization specialization = _getPoolSpecialization(poolId);\n        if (specialization == PoolSpecialization.TWO_TOKEN) {\n            return _isTwoTokenPoolTokenRegistered(poolId, token);\n        } else if (specialization == PoolSpecialization.MINIMAL_SWAP_INFO) {\n            return _isMinimalSwapInfoPoolTokenRegistered(poolId, token);\n        } else {\n            // PoolSpecialization.GENERAL\n            return _isGeneralPoolTokenRegistered(poolId, token);\n        }\n    }\n}\n"
			},
			"contracts/PoolRegistry.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\";\n\nimport \"./VaultAuthorization.sol\";\n\n/**\n * @dev Maintains the Pool ID data structure, implements Pool ID creation and registration, and defines useful modifiers\n * and helper functions for ensuring correct behavior when working with Pools.\n */\nabstract contract PoolRegistry is ReentrancyGuard, VaultAuthorization {\n    // Each pool is represented by their unique Pool ID. We use `bytes32` for them, for lack of a way to define new\n    // types.\n    mapping(bytes32 => bool) private _isPoolRegistered;\n\n    // We keep an increasing nonce to make Pool IDs unique. It is interpreted as a `uint80`, but storing it as a\n    // `uint256` results in reduced bytecode on reads and writes due to the lack of masking.\n    uint256 private _nextPoolNonce;\n\n    /**\n     * @dev Reverts unless `poolId` corresponds to a registered Pool.\n     */\n    modifier withRegisteredPool(bytes32 poolId) {\n        _ensureRegisteredPool(poolId);\n        _;\n    }\n\n    /**\n     * @dev Reverts unless `poolId` corresponds to a registered Pool, and the caller is the Pool's contract.\n     */\n    modifier onlyPool(bytes32 poolId) {\n        _ensurePoolIsSender(poolId);\n        _;\n    }\n\n    /**\n     * @dev Reverts unless `poolId` corresponds to a registered Pool.\n     */\n    function _ensureRegisteredPool(bytes32 poolId) internal view {\n        _require(_isPoolRegistered[poolId], Errors.INVALID_POOL_ID);\n    }\n\n    /**\n     * @dev Reverts unless `poolId` corresponds to a registered Pool, and the caller is the Pool's contract.\n     */\n    function _ensurePoolIsSender(bytes32 poolId) private view {\n        _ensureRegisteredPool(poolId);\n        _require(msg.sender == _getPoolAddress(poolId), Errors.CALLER_NOT_POOL);\n    }\n\n    function registerPool(PoolSpecialization specialization)\n        external\n        override\n        nonReentrant\n        whenNotPaused\n        returns (bytes32)\n    {\n        // Each Pool is assigned a unique ID based on an incrementing nonce. This assumes there will never be more than\n        // 2**80 Pools, and the nonce will not overflow.\n\n        bytes32 poolId = _toPoolId(msg.sender, specialization, uint80(_nextPoolNonce));\n\n        _require(!_isPoolRegistered[poolId], Errors.INVALID_POOL_ID); // Should never happen as Pool IDs are unique.\n        _isPoolRegistered[poolId] = true;\n\n        _nextPoolNonce += 1;\n\n        // Note that msg.sender is the pool's contract\n        emit PoolRegistered(poolId, msg.sender, specialization);\n        return poolId;\n    }\n\n    function getPool(bytes32 poolId)\n        external\n        view\n        override\n        withRegisteredPool(poolId)\n        returns (address, PoolSpecialization)\n    {\n        return (_getPoolAddress(poolId), _getPoolSpecialization(poolId));\n    }\n\n    /**\n     * @dev Creates a Pool ID.\n     *\n     * These are deterministically created by packing the Pool's contract address and its specialization setting into\n     * the ID. This saves gas by making this data easily retrievable from a Pool ID with no storage accesses.\n     *\n     * Since a single contract can register multiple Pools, a unique nonce must be provided to ensure Pool IDs are\n     * unique.\n     *\n     * Pool IDs have the following layout:\n     * | 20 bytes pool contract address | 2 bytes specialization setting | 10 bytes nonce |\n     * MSB                                                                              LSB\n     *\n     * 2 bytes for the specialization setting is a bit overkill: there only three of them, which means two bits would\n     * suffice. However, there's nothing else of interest to store in this extra space.\n     */\n    function _toPoolId(\n        address pool,\n        PoolSpecialization specialization,\n        uint80 nonce\n    ) internal pure returns (bytes32) {\n        bytes32 serialized;\n\n        serialized |= bytes32(uint256(nonce));\n        serialized |= bytes32(uint256(specialization)) << (10 * 8);\n        serialized |= bytes32(uint256(pool)) << (12 * 8);\n\n        return serialized;\n    }\n\n    /**\n     * @dev Returns the address of a Pool's contract.\n     *\n     * Due to how Pool IDs are created, this is done with no storage accesses and costs little gas.\n     */\n    function _getPoolAddress(bytes32 poolId) internal pure returns (address) {\n        // 12 byte logical shift left to remove the nonce and specialization setting. We don't need to mask,\n        // since the logical shift already sets the upper bits to zero.\n        return address(uint256(poolId) >> (12 * 8));\n    }\n\n    /**\n     * @dev Returns the specialization setting of a Pool.\n     *\n     * Due to how Pool IDs are created, this is done with no storage accesses and costs little gas.\n     */\n    function _getPoolSpecialization(bytes32 poolId) internal pure returns (PoolSpecialization specialization) {\n        // 10 byte logical shift left to remove the nonce, followed by a 2 byte mask to remove the address.\n        uint256 value = uint256(poolId >> (10 * 8)) & (2**(2 * 8) - 1);\n\n        // Casting a value into an enum results in a runtime check that reverts unless the value is within the enum's\n        // range. Passing an invalid Pool ID to this function would then result in an obscure revert with no reason\n        // string: we instead perform the check ourselves to help in error diagnosis.\n\n        // There are three Pool specialization settings: general, minimal swap info and two tokens, which correspond to\n        // values 0, 1 and 2.\n        _require(value < 3, Errors.INVALID_POOL_ID);\n\n        // Because we have checked that `value` is within the enum range, we can use assembly to skip the runtime check.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            specialization := value\n        }\n    }\n}\n"
			},
			"contracts/balances/GeneralPoolsBalance.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableMap.sol\";\n\nimport \"./BalanceAllocation.sol\";\n\nabstract contract GeneralPoolsBalance {\n    using BalanceAllocation for bytes32;\n    using EnumerableMap for EnumerableMap.IERC20ToBytes32Map;\n\n    // Data for Pools with the General specialization setting\n    //\n    // These Pools use the IGeneralPool interface, which means the Vault must query the balance for *all* of their\n    // tokens in every swap. If we kept a mapping of token to balance plus a set (array) of tokens, it'd be very gas\n    // intensive to read all token addresses just to then do a lookup on the balance mapping.\n    //\n    // Instead, we use our customized EnumerableMap, which lets us read the N balances in N+1 storage accesses (one for\n    // each token in the Pool), access the index of any 'token in' a single read (required for the IGeneralPool call),\n    // and update an entry's value given its index.\n\n    // Map of token -> balance pairs for each Pool with this specialization. Many functions rely on storage pointers to\n    // a Pool's EnumerableMap to save gas when computing storage slots.\n    mapping(bytes32 => EnumerableMap.IERC20ToBytes32Map) internal _generalPoolsBalances;\n\n    /**\n     * @dev Registers a list of tokens in a General Pool.\n     *\n     * This function assumes `poolId` exists and corresponds to the General specialization setting.\n     *\n     * Requirements:\n     *\n     * - `tokens` must not be registered in the Pool\n     * - `tokens` must not contain duplicates\n     */\n    function _registerGeneralPoolTokens(bytes32 poolId, IERC20[] memory tokens) internal {\n        EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];\n\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            // EnumerableMaps require an explicit initial value when creating a key-value pair: we use zero, the same\n            // value that is found in uninitialized storage, which corresponds to an empty balance.\n            bool added = poolBalances.set(tokens[i], 0);\n            _require(added, Errors.TOKEN_ALREADY_REGISTERED);\n        }\n    }\n\n    /**\n     * @dev Deregisters a list of tokens in a General Pool.\n     *\n     * This function assumes `poolId` exists and corresponds to the General specialization setting.\n     *\n     * Requirements:\n     *\n     * - `tokens` must be registered in the Pool\n     * - `tokens` must have zero balance in the Vault\n     * - `tokens` must not contain duplicates\n     */\n    function _deregisterGeneralPoolTokens(bytes32 poolId, IERC20[] memory tokens) internal {\n        EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];\n\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            IERC20 token = tokens[i];\n            bytes32 currentBalance = _getGeneralPoolBalance(poolBalances, token);\n            _require(currentBalance.isZero(), Errors.NONZERO_TOKEN_BALANCE);\n\n            // We don't need to check remove's return value, since _getGeneralPoolBalance already checks that the token\n            // was registered.\n            poolBalances.remove(token);\n        }\n    }\n\n    /**\n     * @dev Sets the balances of a General Pool's tokens to `balances`.\n     *\n     * WARNING: this assumes `balances` has the same length and order as the Pool's tokens.\n     */\n    function _setGeneralPoolBalances(bytes32 poolId, bytes32[] memory balances) internal {\n        EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];\n\n        for (uint256 i = 0; i < balances.length; ++i) {\n            // Since we assume all balances are properly ordered, we can simply use `unchecked_setAt` to avoid one less\n            // storage read per token.\n            poolBalances.unchecked_setAt(i, balances[i]);\n        }\n    }\n\n    /**\n     * @dev Transforms `amount` of `token`'s balance in a General Pool from cash into managed.\n     *\n     * This function assumes `poolId` exists, corresponds to the General specialization setting, and that `token` is\n     * registered for that Pool.\n     */\n    function _generalPoolCashToManaged(\n        bytes32 poolId,\n        IERC20 token,\n        uint256 amount\n    ) internal {\n        _updateGeneralPoolBalance(poolId, token, BalanceAllocation.cashToManaged, amount);\n    }\n\n    /**\n     * @dev Transforms `amount` of `token`'s balance in a General Pool from managed into cash.\n     *\n     * This function assumes `poolId` exists, corresponds to the General specialization setting, and that `token` is\n     * registered for that Pool.\n     */\n    function _generalPoolManagedToCash(\n        bytes32 poolId,\n        IERC20 token,\n        uint256 amount\n    ) internal {\n        _updateGeneralPoolBalance(poolId, token, BalanceAllocation.managedToCash, amount);\n    }\n\n    /**\n     * @dev Sets `token`'s managed balance in a General Pool to `amount`.\n     *\n     * This function assumes `poolId` exists, corresponds to the General specialization setting, and that `token` is\n     * registered for that Pool.\n     *\n     * Returns the managed balance delta as a result of this call.\n     */\n    function _setGeneralPoolManagedBalance(\n        bytes32 poolId,\n        IERC20 token,\n        uint256 amount\n    ) internal returns (int256) {\n        return _updateGeneralPoolBalance(poolId, token, BalanceAllocation.setManaged, amount);\n    }\n\n    /**\n     * @dev Sets `token`'s balance in a General Pool to the result of the `mutation` function when called with the\n     * current balance and `amount`.\n     *\n     * This function assumes `poolId` exists, corresponds to the General specialization setting, and that `token` is\n     * registered for that Pool.\n     *\n     * Returns the managed balance delta as a result of this call.\n     */\n    function _updateGeneralPoolBalance(\n        bytes32 poolId,\n        IERC20 token,\n        function(bytes32, uint256) returns (bytes32) mutation,\n        uint256 amount\n    ) private returns (int256) {\n        EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];\n        bytes32 currentBalance = _getGeneralPoolBalance(poolBalances, token);\n\n        bytes32 newBalance = mutation(currentBalance, amount);\n        poolBalances.set(token, newBalance);\n\n        return newBalance.managedDelta(currentBalance);\n    }\n\n    /**\n     * @dev Returns an array with all the tokens and balances in a General Pool. The order may change when tokens are\n     * registered or deregistered.\n     *\n     * This function assumes `poolId` exists and corresponds to the General specialization setting.\n     */\n    function _getGeneralPoolTokens(bytes32 poolId)\n        internal\n        view\n        returns (IERC20[] memory tokens, bytes32[] memory balances)\n    {\n        EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];\n        tokens = new IERC20[](poolBalances.length());\n        balances = new bytes32[](tokens.length);\n\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            // Because the iteration is bounded by `tokens.length`, which matches the EnumerableMap's length, we can use\n            // `unchecked_at` as we know `i` is a valid token index, saving storage reads.\n            (tokens[i], balances[i]) = poolBalances.unchecked_at(i);\n        }\n    }\n\n    /**\n     * @dev Returns the balance of a token in a General Pool.\n     *\n     * This function assumes `poolId` exists and corresponds to the General specialization setting.\n     *\n     * Requirements:\n     *\n     * - `token` must be registered in the Pool\n     */\n    function _getGeneralPoolBalance(bytes32 poolId, IERC20 token) internal view returns (bytes32) {\n        EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];\n        return _getGeneralPoolBalance(poolBalances, token);\n    }\n\n    /**\n     * @dev Same as `_getGeneralPoolBalance` but using a Pool's storage pointer, which saves gas in repeated reads and\n     * writes.\n     */\n    function _getGeneralPoolBalance(EnumerableMap.IERC20ToBytes32Map storage poolBalances, IERC20 token)\n        private\n        view\n        returns (bytes32)\n    {\n        return poolBalances.get(token, Errors.TOKEN_NOT_REGISTERED);\n    }\n\n    /**\n     * @dev Returns true if `token` is registered in a General Pool.\n     *\n     * This function assumes `poolId` exists and corresponds to the General specialization setting.\n     */\n    function _isGeneralPoolTokenRegistered(bytes32 poolId, IERC20 token) internal view returns (bool) {\n        EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];\n        return poolBalances.contains(token);\n    }\n}\n"
			},
			"contracts/balances/MinimalSwapInfoPoolsBalance.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol\";\n\nimport \"./BalanceAllocation.sol\";\nimport \"../PoolRegistry.sol\";\n\nabstract contract MinimalSwapInfoPoolsBalance is PoolRegistry {\n    using BalanceAllocation for bytes32;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // Data for Pools with the Minimal Swap Info specialization setting\n    //\n    // These Pools use the IMinimalSwapInfoPool interface, and so the Vault must read the balance of the two tokens\n    // in the swap. The best solution is to use a mapping from token to balance, which lets us read or write any token's\n    // balance in a single storage access.\n    //\n    // We also keep a set of registered tokens. Because tokens with non-zero balance are by definition registered, in\n    // some balance getters we skip checking for token registration if a non-zero balance is found, saving gas by\n    // performing a single read instead of two.\n\n    mapping(bytes32 => mapping(IERC20 => bytes32)) internal _minimalSwapInfoPoolsBalances;\n    mapping(bytes32 => EnumerableSet.AddressSet) internal _minimalSwapInfoPoolsTokens;\n\n    /**\n     * @dev Registers a list of tokens in a Minimal Swap Info Pool.\n     *\n     * This function assumes `poolId` exists and corresponds to the Minimal Swap Info specialization setting.\n     *\n     * Requirements:\n     *\n     * - `tokens` must not be registered in the Pool\n     * - `tokens` must not contain duplicates\n     */\n    function _registerMinimalSwapInfoPoolTokens(bytes32 poolId, IERC20[] memory tokens) internal {\n        EnumerableSet.AddressSet storage poolTokens = _minimalSwapInfoPoolsTokens[poolId];\n\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            bool added = poolTokens.add(address(tokens[i]));\n            _require(added, Errors.TOKEN_ALREADY_REGISTERED);\n            // Note that we don't initialize the balance mapping: the default value of zero corresponds to an empty\n            // balance.\n        }\n    }\n\n    /**\n     * @dev Deregisters a list of tokens in a Minimal Swap Info Pool.\n     *\n     * This function assumes `poolId` exists and corresponds to the Minimal Swap Info specialization setting.\n     *\n     * Requirements:\n     *\n     * - `tokens` must be registered in the Pool\n     * - `tokens` must have zero balance in the Vault\n     * - `tokens` must not contain duplicates\n     */\n    function _deregisterMinimalSwapInfoPoolTokens(bytes32 poolId, IERC20[] memory tokens) internal {\n        EnumerableSet.AddressSet storage poolTokens = _minimalSwapInfoPoolsTokens[poolId];\n\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            IERC20 token = tokens[i];\n            _require(_minimalSwapInfoPoolsBalances[poolId][token].isZero(), Errors.NONZERO_TOKEN_BALANCE);\n\n            // For consistency with other Pool specialization settings, we explicitly reset the balance (which may have\n            // a non-zero last change block).\n            delete _minimalSwapInfoPoolsBalances[poolId][token];\n\n            bool removed = poolTokens.remove(address(token));\n            _require(removed, Errors.TOKEN_NOT_REGISTERED);\n        }\n    }\n\n    /**\n     * @dev Sets the balances of a Minimal Swap Info Pool's tokens to `balances`.\n     *\n     * WARNING: this assumes `balances` has the same length and order as the Pool's tokens.\n     */\n    function _setMinimalSwapInfoPoolBalances(\n        bytes32 poolId,\n        IERC20[] memory tokens,\n        bytes32[] memory balances\n    ) internal {\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            _minimalSwapInfoPoolsBalances[poolId][tokens[i]] = balances[i];\n        }\n    }\n\n    /**\n     * @dev Transforms `amount` of `token`'s balance in a Minimal Swap Info Pool from cash into managed.\n     *\n     * This function assumes `poolId` exists, corresponds to the Minimal Swap Info specialization setting, and that\n     * `token` is registered for that Pool.\n     */\n    function _minimalSwapInfoPoolCashToManaged(\n        bytes32 poolId,\n        IERC20 token,\n        uint256 amount\n    ) internal {\n        _updateMinimalSwapInfoPoolBalance(poolId, token, BalanceAllocation.cashToManaged, amount);\n    }\n\n    /**\n     * @dev Transforms `amount` of `token`'s balance in a Minimal Swap Info Pool from managed into cash.\n     *\n     * This function assumes `poolId` exists, corresponds to the Minimal Swap Info specialization setting, and that\n     * `token` is registered for that Pool.\n     */\n    function _minimalSwapInfoPoolManagedToCash(\n        bytes32 poolId,\n        IERC20 token,\n        uint256 amount\n    ) internal {\n        _updateMinimalSwapInfoPoolBalance(poolId, token, BalanceAllocation.managedToCash, amount);\n    }\n\n    /**\n     * @dev Sets `token`'s managed balance in a Minimal Swap Info Pool to `amount`.\n     *\n     * This function assumes `poolId` exists, corresponds to the Minimal Swap Info specialization setting, and that\n     * `token` is registered for that Pool.\n     *\n     * Returns the managed balance delta as a result of this call.\n     */\n    function _setMinimalSwapInfoPoolManagedBalance(\n        bytes32 poolId,\n        IERC20 token,\n        uint256 amount\n    ) internal returns (int256) {\n        return _updateMinimalSwapInfoPoolBalance(poolId, token, BalanceAllocation.setManaged, amount);\n    }\n\n    /**\n     * @dev Sets `token`'s balance in a Minimal Swap Info Pool to the result of the `mutation` function when called with\n     * the current balance and `amount`.\n     *\n     * This function assumes `poolId` exists, corresponds to the Minimal Swap Info specialization setting, and that\n     * `token` is registered for that Pool.\n     *\n     * Returns the managed balance delta as a result of this call.\n     */\n    function _updateMinimalSwapInfoPoolBalance(\n        bytes32 poolId,\n        IERC20 token,\n        function(bytes32, uint256) returns (bytes32) mutation,\n        uint256 amount\n    ) internal returns (int256) {\n        bytes32 currentBalance = _getMinimalSwapInfoPoolBalance(poolId, token);\n\n        bytes32 newBalance = mutation(currentBalance, amount);\n        _minimalSwapInfoPoolsBalances[poolId][token] = newBalance;\n\n        return newBalance.managedDelta(currentBalance);\n    }\n\n    /**\n     * @dev Returns an array with all the tokens and balances in a Minimal Swap Info Pool. The order may change when\n     * tokens are registered or deregistered.\n     *\n     * This function assumes `poolId` exists and corresponds to the Minimal Swap Info specialization setting.\n     */\n    function _getMinimalSwapInfoPoolTokens(bytes32 poolId)\n        internal\n        view\n        returns (IERC20[] memory tokens, bytes32[] memory balances)\n    {\n        EnumerableSet.AddressSet storage poolTokens = _minimalSwapInfoPoolsTokens[poolId];\n        tokens = new IERC20[](poolTokens.length());\n        balances = new bytes32[](tokens.length);\n\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            // Because the iteration is bounded by `tokens.length`, which matches the EnumerableSet's length, we can use\n            // `unchecked_at` as we know `i` is a valid token index, saving storage reads.\n            IERC20 token = IERC20(poolTokens.unchecked_at(i));\n            tokens[i] = token;\n            balances[i] = _minimalSwapInfoPoolsBalances[poolId][token];\n        }\n    }\n\n    /**\n     * @dev Returns the balance of a token in a Minimal Swap Info Pool.\n     *\n     * Requirements:\n     *\n     * - `poolId` must be a Minimal Swap Info Pool\n     * - `token` must be registered in the Pool\n     */\n    function _getMinimalSwapInfoPoolBalance(bytes32 poolId, IERC20 token) internal view returns (bytes32) {\n        bytes32 balance = _minimalSwapInfoPoolsBalances[poolId][token];\n\n        // A non-zero balance guarantees that the token is registered. If zero, we manually check if the token is\n        // registered in the Pool. Token registration implies that the Pool is registered as well, which lets us save\n        // gas by not performing the check.\n        bool tokenRegistered = balance.isNotZero() || _minimalSwapInfoPoolsTokens[poolId].contains(address(token));\n\n        if (!tokenRegistered) {\n            // The token might not be registered because the Pool itself is not registered. We check this to provide a\n            // more accurate revert reason.\n            _ensureRegisteredPool(poolId);\n            _revert(Errors.TOKEN_NOT_REGISTERED);\n        }\n\n        return balance;\n    }\n\n    /**\n     * @dev Returns true if `token` is registered in a Minimal Swap Info Pool.\n     *\n     * This function assumes `poolId` exists and corresponds to the Minimal Swap Info specialization setting.\n     */\n    function _isMinimalSwapInfoPoolTokenRegistered(bytes32 poolId, IERC20 token) internal view returns (bool) {\n        EnumerableSet.AddressSet storage poolTokens = _minimalSwapInfoPoolsTokens[poolId];\n        return poolTokens.contains(address(token));\n    }\n}\n"
			},
			"contracts/balances/TwoTokenPoolsBalance.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\n\nimport \"./BalanceAllocation.sol\";\nimport \"../PoolRegistry.sol\";\n\nabstract contract TwoTokenPoolsBalance is PoolRegistry {\n    using BalanceAllocation for bytes32;\n\n    // Data for Pools with the Two Token specialization setting\n    //\n    // These are similar to the Minimal Swap Info Pool case (because the Pool only has two tokens, and therefore there\n    // are only two balances to read), but there's a key difference in how data is stored. Keeping a set makes little\n    // sense, as it will only ever hold two tokens, so we can just store those two directly.\n    //\n    // The gas savings associated with using these Pools come from how token balances are stored: cash amounts for token\n    // A and token B are packed together, as are managed amounts. Because only cash changes in a swap, there's no need\n    // to write to this second storage slot. A single last change block number for both tokens is stored with the packed\n    // cash fields.\n\n    struct TwoTokenPoolBalances {\n        bytes32 sharedCash;\n        bytes32 sharedManaged;\n    }\n\n    // We could just keep a mapping from Pool ID to TwoTokenSharedBalances, but there's an issue: we wouldn't know to\n    // which tokens those balances correspond. This would mean having to also check which are registered with the Pool.\n    //\n    // What we do instead to save those storage reads is keep a nested mapping from the token pair hash to the balances\n    // struct. The Pool only has two tokens, so only a single entry of this mapping is set (the one that corresponds to\n    // that pair's hash).\n    //\n    // This has the trade-off of making Vault code that interacts with these Pools cumbersome: both balances must be\n    // accessed at the same time by using both token addresses, and some logic is needed to determine how the pair hash\n    // is computed. We do this by sorting the tokens, calling the token with the lowest numerical address value token A,\n    // and the other one token B. In functions where the token arguments could be either A or B, we use X and Y instead.\n    //\n    // If users query a token pair containing an unregistered token, the Pool will generate a hash for a mapping entry\n    // that was not set, and return zero balances. Non-zero balances are only possible if both tokens in the pair\n    // are registered with the Pool, which means we don't have to check the TwoTokenPoolTokens struct, and can save\n    // storage reads.\n\n    struct TwoTokenPoolTokens {\n        IERC20 tokenA;\n        IERC20 tokenB;\n        mapping(bytes32 => TwoTokenPoolBalances) balances;\n    }\n\n    mapping(bytes32 => TwoTokenPoolTokens) private _twoTokenPoolTokens;\n\n    /**\n     * @dev Registers tokens in a Two Token Pool.\n     *\n     * This function assumes `poolId` exists and corresponds to the Two Token specialization setting.\n     *\n     * Requirements:\n     *\n     * - `tokenX` and `tokenY` must not be the same\n     * - The tokens must be ordered: tokenX < tokenY\n     */\n    function _registerTwoTokenPoolTokens(\n        bytes32 poolId,\n        IERC20 tokenX,\n        IERC20 tokenY\n    ) internal {\n        // Not technically true since we didn't register yet, but this is consistent with the error messages of other\n        // specialization settings.\n        _require(tokenX != tokenY, Errors.TOKEN_ALREADY_REGISTERED);\n\n        _require(tokenX < tokenY, Errors.UNSORTED_TOKENS);\n\n        // A Two Token Pool with no registered tokens is identified by having zero addresses for tokens A and B.\n        TwoTokenPoolTokens storage poolTokens = _twoTokenPoolTokens[poolId];\n        _require(poolTokens.tokenA == IERC20(0) && poolTokens.tokenB == IERC20(0), Errors.TOKENS_ALREADY_SET);\n\n        // Since tokenX < tokenY, tokenX is A and tokenY is B\n        poolTokens.tokenA = tokenX;\n        poolTokens.tokenB = tokenY;\n\n        // Note that we don't initialize the balance mapping: the default value of zero corresponds to an empty\n        // balance.\n    }\n\n    /**\n     * @dev Deregisters tokens in a Two Token Pool.\n     *\n     * This function assumes `poolId` exists and corresponds to the Two Token specialization setting.\n     *\n     * Requirements:\n     *\n     * - `tokenX` and `tokenY` must be registered in the Pool\n     * - both tokens must have zero balance in the Vault\n     */\n    function _deregisterTwoTokenPoolTokens(\n        bytes32 poolId,\n        IERC20 tokenX,\n        IERC20 tokenY\n    ) internal {\n        (\n            bytes32 balanceA,\n            bytes32 balanceB,\n            TwoTokenPoolBalances storage poolBalances\n        ) = _getTwoTokenPoolSharedBalances(poolId, tokenX, tokenY);\n\n        _require(balanceA.isZero() && balanceB.isZero(), Errors.NONZERO_TOKEN_BALANCE);\n\n        delete _twoTokenPoolTokens[poolId];\n\n        // For consistency with other Pool specialization settings, we explicitly reset the packed cash field (which may\n        // have a non-zero last change block).\n        delete poolBalances.sharedCash;\n    }\n\n    /**\n     * @dev Sets the cash balances of a Two Token Pool's tokens.\n     *\n     * WARNING: this assumes `tokenA` and `tokenB` are the Pool's two registered tokens, and are in the correct order.\n     */\n    function _setTwoTokenPoolCashBalances(\n        bytes32 poolId,\n        IERC20 tokenA,\n        bytes32 balanceA,\n        IERC20 tokenB,\n        bytes32 balanceB\n    ) internal {\n        bytes32 pairHash = _getTwoTokenPairHash(tokenA, tokenB);\n        TwoTokenPoolBalances storage poolBalances = _twoTokenPoolTokens[poolId].balances[pairHash];\n        poolBalances.sharedCash = BalanceAllocation.toSharedCash(balanceA, balanceB);\n    }\n\n    /**\n     * @dev Transforms `amount` of `token`'s balance in a Two Token Pool from cash into managed.\n     *\n     * This function assumes `poolId` exists, corresponds to the Two Token specialization setting, and that `token` is\n     * registered for that Pool.\n     */\n    function _twoTokenPoolCashToManaged(\n        bytes32 poolId,\n        IERC20 token,\n        uint256 amount\n    ) internal {\n        _updateTwoTokenPoolSharedBalance(poolId, token, BalanceAllocation.cashToManaged, amount);\n    }\n\n    /**\n     * @dev Transforms `amount` of `token`'s balance in a Two Token Pool from managed into cash.\n     *\n     * This function assumes `poolId` exists, corresponds to the Two Token specialization setting, and that `token` is\n     * registered for that Pool.\n     */\n    function _twoTokenPoolManagedToCash(\n        bytes32 poolId,\n        IERC20 token,\n        uint256 amount\n    ) internal {\n        _updateTwoTokenPoolSharedBalance(poolId, token, BalanceAllocation.managedToCash, amount);\n    }\n\n    /**\n     * @dev Sets `token`'s managed balance in a Two Token Pool to `amount`.\n     *\n     * This function assumes `poolId` exists, corresponds to the Two Token specialization setting, and that `token` is\n     * registered for that Pool.\n     *\n     * Returns the managed balance delta as a result of this call.\n     */\n    function _setTwoTokenPoolManagedBalance(\n        bytes32 poolId,\n        IERC20 token,\n        uint256 amount\n    ) internal returns (int256) {\n        return _updateTwoTokenPoolSharedBalance(poolId, token, BalanceAllocation.setManaged, amount);\n    }\n\n    /**\n     * @dev Sets `token`'s balance in a Two Token Pool to the result of the `mutation` function when called with\n     * the current balance and `amount`.\n     *\n     * This function assumes `poolId` exists, corresponds to the Two Token specialization setting, and that `token` is\n     * registered for that Pool.\n     *\n     * Returns the managed balance delta as a result of this call.\n     */\n    function _updateTwoTokenPoolSharedBalance(\n        bytes32 poolId,\n        IERC20 token,\n        function(bytes32, uint256) returns (bytes32) mutation,\n        uint256 amount\n    ) private returns (int256) {\n        (\n            TwoTokenPoolBalances storage balances,\n            IERC20 tokenA,\n            bytes32 balanceA,\n            ,\n            bytes32 balanceB\n        ) = _getTwoTokenPoolBalances(poolId);\n\n        int256 delta;\n        if (token == tokenA) {\n            bytes32 newBalance = mutation(balanceA, amount);\n            delta = newBalance.managedDelta(balanceA);\n            balanceA = newBalance;\n        } else {\n            // token == tokenB\n            bytes32 newBalance = mutation(balanceB, amount);\n            delta = newBalance.managedDelta(balanceB);\n            balanceB = newBalance;\n        }\n\n        balances.sharedCash = BalanceAllocation.toSharedCash(balanceA, balanceB);\n        balances.sharedManaged = BalanceAllocation.toSharedManaged(balanceA, balanceB);\n\n        return delta;\n    }\n\n    /*\n     * @dev Returns an array with all the tokens and balances in a Two Token Pool. The order may change when\n     * tokens are registered or deregistered.\n     *\n     * This function assumes `poolId` exists and corresponds to the Two Token specialization setting.\n     */\n    function _getTwoTokenPoolTokens(bytes32 poolId)\n        internal\n        view\n        returns (IERC20[] memory tokens, bytes32[] memory balances)\n    {\n        (, IERC20 tokenA, bytes32 balanceA, IERC20 tokenB, bytes32 balanceB) = _getTwoTokenPoolBalances(poolId);\n\n        // Both tokens will either be zero (if unregistered) or non-zero (if registered), but we keep the full check for\n        // clarity.\n        if (tokenA == IERC20(0) || tokenB == IERC20(0)) {\n            return (new IERC20[](0), new bytes32[](0));\n        }\n\n        // Note that functions relying on this getter expect tokens to be properly ordered, so we use the (A, B)\n        // ordering.\n\n        tokens = new IERC20[](2);\n        tokens[0] = tokenA;\n        tokens[1] = tokenB;\n\n        balances = new bytes32[](2);\n        balances[0] = balanceA;\n        balances[1] = balanceB;\n    }\n\n    /**\n     * @dev Same as `_getTwoTokenPoolTokens`, except it returns the two tokens and balances directly instead of using\n     * an array, as well as a storage pointer to the `TwoTokenPoolBalances` struct, which can be used to update it\n     * without having to recompute the pair hash and storage slot.\n     */\n    function _getTwoTokenPoolBalances(bytes32 poolId)\n        private\n        view\n        returns (\n            TwoTokenPoolBalances storage poolBalances,\n            IERC20 tokenA,\n            bytes32 balanceA,\n            IERC20 tokenB,\n            bytes32 balanceB\n        )\n    {\n        TwoTokenPoolTokens storage poolTokens = _twoTokenPoolTokens[poolId];\n        tokenA = poolTokens.tokenA;\n        tokenB = poolTokens.tokenB;\n\n        bytes32 pairHash = _getTwoTokenPairHash(tokenA, tokenB);\n        poolBalances = poolTokens.balances[pairHash];\n\n        bytes32 sharedCash = poolBalances.sharedCash;\n        bytes32 sharedManaged = poolBalances.sharedManaged;\n\n        balanceA = BalanceAllocation.fromSharedToBalanceA(sharedCash, sharedManaged);\n        balanceB = BalanceAllocation.fromSharedToBalanceB(sharedCash, sharedManaged);\n    }\n\n    /**\n     * @dev Returns the balance of a token in a Two Token Pool.\n     *\n     * This function assumes `poolId` exists and corresponds to the General specialization setting.\n     *\n     * This function is convenient but not particularly gas efficient, and should be avoided during gas-sensitive\n     * operations, such as swaps. For those, _getTwoTokenPoolSharedBalances provides a more flexible interface.\n     *\n     * Requirements:\n     *\n     * - `token` must be registered in the Pool\n     */\n    function _getTwoTokenPoolBalance(bytes32 poolId, IERC20 token) internal view returns (bytes32) {\n        // We can't just read the balance of token, because we need to know the full pair in order to compute the pair\n        // hash and access the balance mapping. We therefore rely on `_getTwoTokenPoolBalances`.\n        (, IERC20 tokenA, bytes32 balanceA, IERC20 tokenB, bytes32 balanceB) = _getTwoTokenPoolBalances(poolId);\n\n        if (token == tokenA) {\n            return balanceA;\n        } else if (token == tokenB) {\n            return balanceB;\n        } else {\n            _revert(Errors.TOKEN_NOT_REGISTERED);\n        }\n    }\n\n    /**\n     * @dev Returns the balance of the two tokens in a Two Token Pool.\n     *\n     * The returned balances are those of token A and token B, where token A is the lowest of token X and token Y, and\n     * token B the other.\n     *\n     * This function also returns a storage pointer to the TwoTokenPoolBalances struct associated with the token pair,\n     * which can be used to update it without having to recompute the pair hash and storage slot.\n     *\n     * Requirements:\n     *\n     * - `poolId` must be a Minimal Swap Info Pool\n     * - `tokenX` and `tokenY` must be registered in the Pool\n     */\n    function _getTwoTokenPoolSharedBalances(\n        bytes32 poolId,\n        IERC20 tokenX,\n        IERC20 tokenY\n    )\n        internal\n        view\n        returns (\n            bytes32 balanceA,\n            bytes32 balanceB,\n            TwoTokenPoolBalances storage poolBalances\n        )\n    {\n        (IERC20 tokenA, IERC20 tokenB) = _sortTwoTokens(tokenX, tokenY);\n        bytes32 pairHash = _getTwoTokenPairHash(tokenA, tokenB);\n\n        poolBalances = _twoTokenPoolTokens[poolId].balances[pairHash];\n\n        // Because we're reading balances using the pair hash, if either token X or token Y is not registered then\n        // *both* balance entries will be zero.\n        bytes32 sharedCash = poolBalances.sharedCash;\n        bytes32 sharedManaged = poolBalances.sharedManaged;\n\n        // A non-zero balance guarantees that both tokens are registered. If zero, we manually check whether each\n        // token is registered in the Pool. Token registration implies that the Pool is registered as well, which\n        // lets us save gas by not performing the check.\n        bool tokensRegistered = sharedCash.isNotZero() ||\n            sharedManaged.isNotZero() ||\n            (_isTwoTokenPoolTokenRegistered(poolId, tokenA) && _isTwoTokenPoolTokenRegistered(poolId, tokenB));\n\n        if (!tokensRegistered) {\n            // The tokens might not be registered because the Pool itself is not registered. We check this to provide a\n            // more accurate revert reason.\n            _ensureRegisteredPool(poolId);\n            _revert(Errors.TOKEN_NOT_REGISTERED);\n        }\n\n        balanceA = BalanceAllocation.fromSharedToBalanceA(sharedCash, sharedManaged);\n        balanceB = BalanceAllocation.fromSharedToBalanceB(sharedCash, sharedManaged);\n    }\n\n    /**\n     * @dev Returns true if `token` is registered in a Two Token Pool.\n     *\n     * This function assumes `poolId` exists and corresponds to the Two Token specialization setting.\n     */\n    function _isTwoTokenPoolTokenRegistered(bytes32 poolId, IERC20 token) internal view returns (bool) {\n        TwoTokenPoolTokens storage poolTokens = _twoTokenPoolTokens[poolId];\n\n        // The zero address can never be a registered token.\n        return (token == poolTokens.tokenA || token == poolTokens.tokenB) && token != IERC20(0);\n    }\n\n    /**\n     * @dev Returns the hash associated with a given token pair.\n     */\n    function _getTwoTokenPairHash(IERC20 tokenA, IERC20 tokenB) private pure returns (bytes32) {\n        return keccak256(abi.encodePacked(tokenA, tokenB));\n    }\n\n    /**\n     * @dev Sorts two tokens in ascending order, returning them as a (tokenA, tokenB) tuple.\n     */\n    function _sortTwoTokens(IERC20 tokenX, IERC20 tokenY) private pure returns (IERC20, IERC20) {\n        return tokenX < tokenY ? (tokenX, tokenY) : (tokenY, tokenX);\n    }\n}\n"
			},
			"contracts/AssetTransfersHandler.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\";\n\nimport \"./AssetHelpers.sol\";\n\nabstract contract AssetTransfersHandler is AssetHelpers {\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    /**\n     * @dev Receives `amount` of `asset` from `sender`. If `fromInternalBalance` is true, it first withdraws as much\n     * as possible from Internal Balance, then transfers any remaining amount.\n     *\n     * If `asset` is ETH, `fromInternalBalance` must be false (as ETH cannot be held as internal balance), and the funds\n     * will be wrapped into WETH.\n     *\n     * WARNING: this function does not check that the contract caller has actually supplied any ETH - it is up to the\n     * caller of this function to check that this is true to prevent the Vault from using its own ETH (though the Vault\n     * typically doesn't hold any).\n     */\n    function _receiveAsset(\n        IAsset asset,\n        uint256 amount,\n        address sender,\n        bool fromInternalBalance\n    ) internal {\n        if (amount == 0) {\n            return;\n        }\n\n        if (_isETH(asset)) {\n            _require(!fromInternalBalance, Errors.INVALID_ETH_INTERNAL_BALANCE);\n\n            // The ETH amount to receive is deposited into the WETH contract, which will in turn mint WETH for\n            // the Vault at a 1:1 ratio.\n\n            // A check for this condition is also introduced by the compiler, but this one provides a revert reason.\n            // Note we're checking for the Vault's total balance, *not* ETH sent in this transaction.\n            _require(address(this).balance >= amount, Errors.INSUFFICIENT_ETH);\n            _WETH().deposit{ value: amount }();\n        } else {\n            IERC20 token = _asIERC20(asset);\n\n            if (fromInternalBalance) {\n                // We take as many tokens from Internal Balance as possible: any remaining amounts will be transferred.\n                uint256 deductedBalance = _decreaseInternalBalance(sender, token, amount, true);\n                // Because `deductedBalance` will be always the lesser of the current internal balance\n                // and the amount to decrease, it is safe to perform unchecked arithmetic.\n                amount -= deductedBalance;\n            }\n\n            if (amount > 0) {\n                token.safeTransferFrom(sender, address(this), amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Sends `amount` of `asset` to `recipient`. If `toInternalBalance` is true, the asset is deposited as Internal\n     * Balance instead of being transferred.\n     *\n     * If `asset` is ETH, `toInternalBalance` must be false (as ETH cannot be held as internal balance), and the funds\n     * are instead sent directly after unwrapping WETH.\n     */\n    function _sendAsset(\n        IAsset asset,\n        uint256 amount,\n        address payable recipient,\n        bool toInternalBalance\n    ) internal {\n        if (amount == 0) {\n            return;\n        }\n\n        if (_isETH(asset)) {\n            // Sending ETH is not as involved as receiving it: the only special behavior is it cannot be\n            // deposited to Internal Balance.\n            _require(!toInternalBalance, Errors.INVALID_ETH_INTERNAL_BALANCE);\n\n            // First, the Vault withdraws deposited ETH from the WETH contract, by burning the same amount of WETH\n            // from the Vault. This receipt will be handled by the Vault's `receive`.\n            _WETH().withdraw(amount);\n\n            // Then, the withdrawn ETH is sent to the recipient.\n            recipient.sendValue(amount);\n        } else {\n            IERC20 token = _asIERC20(asset);\n            if (toInternalBalance) {\n                _increaseInternalBalance(recipient, token, amount);\n            } else {\n                token.safeTransfer(recipient, amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Returns excess ETH back to the contract caller, assuming `amountUsed` has been spent. Reverts\n     * if the caller sent less ETH than `amountUsed`.\n     *\n     * Because the caller might not know exactly how much ETH a Vault action will require, they may send extra.\n     * Note that this excess value is returned *to the contract caller* (msg.sender). If caller and e.g. swap sender are\n     * not the same (because the caller is a relayer for the sender), then it is up to the caller to manage this\n     * returned ETH.\n     */\n    function _handleRemainingEth(uint256 amountUsed) internal {\n        _require(msg.value >= amountUsed, Errors.INSUFFICIENT_ETH);\n\n        uint256 excess = msg.value - amountUsed;\n        if (excess > 0) {\n            msg.sender.sendValue(excess);\n        }\n    }\n\n    /**\n     * @dev Enables the Vault to receive ETH. This is required for it to be able to unwrap WETH, which sends ETH to the\n     * caller.\n     *\n     * Any ETH sent to the Vault outside of the WETH unwrapping mechanism would be forever locked inside the Vault, so\n     * we prevent that from happening. Other mechanisms used to send ETH to the Vault (such as being the recipient of an\n     * ETH swap, Pool exit or withdrawal, contract self-destruction, or receiving the block mining reward) will result\n     * in locked funds, but are not otherwise a security or soundness issue. This check only exists as an attempt to\n     * prevent user error.\n     */\n    receive() external payable {\n        _require(msg.sender == address(_WETH()), Errors.ETH_TRANSFER);\n    }\n\n    // This contract uses virtual internal functions instead of inheriting from the modules that implement them (in\n    // this case UserBalance) in order to decouple it from the rest of the system and enable standalone testing by\n    // implementing these with mocks.\n\n    function _increaseInternalBalance(\n        address account,\n        IERC20 token,\n        uint256 amount\n    ) internal virtual;\n\n    function _decreaseInternalBalance(\n        address account,\n        IERC20 token,\n        uint256 amount,\n        bool capped\n    ) internal virtual returns (uint256);\n}\n"
			},
			"contracts/AssetHelpers.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\";\n\nabstract contract AssetHelpers {\n    // solhint-disable-next-line var-name-mixedcase\n    IWETH private immutable _weth;\n\n    // Sentinel value used to indicate WETH with wrapping/unwrapping semantics. The zero address is a good choice for\n    // multiple reasons: it is cheap to pass as a calldata argument, it is a known invalid token and non-contract, and\n    // it is an address Pools cannot register as a token.\n    address private constant _ETH = address(0);\n\n    constructor(IWETH weth) {\n        _weth = weth;\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function _WETH() internal view returns (IWETH) {\n        return _weth;\n    }\n\n    /**\n     * @dev Returns true if `asset` is the sentinel value that represents ETH.\n     */\n    function _isETH(IAsset asset) internal pure returns (bool) {\n        return address(asset) == _ETH;\n    }\n\n    /**\n     * @dev Translates `asset` into an equivalent IERC20 token address. If `asset` represents ETH, it will be translated\n     * to the WETH contract.\n     */\n    function _translateToIERC20(IAsset asset) internal view returns (IERC20) {\n        return _isETH(asset) ? _WETH() : _asIERC20(asset);\n    }\n\n    /**\n     * @dev Same as `_translateToIERC20(IAsset)`, but for an entire array.\n     */\n    function _translateToIERC20(IAsset[] memory assets) internal view returns (IERC20[] memory) {\n        IERC20[] memory tokens = new IERC20[](assets.length);\n        for (uint256 i = 0; i < assets.length; ++i) {\n            tokens[i] = _translateToIERC20(assets[i]);\n        }\n        return tokens;\n    }\n\n    /**\n     * @dev Interprets `asset` as an IERC20 token. This function should only be called on `asset` if `_isETH` previously\n     * returned false for it, that is, if `asset` is guaranteed not to be the ETH sentinel value.\n     */\n    function _asIERC20(IAsset asset) internal pure returns (IERC20) {\n        return IERC20(address(asset));\n    }\n}\n"
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\n// Based on the Address library from OpenZeppelin Contracts, altered by removing the `isContract` checks on\n// `functionCall` and `functionDelegateCall` in order to save gas, as the recipients are known to be contracts.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    // solhint-disable max-line-length\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        _require(address(this).balance >= amount, Errors.ADDRESS_INSUFFICIENT_BALANCE);\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        _require(success, Errors.ADDRESS_CANNOT_SEND_VALUE);\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call(data);\n        return verifyCallResult(success, returndata);\n    }\n\n    // solhint-enable max-line-length\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but passing some native ETH as msg.value to the call.\n     *\n     * _Available since v3.4._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return verifyCallResult(success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling up the\n     * revert reason or using the one provided.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                _revert(Errors.LOW_LEVEL_CALL_FAILED);\n            }\n        }\n    }\n}\n"
			},
			"contracts/test/BalanceAllocationMock.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"../balances/BalanceAllocation.sol\";\n\ncontract BalanceAllocationMock {\n    using BalanceAllocation for bytes32;\n\n    function total(bytes32 balance) public pure returns (uint256) {\n        return balance.total();\n    }\n\n    function totals(bytes32[] memory balances) public pure returns (uint256[] memory result) {\n        (result, ) = BalanceAllocation.totalsAndLastChangeBlock(balances);\n    }\n\n    function cash(bytes32 balance) public pure returns (uint256) {\n        return balance.cash();\n    }\n\n    function managed(bytes32 balance) public pure returns (uint256) {\n        return balance.managed();\n    }\n\n    function lastChangeBlock(bytes32 balance) public pure returns (uint256) {\n        return balance.lastChangeBlock();\n    }\n\n    function isNotZero(bytes32 balance) public pure returns (bool) {\n        return balance.isNotZero();\n    }\n\n    function isZero(bytes32 balance) public pure returns (bool) {\n        return balance.isZero();\n    }\n\n    function toBalance(\n        uint256 _cash,\n        uint256 _managed,\n        uint256 _lastChangeBlock\n    ) public pure returns (bytes32) {\n        return BalanceAllocation.toBalance(_cash, _managed, _lastChangeBlock);\n    }\n\n    function increaseCash(bytes32 balance, uint256 amount) public view returns (bytes32) {\n        return balance.increaseCash(amount);\n    }\n\n    function decreaseCash(bytes32 balance, uint256 amount) public view returns (bytes32) {\n        return balance.decreaseCash(amount);\n    }\n\n    function cashToManaged(bytes32 balance, uint256 amount) public pure returns (bytes32) {\n        return balance.cashToManaged(amount);\n    }\n\n    function managedToCash(bytes32 balance, uint256 amount) public pure returns (bytes32) {\n        return balance.managedToCash(amount);\n    }\n\n    function setManaged(bytes32 balance, uint256 newManaged) public view returns (bytes32) {\n        return balance.setManaged(newManaged);\n    }\n\n    function fromSharedToBalanceA(bytes32 sharedCash, bytes32 sharedManaged) public pure returns (bytes32) {\n        return BalanceAllocation.fromSharedToBalanceA(sharedCash, sharedManaged);\n    }\n\n    function fromSharedToBalanceB(bytes32 sharedCash, bytes32 sharedManaged) public pure returns (bytes32) {\n        return BalanceAllocation.fromSharedToBalanceB(sharedCash, sharedManaged);\n    }\n\n    function toSharedCash(bytes32 tokenABalance, bytes32 tokenBBalance) public pure returns (bytes32) {\n        return BalanceAllocation.toSharedCash(tokenABalance, tokenBBalance);\n    }\n\n    function toSharedManaged(bytes32 tokenABalance, bytes32 tokenBBalance) public pure returns (bytes32) {\n        return BalanceAllocation.toSharedManaged(tokenABalance, tokenBBalance);\n    }\n}\n"
			},
			"contracts/authorizer/TimelockExecutor.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\";\n\nimport \"./TimelockAuthorizer.sol\";\n\ncontract TimelockExecutor is ReentrancyGuard {\n    TimelockAuthorizer public immutable authorizer;\n\n    constructor() {\n        authorizer = TimelockAuthorizer(msg.sender);\n    }\n\n    function execute(address target, bytes memory data) external nonReentrant returns (bytes memory result) {\n        require(msg.sender == address(authorizer), \"ERR_SENDER_NOT_AUTHORIZER\");\n        return Address.functionCall(target, data);\n    }\n}\n"
			},
			"contracts/authorizer/TimelockAuthorizer.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\";\nimport \"./TimelockExecutor.sol\";\n\n/**\n * @title Timelock Authorizer\n * @author Balancer Labs\n * @dev Authorizer with timelocks (delays).\n *\n * Users are allowed to perform actions if they have the permission to do so.\n *\n * This Authorizer implementation allows defining a delay per action identifier. If a delay is set for an action, users\n * are instead allowed to schedule an execution that will be run in the future by the Authorizer instead of executing it\n * directly themselves.\n *\n * Glossary:\n * - Action: Operation that can be performed to a target contract. These are identified by a unique bytes32 `actionId`\n *   defined by each target contract following `IAuthentication.getActionId`.\n * - Scheduled execution: The Authorizer can define different delays per `actionId` in order to determine that a\n *   specific time window must pass before these can be executed. When a delay is set for an `actionId`, executions\n *   must be scheduled. These executions are identified with an unsigned integer called `scheduledExecutionId`.\n * - Permission: Unique identifier to refer to a user (who) that is allowed to perform an action (what) in a specific\n *   target contract (where). This identifier is called `permissionId` and is computed as\n *   `keccak256(actionId, account, where)`.\n *\n * Permission granularity:\n *   In addition to the who/what/where of a permission, an extra notion of a \"specifier\" is introduced to enable more\n *   granular configuration. This concept is used within the Authorizer to provide clarity among four ambiguous actions:\n *   granting/revoking permissions, executing scheduled actions, and setting action delays. For example, in managing\n *   the permission to set action delays, it is desirable to delineate whether an account can set delays for all\n *   actions indiscriminately or only for a specific action ID. In this case, the permission's \"baseActionId\" is the\n *   action ID for scheduling a delay change, and the \"specifier\" is the action ID for which the delay will be changed.\n *   The \"baseActionId\" and \"specifier\" of a permission are combined into a single \"extended\" `actionId`\n *   by calling `getExtendedActionId(baseActionId, specifier)`.\n *\n * Note that the TimelockAuthorizer doesn't make use of reentrancy guards on the majority of external functions.\n * The only function which makes an external non-view call (and so could initate a reentrancy attack) is `execute`\n * which executes a scheduled execution and so this is the only protected function.\n * In fact a number of the TimelockAuthorizer's functions may only be called through a scheduled execution so reentrancy\n * is necessary in order to be able to call these.\n */\ncontract TimelockAuthorizer is IAuthorizer, IAuthentication, ReentrancyGuard {\n    using Address for address;\n\n    /**\n     * @notice An action specifier which grants a general permission to perform all variants of the base action.\n     */\n    bytes32\n        public constant GENERAL_PERMISSION_SPECIFIER = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    // solhint-disable-previous-line max-line-length\n\n    /**\n     * @notice A sentinel value for `where` that will match any address.\n     */\n    address public constant EVERYWHERE = address(-1);\n\n    // We institute a maximum delay to ensure that actions cannot be accidentally/maliciously disabled through setting\n    // an arbitrarily long delay.\n    uint256 public constant MAX_DELAY = 2 * (365 days);\n    // We need a minimum delay period to ensure that scheduled actions may be properly scrutinised.\n    uint256 public constant MIN_DELAY = 5 days;\n\n    struct ScheduledExecution {\n        address where;\n        bytes data;\n        bool executed;\n        bool cancelled;\n        bool protected;\n        uint256 executableAt;\n    }\n\n    // solhint-disable var-name-mixedcase\n    bytes32 public immutable GRANT_ACTION_ID;\n    bytes32 public immutable REVOKE_ACTION_ID;\n    bytes32 public immutable EXECUTE_ACTION_ID;\n    bytes32 public immutable SCHEDULE_DELAY_ACTION_ID;\n\n    // These action ids do not need to be used by external actors as the action ids above do.\n    // Instead they're saved just for gas savings so we can keep them private.\n    bytes32 private immutable _GENERAL_GRANT_ACTION_ID;\n    bytes32 private immutable _GENERAL_REVOKE_ACTION_ID;\n\n    TimelockExecutor private immutable _executor;\n    IAuthentication private immutable _vault;\n    uint256 private immutable _rootTransferDelay;\n\n    address private _root;\n    address private _pendingRoot;\n    ScheduledExecution[] private _scheduledExecutions;\n    mapping(bytes32 => bool) private _isPermissionGranted;\n    mapping(bytes32 => uint256) private _delaysPerActionId;\n\n    /**\n     * @notice Emitted when a new execution `scheduledExecutionId` is scheduled.\n     */\n    event ExecutionScheduled(bytes32 indexed actionId, uint256 indexed scheduledExecutionId);\n\n    /**\n     * @notice Emitted when an execution `scheduledExecutionId` is executed.\n     */\n    event ExecutionExecuted(uint256 indexed scheduledExecutionId);\n\n    /**\n     * @notice Emitted when an execution `scheduledExecutionId` is cancelled.\n     */\n    event ExecutionCancelled(uint256 indexed scheduledExecutionId);\n\n    /**\n     * @notice Emitted when a new `delay` is set in order to perform action `actionId`.\n     */\n    event ActionDelaySet(bytes32 indexed actionId, uint256 delay);\n\n    /**\n     * @notice Emitted when `account` is granted permission to perform action `actionId` in target `where`.\n     */\n    event PermissionGranted(bytes32 indexed actionId, address indexed account, address indexed where);\n\n    /**\n     * @notice Emitted when `account`'s permission to perform action `actionId` in target `where` is revoked.\n     */\n    event PermissionRevoked(bytes32 indexed actionId, address indexed account, address indexed where);\n\n    /**\n     * @notice Emitted when a new `root` is set.\n     */\n    event RootSet(address indexed root);\n\n    /**\n     * @notice Emitted when a new `pendingRoot` is set. The new account must claim ownership for it to take effect.\n     */\n    event PendingRootSet(address indexed pendingRoot);\n\n    modifier onlyExecutor() {\n        _require(msg.sender == address(_executor), Errors.SENDER_NOT_ALLOWED);\n        _;\n    }\n\n    constructor(\n        address admin,\n        IAuthentication vault,\n        uint256 rootTransferDelay\n    ) {\n        _setRoot(admin);\n        _vault = vault;\n        _executor = new TimelockExecutor();\n        _rootTransferDelay = rootTransferDelay;\n\n        bytes32 grantActionId = getActionId(TimelockAuthorizer.grantPermissions.selector);\n        bytes32 revokeActionId = getActionId(TimelockAuthorizer.revokePermissions.selector);\n        bytes32 generalGrantActionId = getExtendedActionId(grantActionId, GENERAL_PERMISSION_SPECIFIER);\n        bytes32 generalRevokeActionId = getExtendedActionId(revokeActionId, GENERAL_PERMISSION_SPECIFIER);\n\n        // These don't technically need to be granted as `admin` will be the new root, and can grant these permissions\n        // directly to themselves. By granting here improves ergonomics, especially in testing, as the admin is now\n        // ready to grant any permission.\n        _grantPermission(generalGrantActionId, admin, EVERYWHERE);\n        _grantPermission(generalRevokeActionId, admin, EVERYWHERE);\n\n        GRANT_ACTION_ID = grantActionId;\n        REVOKE_ACTION_ID = revokeActionId;\n        EXECUTE_ACTION_ID = getActionId(TimelockAuthorizer.execute.selector);\n        SCHEDULE_DELAY_ACTION_ID = getActionId(TimelockAuthorizer.scheduleDelayChange.selector);\n        _GENERAL_GRANT_ACTION_ID = generalGrantActionId;\n        _GENERAL_REVOKE_ACTION_ID = generalRevokeActionId;\n    }\n\n    /**\n     * @notice Returns true if `account` is the root.\n     */\n    function isRoot(address account) public view returns (bool) {\n        return account == _root;\n    }\n\n    /**\n     * @notice Returns true if `account` is the pending root.\n     */\n    function isPendingRoot(address account) public view returns (bool) {\n        return account == _pendingRoot;\n    }\n\n    /**\n     * @notice Returns the delay required to transfer the root address.\n     */\n    function getRootTransferDelay() public view returns (uint256) {\n        return _rootTransferDelay;\n    }\n\n    /**\n     * @notice Returns the vault address.\n     */\n    function getVault() external view returns (address) {\n        return address(_vault);\n    }\n\n    /**\n     * @notice Returns the executor address.\n     */\n    function getExecutor() external view returns (address) {\n        return address(_executor);\n    }\n\n    /**\n     * @notice Returns the root address.\n     */\n    function getRoot() external view returns (address) {\n        return _root;\n    }\n\n    /**\n     * @notice Returns the currently pending new root address.\n     */\n    function getPendingRoot() external view returns (address) {\n        return _pendingRoot;\n    }\n\n    /**\n     * @notice Returns the action ID for function selector `selector`.\n     */\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\n        return keccak256(abi.encodePacked(bytes32(uint256(address(this))), selector));\n    }\n\n    /**\n     * @notice Returns the action ID for granting a permission for action `actionId`.\n     */\n    function getGrantPermissionActionId(bytes32 actionId) public view returns (bytes32) {\n        return getExtendedActionId(GRANT_ACTION_ID, actionId);\n    }\n\n    /**\n     * @notice Returns the action ID for revoking a permission for action `actionId`.\n     */\n    function getRevokePermissionActionId(bytes32 actionId) public view returns (bytes32) {\n        return getExtendedActionId(REVOKE_ACTION_ID, actionId);\n    }\n\n    /**\n     * @notice Returns the action ID for executing the scheduled action with execution ID `executionId`.\n     */\n    function getExecuteExecutionActionId(uint256 executionId) public view returns (bytes32) {\n        return getExtendedActionId(EXECUTE_ACTION_ID, bytes32(executionId));\n    }\n\n    /**\n     * @notice Returns the action ID for scheduling setting a new delay for action `actionId`.\n     */\n    function getScheduleDelayActionId(bytes32 actionId) public view returns (bytes32) {\n        return getExtendedActionId(SCHEDULE_DELAY_ACTION_ID, actionId);\n    }\n\n    /**\n     * @notice Returns the extended action ID for base action ID `baseActionId` with specific params `specifier`.\n     */\n    function getExtendedActionId(bytes32 baseActionId, bytes32 specifier) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(baseActionId, specifier));\n    }\n\n    /**\n     * @notice Returns the execution delay for action `actionId`.\n     */\n    function getActionIdDelay(bytes32 actionId) external view returns (uint256) {\n        return _delaysPerActionId[actionId];\n    }\n\n    /**\n     * @notice Returns the permission ID for action `actionId`, account `account` and target `where`.\n     */\n    function getPermissionId(\n        bytes32 actionId,\n        address account,\n        address where\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(actionId, account, where));\n    }\n\n    /**\n     * @notice Returns true if `account` has the permission defined by action `actionId` and target `where`.\n     * @dev This function is specific for the strict permission defined by the tuple `(actionId, where)`: `account` may\n     * instead hold the global permission for the action `actionId`, also granting them permission on `where`, but this\n     * function would return false regardless.\n     *\n     * For this reason, it's recommended to use `hasPermission` if checking whether `account` is allowed to perform\n     * a given action.\n     */\n    function isPermissionGrantedOnTarget(\n        bytes32 actionId,\n        address account,\n        address where\n    ) external view returns (bool) {\n        return _isPermissionGranted[getPermissionId(actionId, account, where)];\n    }\n\n    /**\n     * @notice Returns true if `account` has permission over the action `actionId` in target `where`.\n     */\n    function hasPermission(\n        bytes32 actionId,\n        address account,\n        address where\n    ) public view returns (bool) {\n        return\n            _isPermissionGranted[getPermissionId(actionId, account, where)] ||\n            _isPermissionGranted[getPermissionId(actionId, account, EVERYWHERE)];\n    }\n\n    /**\n     * @notice Returns true if `account` is allowed to grant permissions for action `actionId` in target `where`.\n     */\n    function isGranter(\n        bytes32 actionId,\n        address account,\n        address where\n    ) public view returns (bool) {\n        return _hasPermissionSpecificallyOrGenerally(GRANT_ACTION_ID, account, where, actionId);\n    }\n\n    /**\n     * @notice Returns true if `account` is allowed to revoke permissions for action `actionId` in target `where`.\n     */\n    function isRevoker(\n        bytes32 actionId,\n        address account,\n        address where\n    ) public view returns (bool) {\n        return _hasPermissionSpecificallyOrGenerally(REVOKE_ACTION_ID, account, where, actionId);\n    }\n\n    /**\n     * @notice Returns true if `account` can perform action `actionId` in target `where`.\n     */\n    function canPerform(\n        bytes32 actionId,\n        address account,\n        address where\n    ) public view override returns (bool) {\n        return\n            _delaysPerActionId[actionId] > 0 ? account == address(_executor) : hasPermission(actionId, account, where);\n    }\n\n    /**\n     * @notice Returns true if `account` can grant permissions for action `actionId` in target `where`.\n     */\n    function canGrant(\n        bytes32 actionId,\n        address account,\n        address where\n    ) public view returns (bool) {\n        return _canPerformSpecificallyOrGenerally(GRANT_ACTION_ID, account, where, actionId);\n    }\n\n    /**\n     * @notice Returns true if `account` can revoke permissions for action `actionId` in target `where`.\n     */\n    function canRevoke(\n        bytes32 actionId,\n        address account,\n        address where\n    ) public view returns (bool) {\n        return _canPerformSpecificallyOrGenerally(REVOKE_ACTION_ID, account, where, actionId);\n    }\n\n    /**\n     * @notice Returns the scheduled execution `scheduledExecutionId`.\n     */\n    function getScheduledExecution(uint256 scheduledExecutionId) external view returns (ScheduledExecution memory) {\n        return _scheduledExecutions[scheduledExecutionId];\n    }\n\n    /**\n     * @notice Returns true if execution `scheduledExecutionId` can be executed.\n     * Only true if it is not already executed or cancelled, and if the execution delay has passed.\n     */\n    function canExecute(uint256 scheduledExecutionId) external view returns (bool) {\n        require(scheduledExecutionId < _scheduledExecutions.length, \"ACTION_DOES_NOT_EXIST\");\n        ScheduledExecution storage scheduledExecution = _scheduledExecutions[scheduledExecutionId];\n        return\n            !scheduledExecution.executed &&\n            !scheduledExecution.cancelled &&\n            block.timestamp >= scheduledExecution.executableAt;\n        // solhint-disable-previous-line not-rely-on-time\n    }\n\n    /**\n     * @notice Schedules an execution to change the root address to `newRoot`.\n     */\n    function scheduleRootChange(address newRoot, address[] memory executors)\n        external\n        returns (uint256 scheduledExecutionId)\n    {\n        _require(isRoot(msg.sender), Errors.SENDER_NOT_ALLOWED);\n        bytes32 actionId = getActionId(this.setPendingRoot.selector);\n        bytes memory data = abi.encodeWithSelector(this.setPendingRoot.selector, newRoot);\n        return _scheduleWithDelay(actionId, address(this), data, getRootTransferDelay(), executors);\n    }\n\n    /**\n     * @notice Sets the pending root address to `pendingRoot`.\n     * @dev This function can never be called directly - it is only ever called as part of a scheduled execution by\n     * the TimelockExecutor after after calling `scheduleRootChange`.\n     *\n     * Once set as the pending root, `pendingRoot` may then call `claimRoot` to become the new root.\n     */\n    function setPendingRoot(address pendingRoot) external onlyExecutor {\n        _setPendingRoot(pendingRoot);\n    }\n\n    /**\n     * @notice Transfers root powers from the current to the pending root address.\n     * @dev This function prevents accidentally transferring root to an invalid address.\n     * To become root, the pending root must call this function to ensure that it's able to interact with this contract.\n     */\n    function claimRoot() external {\n        address currentRoot = _root;\n        address pendingRoot = _pendingRoot;\n        _require(msg.sender == pendingRoot, Errors.SENDER_NOT_ALLOWED);\n\n        // Grant powers to new root to grant or revoke any permission over any contract.\n        _grantPermission(_GENERAL_GRANT_ACTION_ID, pendingRoot, EVERYWHERE);\n        _grantPermission(_GENERAL_REVOKE_ACTION_ID, pendingRoot, EVERYWHERE);\n\n        // Revoke these powers from the outgoing root.\n        _revokePermission(_GENERAL_GRANT_ACTION_ID, currentRoot, EVERYWHERE);\n        _revokePermission(_GENERAL_REVOKE_ACTION_ID, currentRoot, EVERYWHERE);\n\n        // Complete the root transfer and reset the pending root.\n        _setRoot(pendingRoot);\n        _setPendingRoot(address(0));\n    }\n\n    /**\n     * @notice Sets a new delay `delay` for action `actionId`.\n     * @dev This function can never be called directly - it is only ever called as part of a scheduled execution by\n     * the TimelockExecutor after after calling `scheduleDelayChange`.\n     */\n    function setDelay(bytes32 actionId, uint256 delay) external onlyExecutor {\n        bytes32 setAuthorizerActionId = _vault.getActionId(IVault.setAuthorizer.selector);\n        bool isAllowed = actionId == setAuthorizerActionId || delay <= _delaysPerActionId[setAuthorizerActionId];\n        require(isAllowed, \"DELAY_EXCEEDS_SET_AUTHORIZER\");\n\n        _delaysPerActionId[actionId] = delay;\n        emit ActionDelaySet(actionId, delay);\n    }\n\n    /**\n     * @notice Schedules an execution to set action `actionId`'s delay to `newDelay`.\n     */\n    function scheduleDelayChange(\n        bytes32 actionId,\n        uint256 newDelay,\n        address[] memory executors\n    ) external returns (uint256 scheduledExecutionId) {\n        require(newDelay <= MAX_DELAY, \"DELAY_TOO_LARGE\");\n        _require(isRoot(msg.sender), Errors.SENDER_NOT_ALLOWED);\n\n        // The delay change is scheduled so that it's never possible to execute an action in a shorter time than the\n        // current delay.\n        //\n        // If we're reducing the action's delay then we must first wait for the difference between the two delays.\n        // This means that if we immediately schedule the action for execution once the delay is reduced, then\n        // these two delays combined will result in the original delay.\n        //\n        // If we're increasing the delay on an action, we could execute this change immediately as it's impossible to\n        // perform an action sooner by increasing its delay. Requiring a potentially long delay before increasing the\n        // delay just adds unnecessary friction to increasing security for sensitive actions.\n        //\n        // We also enforce a minimum delay period to allow proper scrutiny of the change of the action's delay.\n\n        uint256 actionDelay = _delaysPerActionId[actionId];\n        uint256 executionDelay = newDelay < actionDelay ? Math.max(actionDelay - newDelay, MIN_DELAY) : MIN_DELAY;\n\n        bytes32 scheduleDelayActionId = getScheduleDelayActionId(actionId);\n        bytes memory data = abi.encodeWithSelector(this.setDelay.selector, actionId, newDelay);\n        return _scheduleWithDelay(scheduleDelayActionId, address(this), data, executionDelay, executors);\n    }\n\n    /**\n     * @notice Schedules an arbitrary execution of `data` in target `where`.\n     */\n    function schedule(\n        address where,\n        bytes memory data,\n        address[] memory executors\n    ) external returns (uint256 scheduledExecutionId) {\n        // Allowing scheduling arbitrary calls into the TimelockAuthorizer is dangerous.\n        //\n        // It is expected that only the `root` account can initiate a root transfer as this condition is enforced\n        // by the `scheduleRootChange` function which is the expected method of scheduling a call to `setPendingRoot`.\n        // If a call to `setPendingRoot` could be scheduled using this function as well as `scheduleRootChange` then\n        // accounts other than `root` could initiate a root transfer (provided they had the necessary permission).\n        // Similarly, `setDelay` can only be called if scheduled via `scheduleDelayChange`.\n        //\n        // For this reason we disallow this function from scheduling calls to functions on the Authorizer to ensure that\n        // these actions can only be scheduled through specialised functions.\n        require(where != address(this), \"CANNOT_SCHEDULE_AUTHORIZER_ACTIONS\");\n\n        // We also disallow the TimelockExecutor from attempting to call into itself. Otherwise the above protection\n        // could be bypassed by wrapping a call to `setPendingRoot` inside of a call causing the TimelockExecutor to\n        // reenter itself, essentially hiding the fact that `where == address(this)` inside `data`.\n        //\n        // Note: The TimelockExecutor only accepts calls from the TimelockAuthorizer (i.e. not from itself) so this\n        // scenario should be impossible but this check is cheap so we enforce it here as well anyway.\n        require(where != address(_executor), \"ATTEMPTING_EXECUTOR_REENTRANCY\");\n\n        bytes32 actionId = IAuthentication(where).getActionId(_decodeSelector(data));\n        _require(hasPermission(actionId, msg.sender, where), Errors.SENDER_NOT_ALLOWED);\n        return _schedule(actionId, where, data, executors);\n    }\n\n    /**\n     * @notice Executes a scheduled action `scheduledExecutionId`.\n     */\n    function execute(uint256 scheduledExecutionId) external nonReentrant returns (bytes memory result) {\n        require(scheduledExecutionId < _scheduledExecutions.length, \"ACTION_DOES_NOT_EXIST\");\n        ScheduledExecution storage scheduledExecution = _scheduledExecutions[scheduledExecutionId];\n        require(!scheduledExecution.executed, \"ACTION_ALREADY_EXECUTED\");\n        require(!scheduledExecution.cancelled, \"ACTION_ALREADY_CANCELLED\");\n\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp >= scheduledExecution.executableAt, \"ACTION_NOT_EXECUTABLE\");\n        if (scheduledExecution.protected) {\n            bytes32 executeScheduledActionId = getExecuteExecutionActionId(scheduledExecutionId);\n            bool isAllowed = hasPermission(executeScheduledActionId, msg.sender, address(this));\n            _require(isAllowed, Errors.SENDER_NOT_ALLOWED);\n        }\n\n        scheduledExecution.executed = true;\n        // Note that this is the only place in the entire contract we perform a non-view call to an external contract.\n        result = _executor.execute(scheduledExecution.where, scheduledExecution.data);\n        emit ExecutionExecuted(scheduledExecutionId);\n    }\n\n    /**\n     * @notice Cancels a scheduled action `scheduledExecutionId`.\n     * @dev The permission to cancel a scheduled action is the same one used to schedule it.\n     *\n     * Note that in the case of cancelling a malicious granting or revocation of permissions to an address,\n     * we must assume that the granter/revoker status of all non-malicious addresses will be revoked as calls to\n     * manageGranter/manageRevoker have no delays associated with them.\n     */\n    function cancel(uint256 scheduledExecutionId) external {\n        require(scheduledExecutionId < _scheduledExecutions.length, \"ACTION_DOES_NOT_EXIST\");\n        ScheduledExecution storage scheduledExecution = _scheduledExecutions[scheduledExecutionId];\n\n        require(!scheduledExecution.executed, \"ACTION_ALREADY_EXECUTED\");\n        require(!scheduledExecution.cancelled, \"ACTION_ALREADY_CANCELLED\");\n\n        // The permission to cancel a scheduled action is the same one used to schedule it.\n        // The root address may cancel any action even without this permission.\n        IAuthentication target = IAuthentication(scheduledExecution.where);\n        bytes32 actionId = target.getActionId(_decodeSelector(scheduledExecution.data));\n        _require(\n            hasPermission(actionId, msg.sender, scheduledExecution.where) || isRoot(msg.sender),\n            Errors.SENDER_NOT_ALLOWED\n        );\n\n        scheduledExecution.cancelled = true;\n        emit ExecutionCancelled(scheduledExecutionId);\n    }\n\n    /**\n     * @notice Sets `account`'s granter status to `allowed` for action `actionId` in target `where`.\n     * @dev Note that granters can revoke the granter status of other granters, even removing the root.\n     * However the root can always rejoin, and then remove any malicious granters.\n     *\n     * Note that there are no delays associated with adding or removing granters. This is based on the assumption that\n     * any action which a malicous user could exploit to damage the protocol will have a sufficiently long delay\n     * associated with either granting permission for or exercising that permission such that the root will be able to\n     * reestablish control and cancel the action before it can be executed.\n     */\n    function manageGranter(\n        bytes32 actionId,\n        address account,\n        address where,\n        bool allowed\n    ) external {\n        // Root may grant or revoke granter status from any address.\n        // Granters may only revoke a granter status from any address.\n        bool isAllowed = isRoot(msg.sender) || (!allowed && isGranter(actionId, msg.sender, where));\n        _require(isAllowed, Errors.SENDER_NOT_ALLOWED);\n\n        bytes32 grantPermissionsActionId = getGrantPermissionActionId(actionId);\n        (allowed ? _grantPermission : _revokePermission)(grantPermissionsActionId, account, where);\n    }\n\n    /**\n     * @notice Grants multiple permissions to a single `account`.\n     * @dev This function can only be used for actions that have no grant delay. For those that do, use\n     * `scheduleGrantPermission` instead.\n     */\n    function grantPermissions(\n        bytes32[] memory actionIds,\n        address account,\n        address[] memory where\n    ) external {\n        InputHelpers.ensureInputLengthMatch(actionIds.length, where.length);\n        for (uint256 i = 0; i < actionIds.length; i++) {\n            // For permissions that have a delay when granting, `canGrant` will return false. `scheduleGrantPermission`\n            // will succeed as it checks `isGranter` instead.\n            // Note that `canGrant` will return true for the executor if the permission has a delay.\n            _require(canGrant(actionIds[i], msg.sender, where[i]), Errors.SENDER_NOT_ALLOWED);\n            _grantPermission(actionIds[i], account, where[i]);\n        }\n    }\n\n    /**\n     * @notice Schedules a grant permission to `account` for action `actionId` in target `where`.\n     */\n    function scheduleGrantPermission(\n        bytes32 actionId,\n        address account,\n        address where,\n        address[] memory executors\n    ) external returns (uint256 scheduledExecutionId) {\n        _require(isGranter(actionId, msg.sender, where), Errors.SENDER_NOT_ALLOWED);\n        bytes memory data = abi.encodeWithSelector(this.grantPermissions.selector, _ar(actionId), account, _ar(where));\n        bytes32 grantPermissionId = getGrantPermissionActionId(actionId);\n        return _schedule(grantPermissionId, address(this), data, executors);\n    }\n\n    /**\n     * @notice Sets `account`'s revoker status to `allowed` for action `actionId` in target `where`.\n     * @dev Note that revokers can revoke the revoker status of other revokers, even banning the root.\n     * However the root can always rejoin, and then remove any malicious revokers.\n     *\n     * Note that there are no delays associated with adding or removing revokers. This is based on the assumption that\n     * any permissions for which revocation from key addresses would be dangerous (e.g. preventing the BalancerMinter\n     * from minting BAL) have sufficiently long delays associated with revoking them that the root will be able to\n     * reestablish control and cancel the revocation before the scheduled revocation can be executed.\n     */\n    function manageRevoker(\n        bytes32 actionId,\n        address account,\n        address where,\n        bool allowed\n    ) external {\n        // Root may grant or revoke revoker status from any address.\n        // Revokers may only revoke a revoker status from any address.\n        bool isAllowed = isRoot(msg.sender) || (!allowed && isRevoker(actionId, msg.sender, where));\n        _require(isAllowed, Errors.SENDER_NOT_ALLOWED);\n\n        bytes32 revokePermissionsActionId = getRevokePermissionActionId(actionId);\n        (allowed ? _grantPermission : _revokePermission)(revokePermissionsActionId, account, where);\n    }\n\n    /**\n     * @notice Revokes multiple permissions from a single `account`.\n     * @dev This function can only be used for actions that have no revoke delay. For those that do, use\n     * `scheduleRevokePermission` instead.\n     */\n    function revokePermissions(\n        bytes32[] memory actionIds,\n        address account,\n        address[] memory where\n    ) external {\n        InputHelpers.ensureInputLengthMatch(actionIds.length, where.length);\n        for (uint256 i = 0; i < actionIds.length; i++) {\n            // For permissions that have a delay when granting, `canRevoke` will return false.\n            // `scheduleRevokePermission` will succeed as it checks `isRevoker` instead.\n            // Note that `canRevoke` will return true for the executor if the permission has a delay.\n            _require(canRevoke(actionIds[i], msg.sender, where[i]), Errors.SENDER_NOT_ALLOWED);\n            _revokePermission(actionIds[i], account, where[i]);\n        }\n    }\n\n    /**\n     * @notice Schedules a revoke permission from `account` for action `actionId` in target `where`.\n     */\n    function scheduleRevokePermission(\n        bytes32 actionId,\n        address account,\n        address where,\n        address[] memory executors\n    ) external returns (uint256 scheduledExecutionId) {\n        _require(isRevoker(actionId, msg.sender, where), Errors.SENDER_NOT_ALLOWED);\n        bytes memory data = abi.encodeWithSelector(this.revokePermissions.selector, _ar(actionId), account, _ar(where));\n        bytes32 revokePermissionId = getRevokePermissionActionId(actionId);\n        return _schedule(revokePermissionId, address(this), data, executors);\n    }\n\n    /**\n     * @notice Revokes multiple permissions from the caller.\n     * @dev Note that the caller can always renounce permissions, even if revoking them would typically be\n     * subject to a delay.\n     */\n    function renouncePermissions(bytes32[] memory actionIds, address[] memory where) external {\n        InputHelpers.ensureInputLengthMatch(actionIds.length, where.length);\n        for (uint256 i = 0; i < actionIds.length; i++) {\n            _revokePermission(actionIds[i], msg.sender, where[i]);\n        }\n    }\n\n    function _grantPermission(\n        bytes32 actionId,\n        address account,\n        address where\n    ) private {\n        bytes32 permission = getPermissionId(actionId, account, where);\n        if (!_isPermissionGranted[permission]) {\n            _isPermissionGranted[permission] = true;\n            emit PermissionGranted(actionId, account, where);\n        }\n    }\n\n    function _revokePermission(\n        bytes32 actionId,\n        address account,\n        address where\n    ) private {\n        bytes32 permission = getPermissionId(actionId, account, where);\n        if (_isPermissionGranted[permission]) {\n            _isPermissionGranted[permission] = false;\n            emit PermissionRevoked(actionId, account, where);\n        }\n    }\n\n    function _schedule(\n        bytes32 actionId,\n        address where,\n        bytes memory data,\n        address[] memory executors\n    ) private returns (uint256 scheduledExecutionId) {\n        uint256 delay = _delaysPerActionId[actionId];\n        require(delay > 0, \"CANNOT_SCHEDULE_ACTION\");\n        return _scheduleWithDelay(actionId, where, data, delay, executors);\n    }\n\n    function _scheduleWithDelay(\n        bytes32 actionId,\n        address where,\n        bytes memory data,\n        uint256 delay,\n        address[] memory executors\n    ) private returns (uint256 scheduledExecutionId) {\n        scheduledExecutionId = _scheduledExecutions.length;\n        emit ExecutionScheduled(actionId, scheduledExecutionId);\n\n        // solhint-disable-next-line not-rely-on-time\n        uint256 executableAt = block.timestamp + delay;\n        bool protected = executors.length > 0;\n\n        _scheduledExecutions.push(\n            ScheduledExecution({\n                where: where,\n                data: data,\n                executed: false,\n                cancelled: false,\n                protected: protected,\n                executableAt: executableAt\n            })\n        );\n\n        bytes32 executeActionId = getExecuteExecutionActionId(scheduledExecutionId);\n        for (uint256 i = 0; i < executors.length; i++) {\n            _grantPermission(executeActionId, executors[i], address(this));\n        }\n    }\n\n    /**\n     * @notice Returns if `account` has permission to perform the action `(baseActionId, specifier)` on target `where`.\n     * @dev This function differs from `_canPerformSpecificallyOrGenerally` as it *doesn't* take into account whether\n     * there is a delay for the action associated with the permission being checked.\n     *\n     * The address `account` may have the permission associated with the provided action but that doesn't necessarily\n     * mean that it may perform that action. If there is no delay associated with this action, `account` may perform the\n     * action directly. If there is a delay, then `account` is instead able to schedule that action to be performed\n     * at a later date.\n     *\n     * This function returns true in both cases.\n     */\n    function _hasPermissionSpecificallyOrGenerally(\n        bytes32 baseActionId,\n        address account,\n        address where,\n        bytes32 specifier\n    ) internal view returns (bool) {\n        bytes32 specificActionId = getExtendedActionId(baseActionId, specifier);\n        bytes32 generalActionId = getExtendedActionId(baseActionId, GENERAL_PERMISSION_SPECIFIER);\n        return hasPermission(specificActionId, account, where) || hasPermission(generalActionId, account, where);\n    }\n\n    /**\n     * @notice Returns if `account` can perform the action `(baseActionId, specifier)` on target `where`.\n     * @dev This function differs from `_hasPermissionSpecificallyOrGenerally` as it *does* take into account whether\n     * there is a delay for the action associated with the permission being checked.\n     *\n     * The address `account` may have the permission associated with the provided action but that doesn't necessarily\n     * mean that it may perform that action. If there is no delay associated with this action, `account` may perform the\n     * action directly. If there is a delay, then `account` is instead able to schedule that action to be performed\n     * at a later date.\n     *\n     * This function only returns true only in the first case (except for actions performed by the authorizer timelock).\n     */\n    function _canPerformSpecificallyOrGenerally(\n        bytes32 baseActionId,\n        address account,\n        address where,\n        bytes32 specifier\n    ) internal view returns (bool) {\n        // If there is a delay defined for the specific action ID, then the sender must be the authorizer (scheduled\n        // execution)\n        bytes32 specificActionId = getExtendedActionId(baseActionId, specifier);\n        if (_delaysPerActionId[specificActionId] > 0) {\n            return account == address(_executor);\n        }\n\n        // If there is no delay, we check if the account has that permission\n        if (hasPermission(specificActionId, account, where)) {\n            return true;\n        }\n\n        // If the account doesn't have the explicit permission, we repeat for the general permission\n        bytes32 generalActionId = getExtendedActionId(baseActionId, GENERAL_PERMISSION_SPECIFIER);\n        return canPerform(generalActionId, account, where);\n    }\n\n    /**\n     * @dev Sets the root address to `root`.\n     */\n    function _setRoot(address root) internal {\n        _root = root;\n        emit RootSet(root);\n    }\n\n    /**\n     * @dev Sets the pending root address to `pendingRoot`.\n     */\n    function _setPendingRoot(address pendingRoot) internal {\n        _pendingRoot = pendingRoot;\n        emit PendingRootSet(pendingRoot);\n    }\n\n    function _decodeSelector(bytes memory data) internal pure returns (bytes4) {\n        // The bytes4 type is left-aligned and padded with zeros: we make use of that property to build the selector\n        if (data.length < 4) return bytes4(0);\n        return bytes4(data[0]) | (bytes4(data[1]) >> 8) | (bytes4(data[2]) >> 16) | (bytes4(data[3]) >> 24);\n    }\n\n    function _ar(bytes32 item) private pure returns (bytes32[] memory result) {\n        result = new bytes32[](1);\n        result[0] = item;\n    }\n\n    function _ar(address item) private pure returns (address[] memory result) {\n        result = new address[](1);\n        result[0] = item;\n    }\n}\n"
			},
			"contracts/test/MockAssetTransfersHandler.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\";\n\nimport \"../AssetTransfersHandler.sol\";\n\ncontract MockAssetTransfersHandler is AssetTransfersHandler {\n    using Math for uint256;\n    using SafeERC20 for IERC20;\n\n    mapping(address => mapping(IERC20 => uint256)) private _internalTokenBalance;\n\n    constructor(IWETH weth) AssetHelpers(weth) {}\n\n    function receiveAsset(\n        IAsset asset,\n        uint256 amount,\n        address sender,\n        bool fromInternalBalance\n    ) external payable {\n        _receiveAsset(asset, amount, sender, fromInternalBalance);\n    }\n\n    function sendAsset(\n        IAsset asset,\n        uint256 amount,\n        address payable recipient,\n        bool toInternalBalance\n    ) external {\n        _sendAsset(asset, amount, recipient, toInternalBalance);\n    }\n\n    function getInternalBalance(address account, IERC20 token) external view returns (uint256) {\n        return _internalTokenBalance[account][token];\n    }\n\n    function depositToInternalBalance(\n        address account,\n        IERC20 token,\n        uint256 amount\n    ) external {\n        token.safeTransferFrom(account, address(this), amount);\n        _increaseInternalBalance(account, token, amount);\n    }\n\n    function _increaseInternalBalance(\n        address account,\n        IERC20 token,\n        uint256 amount\n    ) internal override {\n        _internalTokenBalance[account][token] += amount;\n    }\n\n    function _decreaseInternalBalance(\n        address account,\n        IERC20 token,\n        uint256 amount,\n        bool capped\n    ) internal override returns (uint256 deducted) {\n        uint256 currentBalance = _internalTokenBalance[account][token];\n        deducted = capped ? Math.min(currentBalance, amount) : amount;\n        _internalTokenBalance[account][token] = currentBalance.sub(deducted);\n    }\n}\n"
			},
			"contracts/test/MockPool.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\";\n\ncontract MockPool is IGeneralPool, IMinimalSwapInfoPool {\n    using FixedPoint for uint256;\n\n    IVault private immutable _vault;\n    bytes32 private immutable _poolId;\n\n    constructor(IVault vault, IVault.PoolSpecialization specialization) {\n        _poolId = vault.registerPool(specialization);\n        _vault = vault;\n    }\n\n    function getVault() external view returns (IVault) {\n        return _vault;\n    }\n\n    function getPoolId() public view override returns (bytes32) {\n        return _poolId;\n    }\n\n    function getSwapFeePercentage() external pure override returns (uint256) {\n        return 0;\n    }\n\n    function getScalingFactors() external pure override returns (uint256[] memory) {\n        return new uint256[](0);\n    }\n\n    function registerTokens(IERC20[] memory tokens, address[] memory assetManagers) external {\n        _vault.registerTokens(_poolId, tokens, assetManagers);\n    }\n\n    function deregisterTokens(IERC20[] memory tokens) external {\n        _vault.deregisterTokens(_poolId, tokens);\n    }\n\n    event OnJoinPoolCalled(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] currentBalances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes userData\n    );\n\n    event OnExitPoolCalled(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] currentBalances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes userData\n    );\n\n    function onJoinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory currentBalances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) external override returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts) {\n        emit OnJoinPoolCalled(\n            poolId,\n            sender,\n            recipient,\n            currentBalances,\n            lastChangeBlock,\n            protocolSwapFeePercentage,\n            userData\n        );\n\n        (amountsIn, dueProtocolFeeAmounts) = abi.decode(userData, (uint256[], uint256[]));\n    }\n\n    function onExitPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory currentBalances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) external override returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts) {\n        emit OnExitPoolCalled(\n            poolId,\n            sender,\n            recipient,\n            currentBalances,\n            lastChangeBlock,\n            protocolSwapFeePercentage,\n            userData\n        );\n\n        (amountsOut, dueProtocolFeeAmounts) = abi.decode(userData, (uint256[], uint256[]));\n    }\n\n    // Amounts in are multiplied by the multiplier, amounts out are divided by it\n    uint256 private _multiplier = FixedPoint.ONE;\n\n    function setMultiplier(uint256 newMultiplier) external {\n        _multiplier = newMultiplier;\n    }\n\n    // IGeneralPool\n    function onSwap(\n        SwapRequest memory swapRequest,\n        uint256[] memory,\n        uint256,\n        uint256\n    ) external view override returns (uint256 amount) {\n        return\n            swapRequest.kind == IVault.SwapKind.GIVEN_IN\n                ? swapRequest.amount.mulDown(_multiplier)\n                : swapRequest.amount.divDown(_multiplier);\n    }\n\n    // IMinimalSwapInfoPool\n    function onSwap(\n        SwapRequest memory swapRequest,\n        uint256,\n        uint256\n    ) external view override returns (uint256) {\n        return\n            swapRequest.kind == IVault.SwapKind.GIVEN_IN\n                ? swapRequest.amount.mulDown(_multiplier)\n                : swapRequest.amount.divDown(_multiplier);\n    }\n\n    function queryJoin(\n        bytes32,\n        address,\n        address,\n        uint256[] memory,\n        uint256,\n        uint256,\n        bytes memory\n    ) external pure override returns (uint256, uint256[] memory) {\n        return (0, new uint256[](0));\n    }\n\n    function queryExit(\n        bytes32,\n        address,\n        address,\n        uint256[] memory,\n        uint256,\n        uint256,\n        bytes memory\n    ) external pure override returns (uint256, uint256[] memory) {\n        return (0, new uint256[](0));\n    }\n}\n"
			},
			"contracts/test/MockInternalBalanceRelayer.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\";\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\";\n\ncontract MockInternalBalanceRelayer {\n    IVault public vault;\n\n    constructor(IVault _vault) {\n        vault = _vault;\n    }\n\n    function depositAndWithdraw(\n        address payable sender,\n        IAsset asset,\n        uint256[] memory depositAmounts,\n        uint256[] memory withdrawAmounts\n    ) public {\n        InputHelpers.ensureInputLengthMatch(depositAmounts.length, withdrawAmounts.length);\n        for (uint256 i = 0; i < depositAmounts.length; i++) {\n            IVault.UserBalanceOp[] memory deposit = _buildUserBalanceOp(\n                IVault.UserBalanceOpKind.DEPOSIT_INTERNAL,\n                sender,\n                asset,\n                depositAmounts[i]\n            );\n            vault.manageUserBalance(deposit);\n\n            IVault.UserBalanceOp[] memory withdraw = _buildUserBalanceOp(\n                IVault.UserBalanceOpKind.WITHDRAW_INTERNAL,\n                sender,\n                asset,\n                withdrawAmounts[i]\n            );\n            vault.manageUserBalance(withdraw);\n        }\n    }\n\n    function _buildUserBalanceOp(\n        IVault.UserBalanceOpKind kind,\n        address payable sender,\n        IAsset asset,\n        uint256 amount\n    ) internal pure returns (IVault.UserBalanceOp[] memory ops) {\n        ops = new IVault.UserBalanceOp[](1);\n        ops[0] = IVault.UserBalanceOp({ asset: asset, amount: amount, sender: sender, recipient: sender, kind: kind });\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": ["abi", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers", "metadata"],
					"": ["ast"]
				}
			}
		}
	},
	"output": {
		"errors": [{
			"component": "general",
			"errorCode": "2018",
			"formattedMessage": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol:77:5: Warning: Function state mutability can be restricted to pure\n    function _getChainId() private view returns (uint256 chainId) {\n    ^ (Relevant source part starts here and spans across multiple lines).\n",
			"message": "Function state mutability can be restricted to pure",
			"severity": "warning",
			"sourceLocation": {
				"file": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol",
				"start": 3433,
				"end": 3620
			},
			"type": "Warning"
		}, {
			"component": "general",
			"errorCode": null,
			"formattedMessage": "\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are using 'ecrecover' to validate a signature of a user account.      │\n│ zkSync 2.0 will come with the native account abstraction support. It is highly recommended NOT   │\n│ to rely on the fact that the account has an ECDSA private key attached to it, since they may be  │\n│ ruled by a multisig and use another signature scheme. You can read more about how you can get    │\n│ ready for the future launch of AA here:                                                          │\n│ https://v2-docs.zksync.io/dev/zksync-v2/aa.html#important-account-abstraction-support            │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> @balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol\n",
			"message": "\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are using 'ecrecover' to validate a signature of a user account.      │\n│ zkSync 2.0 will come with the native account abstraction support. It is highly recommended NOT   │\n│ to rely on the fact that the account has an ECDSA private key attached to it, since they may be  │\n│ ruled by a multisig and use another signature scheme. You can read more about how you can get    │\n│ ready for the future launch of AA here:                                                          │\n│ https://v2-docs.zksync.io/dev/zksync-v2/aa.html#important-account-abstraction-support            │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘",
			"severity": "warning",
			"sourceLocation": {
				"file": "19",
				"start": 3579,
				"end": 3605
			},
			"type": "Warning"
		}, {
			"component": "general",
			"errorCode": null,
			"formattedMessage": "\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like your code or one of its dependencies uses the 'extcodesize' instruction.  │\n│ It is usually used in the following cases:                                                       │\n│     1. To detect whether an address belongs to a smart contract.                                 │\n│     2. To detect whether the deploy code execution has finished.                                 │\n│ zkSync 2.0 will support the account abstraction by default (so every account will be a smart     │\n│ contract, even private-key controlled EOAs). So none of the use-cases above will work.           │\n│ Please do your best to avoid differentiating between contracts and non-contracts.                │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> @balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol\n",
			"message": "\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like your code or one of its dependencies uses the 'extcodesize' instruction.  │\n│ It is usually used in the following cases:                                                       │\n│     1. To detect whether an address belongs to a smart contract.                                 │\n│     2. To detect whether the deploy code execution has finished.                                 │\n│ zkSync 2.0 will support the account abstraction by default (so every account will be a smart     │\n│ contract, even private-key controlled EOAs). So none of the use-cases above will work.           │\n│ Please do your best to avoid differentiating between contracts and non-contracts.                │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘",
			"severity": "warning",
			"sourceLocation": {
				"file": "27",
				"start": 1403,
				"end": 1423
			},
			"type": "Warning"
		}],
		"version": "0.7.1",
		"long_version": "0.7.1+commit.f4a555be.Darwin.appleclang",
		"zk_version": "1.2.0",
		"sources": {},
		"contracts": {
			"@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol": {
				"IAuthorizerAdaptor": {
					"abi": [{
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getVault",
						"outputs": [{
							"internalType": "contract IVault",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "target",
							"type": "address"
						}, {
							"internalType": "bytes",
							"name": "data",
							"type": "bytes"
						}],
						"name": "performAction",
						"outputs": [{
							"internalType": "bytes",
							"name": "",
							"type": "bytes"
						}],
						"stateMutability": "payable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol": {
				"Errors": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": "000000010120018f000000000110004c000000040000c13d005b00070000040f005b00050000040f0000000101000039005b00290000040f00020000000000020000000001000410000080020210008c000000220000613d0000000002000411000080010220008c000000220000613d0000001802000041000000000020043900000004020000390000000000120439000000190100004100008002020000390000000003000415000000020330008a00000020033000c9005b00420000040f000000ff01000039000000010110024f000000000110004c000000270000613d000000020100035f000000000101043b000000000110004c000000220000c13d00000000010000190000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d0001043000000000010000190000005d00010430000000000110004c0000003d0000613d0000000b0100003900000000020104330000001a022001970000001b022001c700000000002104350000000002000410000000000020043500000000020104330000001a022001970000001b022001c70000000000210435000000200100003900000100020000390000000000120439000001200100003900000000000104390000001c010000410000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d000104300002000000000002000200000003001d0000002003300039000100000003001d00000051002104230000000203000029000000200230011a00000000020103550000001e010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000001d010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000005b000004320000005c0001042e0000005d00010430000000000000000100000000000000011806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b83020002000000000000000000000000000000002400000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff730000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"
						}
					},
					"factoryDependencies": {},
					"hash": "0100001f3343be38db229b61d7a08448654e1fa2fd20c5a6d1bf409fdcbb3e57"
				}
			},
			"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol": {
				"IAuthentication": {
					"abi": [{
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol": {
				"ISignaturesValidator": {
					"abi": [{
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol": {
				"ITemporarilyPausable": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "PausedStateChanged",
						"type": "event"
					}, {
						"inputs": [],
						"name": "getPausedState",
						"outputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}, {
							"internalType": "uint256",
							"name": "pauseWindowEndTime",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "bufferPeriodEndTime",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol": {
				"IWETH": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}],
						"name": "Approval",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "from",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "to",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}],
						"name": "Transfer",
						"type": "event"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}],
						"name": "allowance",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "approve",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "balanceOf",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "deposit",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "totalSupply",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "transfer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "transferFrom",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "withdraw",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol": {
				"IERC20": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}],
						"name": "Approval",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "from",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "to",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}],
						"name": "Transfer",
						"type": "event"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}],
						"name": "allowance",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "approve",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "balanceOf",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "totalSupply",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "transfer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "transferFrom",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [{
						"inputs": [],
						"name": "DOMAIN_SEPARATOR",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}],
						"name": "nonces",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}, {
							"internalType": "uint8",
							"name": "v",
							"type": "uint8"
						}, {
							"internalType": "bytes32",
							"name": "r",
							"type": "bytes32"
						}, {
							"internalType": "bytes32",
							"name": "s",
							"type": "bytes32"
						}],
						"name": "permit",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol": {
				"IAsset": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol": {
				"IAuthorizer": {
					"abi": [{
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "where",
							"type": "address"
						}],
						"name": "canPerform",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol": {
				"IBasePool": {
					"abi": [{
						"inputs": [],
						"name": "getPoolId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getScalingFactors",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getSwapFeePercentage",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "protocolSwapFeePercentage",
							"type": "uint256"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "onExitPool",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "amountsOut",
							"type": "uint256[]"
						}, {
							"internalType": "uint256[]",
							"name": "dueProtocolFeeAmounts",
							"type": "uint256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "protocolSwapFeePercentage",
							"type": "uint256"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "onJoinPool",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "amountsIn",
							"type": "uint256[]"
						}, {
							"internalType": "uint256[]",
							"name": "dueProtocolFeeAmounts",
							"type": "uint256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "protocolSwapFeePercentage",
							"type": "uint256"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "queryExit",
						"outputs": [{
							"internalType": "uint256",
							"name": "bptIn",
							"type": "uint256"
						}, {
							"internalType": "uint256[]",
							"name": "amountsOut",
							"type": "uint256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "protocolSwapFeePercentage",
							"type": "uint256"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "queryJoin",
						"outputs": [{
							"internalType": "uint256",
							"name": "bptOut",
							"type": "uint256"
						}, {
							"internalType": "uint256[]",
							"name": "amountsIn",
							"type": "uint256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IBasicAuthorizer.sol": {
				"IBasicAuthorizer": {
					"abi": [{
						"inputs": [],
						"name": "DEFAULT_ADMIN_ROLE",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "where",
							"type": "address"
						}],
						"name": "canPerform",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}],
						"name": "getRoleAdmin",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"internalType": "uint256",
							"name": "index",
							"type": "uint256"
						}],
						"name": "getRoleMember",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}],
						"name": "getRoleMemberCount",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol": {
				"IFlashLoanRecipient": {
					"abi": [{
						"inputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "amounts",
							"type": "uint256[]"
						}, {
							"internalType": "uint256[]",
							"name": "feeAmounts",
							"type": "uint256[]"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "receiveFlashLoan",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol": {
				"IGeneralPool": {
					"abi": [{
						"inputs": [],
						"name": "getPoolId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getScalingFactors",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getSwapFeePercentage",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "protocolSwapFeePercentage",
							"type": "uint256"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "onExitPool",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "amountsOut",
							"type": "uint256[]"
						}, {
							"internalType": "uint256[]",
							"name": "dueProtocolFeeAmounts",
							"type": "uint256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "protocolSwapFeePercentage",
							"type": "uint256"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "onJoinPool",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "amountsIn",
							"type": "uint256[]"
						}, {
							"internalType": "uint256[]",
							"name": "dueProtocolFeeAmounts",
							"type": "uint256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IERC20",
								"name": "tokenIn",
								"type": "address"
							}, {
								"internalType": "contract IERC20",
								"name": "tokenOut",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "lastChangeBlock",
								"type": "uint256"
							}, {
								"internalType": "address",
								"name": "from",
								"type": "address"
							}, {
								"internalType": "address",
								"name": "to",
								"type": "address"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IPoolSwapStructs.SwapRequest",
							"name": "swapRequest",
							"type": "tuple"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "indexIn",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "indexOut",
							"type": "uint256"
						}],
						"name": "onSwap",
						"outputs": [{
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "protocolSwapFeePercentage",
							"type": "uint256"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "queryExit",
						"outputs": [{
							"internalType": "uint256",
							"name": "bptIn",
							"type": "uint256"
						}, {
							"internalType": "uint256[]",
							"name": "amountsOut",
							"type": "uint256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "protocolSwapFeePercentage",
							"type": "uint256"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "queryJoin",
						"outputs": [{
							"internalType": "uint256",
							"name": "bptOut",
							"type": "uint256"
						}, {
							"internalType": "uint256[]",
							"name": "amountsIn",
							"type": "uint256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol": {
				"IMinimalSwapInfoPool": {
					"abi": [{
						"inputs": [],
						"name": "getPoolId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getScalingFactors",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getSwapFeePercentage",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "protocolSwapFeePercentage",
							"type": "uint256"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "onExitPool",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "amountsOut",
							"type": "uint256[]"
						}, {
							"internalType": "uint256[]",
							"name": "dueProtocolFeeAmounts",
							"type": "uint256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "protocolSwapFeePercentage",
							"type": "uint256"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "onJoinPool",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "amountsIn",
							"type": "uint256[]"
						}, {
							"internalType": "uint256[]",
							"name": "dueProtocolFeeAmounts",
							"type": "uint256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IERC20",
								"name": "tokenIn",
								"type": "address"
							}, {
								"internalType": "contract IERC20",
								"name": "tokenOut",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "lastChangeBlock",
								"type": "uint256"
							}, {
								"internalType": "address",
								"name": "from",
								"type": "address"
							}, {
								"internalType": "address",
								"name": "to",
								"type": "address"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IPoolSwapStructs.SwapRequest",
							"name": "swapRequest",
							"type": "tuple"
						}, {
							"internalType": "uint256",
							"name": "currentBalanceTokenIn",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "currentBalanceTokenOut",
							"type": "uint256"
						}],
						"name": "onSwap",
						"outputs": [{
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "protocolSwapFeePercentage",
							"type": "uint256"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "queryExit",
						"outputs": [{
							"internalType": "uint256",
							"name": "bptIn",
							"type": "uint256"
						}, {
							"internalType": "uint256[]",
							"name": "amountsOut",
							"type": "uint256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "protocolSwapFeePercentage",
							"type": "uint256"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "queryJoin",
						"outputs": [{
							"internalType": "uint256",
							"name": "bptOut",
							"type": "uint256"
						}, {
							"internalType": "uint256[]",
							"name": "amountsIn",
							"type": "uint256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol": {
				"IPoolSwapStructs": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol": {
				"IProtocolFeesCollector": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "uint256",
							"name": "newFlashLoanFeePercentage",
							"type": "uint256"
						}],
						"name": "FlashLoanFeePercentageChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "uint256",
							"name": "newSwapFeePercentage",
							"type": "uint256"
						}],
						"name": "SwapFeePercentageChanged",
						"type": "event"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "getCollectedFeeAmounts",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "feeAmounts",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getFlashLoanFeePercentage",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getSwapFeePercentage",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "uint256",
							"name": "newFlashLoanFeePercentage",
							"type": "uint256"
						}],
						"name": "setFlashLoanFeePercentage",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "uint256",
							"name": "newSwapFeePercentage",
							"type": "uint256"
						}],
						"name": "setSwapFeePercentage",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "vault",
						"outputs": [{
							"internalType": "contract IVault",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "amounts",
							"type": "uint256[]"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}],
						"name": "withdrawCollectedFees",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol": {
				"IVault": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "AuthorizerChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "ExternalBalanceTransfer",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "feeAmount",
							"type": "uint256"
						}],
						"name": "FlashLoan",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "delta",
							"type": "int256"
						}],
						"name": "InternalBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "PausedStateChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "liquidityProvider",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "int256[]",
							"name": "deltas",
							"type": "int256[]"
						}, {
							"indexed": false,
							"internalType": "uint256[]",
							"name": "protocolFeeAmounts",
							"type": "uint256[]"
						}],
						"name": "PoolBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "cashDelta",
							"type": "int256"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "managedDelta",
							"type": "int256"
						}],
						"name": "PoolBalanceManaged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "poolAddress",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "PoolRegistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "RelayerApprovalChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenIn",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenOut",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountIn",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountOut",
							"type": "uint256"
						}],
						"name": "Swap",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "TokensDeregistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "TokensRegistered",
						"type": "event"
					}, {
						"inputs": [],
						"name": "WETH",
						"outputs": [{
							"internalType": "contract IWETH",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "int256[]",
							"name": "limits",
							"type": "int256[]"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "batchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "",
							"type": "int256[]"
						}],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "deregisterTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address payable",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "minAmountsOut",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.ExitPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "exitPool",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "amounts",
							"type": "uint256[]"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "flashLoan",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "getInternalBalance",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getPausedState",
						"outputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}, {
							"internalType": "uint256",
							"name": "pauseWindowEndTime",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "bufferPeriodEndTime",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPool",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}, {
							"internalType": "enum IVault.PoolSpecialization",
							"name": "",
							"type": "uint8"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}],
						"name": "getPoolTokenInfo",
						"outputs": [{
							"internalType": "uint256",
							"name": "cash",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "managed",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPoolTokens",
						"outputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getProtocolFeesCollector",
						"outputs": [{
							"internalType": "contract IProtocolFeesCollector",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}],
						"name": "hasApprovedRelayer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "maxAmountsIn",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.JoinPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "joinPool",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.PoolBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "contract IERC20",
								"name": "token",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}],
							"internalType": "struct IVault.PoolBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "managePoolBalance",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.UserBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "asset",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}],
							"internalType": "struct IVault.UserBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "manageUserBalance",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}],
						"name": "queryBatchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "assetDeltas",
							"type": "int256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "registerPool",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "registerTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "setAuthorizer",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "setPaused",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "setRelayerApproval",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "assetIn",
								"type": "address"
							}, {
								"internalType": "contract IAsset",
								"name": "assetOut",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.SingleSwap",
							"name": "singleSwap",
							"type": "tuple"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "uint256",
							"name": "limit",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "swap",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "payable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol": {
				"Authentication": {
					"abi": [{
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol": {
				"EOASignaturesValidator": {
					"abi": [{
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol": {
				"ExtraCalldataEOASignaturesValidator": {
					"abi": [{
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol": {
				"InputHelpers": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": "000000010120018f000000000110004c000000040000c13d005b00070000040f005b00050000040f0000000101000039005b00290000040f00020000000000020000000001000410000080020210008c000000220000613d0000000002000411000080010220008c000000220000613d0000001802000041000000000020043900000004020000390000000000120439000000190100004100008002020000390000000003000415000000020330008a00000020033000c9005b00420000040f000000ff01000039000000010110024f000000000110004c000000270000613d000000020100035f000000000101043b000000000110004c000000220000c13d00000000010000190000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d0001043000000000010000190000005d00010430000000000110004c0000003d0000613d0000000b0100003900000000020104330000001a022001970000001b022001c700000000002104350000000002000410000000000020043500000000020104330000001a022001970000001b022001c70000000000210435000000200100003900000100020000390000000000120439000001200100003900000000000104390000001c010000410000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d000104300002000000000002000200000003001d0000002003300039000100000003001d00000051002104230000000203000029000000200230011a00000000020103550000001e010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000001d010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000005b000004320000005c0001042e0000005d00010430000000000000000100000000000000011806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b83020002000000000000000000000000000000002400000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff730000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"
						}
					},
					"factoryDependencies": {},
					"hash": "0100001f3343be38db229b61d7a08448654e1fa2fd20c5a6d1bf409fdcbb3e57"
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol": {
				"SingletonAuthentication": {
					"abi": [{
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getVault",
						"outputs": [{
							"internalType": "contract IVault",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol": {
				"TemporarilyPausable": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "PausedStateChanged",
						"type": "event"
					}, {
						"inputs": [],
						"name": "getPausedState",
						"outputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}, {
							"internalType": "uint256",
							"name": "pauseWindowEndTime",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "bufferPeriodEndTime",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol": {
				"FixedPoint": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": "000000010120018f000000000110004c000000040000c13d005b00070000040f005b00050000040f0000000101000039005b00290000040f00020000000000020000000001000410000080020210008c000000220000613d0000000002000411000080010220008c000000220000613d0000001802000041000000000020043900000004020000390000000000120439000000190100004100008002020000390000000003000415000000020330008a00000020033000c9005b00420000040f000000ff01000039000000010110024f000000000110004c000000270000613d000000020100035f000000000101043b000000000110004c000000220000c13d00000000010000190000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d0001043000000000010000190000005d00010430000000000110004c0000003d0000613d0000000b0100003900000000020104330000001a022001970000001b022001c700000000002104350000000002000410000000000020043500000000020104330000001a022001970000001b022001c70000000000210435000000200100003900000100020000390000000000120439000001200100003900000000000104390000001c010000410000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d000104300002000000000002000200000003001d0000002003300039000100000003001d00000051002104230000000203000029000000200230011a00000000020103550000001e010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000001d010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000005b000004320000005c0001042e0000005d00010430000000000000000100000000000000011806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b83020002000000000000000000000000000000002400000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff730000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"
						}
					},
					"factoryDependencies": {},
					"hash": "0100001f3343be38db229b61d7a08448654e1fa2fd20c5a6d1bf409fdcbb3e57"
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol": {
				"LogExpMath": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": "000000010120018f000000000110004c000000040000c13d005b00070000040f005b00050000040f0000000101000039005b00290000040f00020000000000020000000001000410000080020210008c000000220000613d0000000002000411000080010220008c000000220000613d0000001802000041000000000020043900000004020000390000000000120439000000190100004100008002020000390000000003000415000000020330008a00000020033000c9005b00420000040f000000ff01000039000000010110024f000000000110004c000000270000613d000000020100035f000000000101043b000000000110004c000000220000c13d00000000010000190000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d0001043000000000010000190000005d00010430000000000110004c0000003d0000613d0000000b0100003900000000020104330000001a022001970000001b022001c700000000002104350000000002000410000000000020043500000000020104330000001a022001970000001b022001c70000000000210435000000200100003900000100020000390000000000120439000001200100003900000000000104390000001c010000410000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d000104300002000000000002000200000003001d0000002003300039000100000003001d00000051002104230000000203000029000000200230011a00000000020103550000001e010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000001d010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000005b000004320000005c0001042e0000005d00010430000000000000000100000000000000011806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b83020002000000000000000000000000000000002400000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff730000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"
						}
					},
					"factoryDependencies": {},
					"hash": "0100001f3343be38db229b61d7a08448654e1fa2fd20c5a6d1bf409fdcbb3e57"
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol": {
				"Math": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": "000000010120018f000000000110004c000000040000c13d005b00070000040f005b00050000040f0000000101000039005b00290000040f00020000000000020000000001000410000080020210008c000000220000613d0000000002000411000080010220008c000000220000613d0000001802000041000000000020043900000004020000390000000000120439000000190100004100008002020000390000000003000415000000020330008a00000020033000c9005b00420000040f000000ff01000039000000010110024f000000000110004c000000270000613d000000020100035f000000000101043b000000000110004c000000220000c13d00000000010000190000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d0001043000000000010000190000005d00010430000000000110004c0000003d0000613d0000000b0100003900000000020104330000001a022001970000001b022001c700000000002104350000000002000410000000000020043500000000020104330000001a022001970000001b022001c70000000000210435000000200100003900000100020000390000000000120439000001200100003900000000000104390000001c010000410000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d000104300002000000000002000200000003001d0000002003300039000100000003001d00000051002104230000000203000029000000200230011a00000000020103550000001e010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000001d010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000005b000004320000005c0001042e0000005d00010430000000000000000100000000000000011806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b83020002000000000000000000000000000000002400000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff730000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"
						}
					},
					"factoryDependencies": {},
					"hash": "0100001f3343be38db229b61d7a08448654e1fa2fd20c5a6d1bf409fdcbb3e57"
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol": {
				"Address": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": "000000010120018f000000000110004c000000040000c13d005b00070000040f005b00050000040f0000000101000039005b00290000040f00020000000000020000000001000410000080020210008c000000220000613d0000000002000411000080010220008c000000220000613d0000001802000041000000000020043900000004020000390000000000120439000000190100004100008002020000390000000003000415000000020330008a00000020033000c9005b00420000040f000000ff01000039000000010110024f000000000110004c000000270000613d000000020100035f000000000101043b000000000110004c000000220000c13d00000000010000190000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d0001043000000000010000190000005d00010430000000000110004c0000003d0000613d0000000b0100003900000000020104330000001a022001970000001b022001c700000000002104350000000002000410000000000020043500000000020104330000001a022001970000001b022001c70000000000210435000000200100003900000100020000390000000000120439000001200100003900000000000104390000001c010000410000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d000104300002000000000002000200000003001d0000002003300039000100000003001d00000051002104230000000203000029000000200230011a00000000020103550000001e010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000001d010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000005b000004320000005c0001042e0000005d00010430000000000000000100000000000000011806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b83020002000000000000000000000000000000002400000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff730000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"
						}
					},
					"factoryDependencies": {},
					"hash": "0100001f3343be38db229b61d7a08448654e1fa2fd20c5a6d1bf409fdcbb3e57"
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol": {
				"EIP712": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol": {
				"ERC20": {
					"abi": [{
						"inputs": [{
							"internalType": "string",
							"name": "name_",
							"type": "string"
						}, {
							"internalType": "string",
							"name": "symbol_",
							"type": "string"
						}],
						"stateMutability": "nonpayable",
						"type": "constructor"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}],
						"name": "Approval",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "from",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "to",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}],
						"name": "Transfer",
						"type": "event"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}],
						"name": "allowance",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "approve",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "balanceOf",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "decimals",
						"outputs": [{
							"internalType": "uint8",
							"name": "",
							"type": "uint8"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "subtractedValue",
							"type": "uint256"
						}],
						"name": "decreaseAllowance",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "addedValue",
							"type": "uint256"
						}],
						"name": "increaseAllowance",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "name",
						"outputs": [{
							"internalType": "string",
							"name": "",
							"type": "string"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "symbol",
						"outputs": [{
							"internalType": "string",
							"name": "",
							"type": "string"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "totalSupply",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "transfer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "transferFrom",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": ""
						}
					},
					"factoryDependencies": {},
					"hash": "01000245e4ebb4b15a81f78b5eb87ae94db8d95412f4f54fd2d9227805ed8841"
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Burnable.sol": {
				"ERC20Burnable": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}],
						"name": "Approval",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "from",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "to",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}],
						"name": "Transfer",
						"type": "event"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}],
						"name": "allowance",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "approve",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "balanceOf",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "burn",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "burnFrom",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "decimals",
						"outputs": [{
							"internalType": "uint8",
							"name": "",
							"type": "uint8"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "subtractedValue",
							"type": "uint256"
						}],
						"name": "decreaseAllowance",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "addedValue",
							"type": "uint256"
						}],
						"name": "increaseAllowance",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "name",
						"outputs": [{
							"internalType": "string",
							"name": "",
							"type": "string"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "symbol",
						"outputs": [{
							"internalType": "string",
							"name": "",
							"type": "string"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "totalSupply",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "transfer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "transferFrom",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol": {
				"ERC20Permit": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}],
						"name": "Approval",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "from",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "to",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}],
						"name": "Transfer",
						"type": "event"
					}, {
						"inputs": [],
						"name": "DOMAIN_SEPARATOR",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}],
						"name": "allowance",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "approve",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "balanceOf",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "decimals",
						"outputs": [{
							"internalType": "uint8",
							"name": "",
							"type": "uint8"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "subtractedValue",
							"type": "uint256"
						}],
						"name": "decreaseAllowance",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "addedValue",
							"type": "uint256"
						}],
						"name": "increaseAllowance",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "name",
						"outputs": [{
							"internalType": "string",
							"name": "",
							"type": "string"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}],
						"name": "nonces",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}, {
							"internalType": "uint8",
							"name": "v",
							"type": "uint8"
						}, {
							"internalType": "bytes32",
							"name": "r",
							"type": "bytes32"
						}, {
							"internalType": "bytes32",
							"name": "s",
							"type": "bytes32"
						}],
						"name": "permit",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "symbol",
						"outputs": [{
							"internalType": "string",
							"name": "",
							"type": "string"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "totalSupply",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "transfer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "transferFrom",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableMap.sol": {
				"EnumerableMap": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": "000000010120018f000000000110004c000000040000c13d005b00070000040f005b00050000040f0000000101000039005b00290000040f00020000000000020000000001000410000080020210008c000000220000613d0000000002000411000080010220008c000000220000613d0000001802000041000000000020043900000004020000390000000000120439000000190100004100008002020000390000000003000415000000020330008a00000020033000c9005b00420000040f000000ff01000039000000010110024f000000000110004c000000270000613d000000020100035f000000000101043b000000000110004c000000220000c13d00000000010000190000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d0001043000000000010000190000005d00010430000000000110004c0000003d0000613d0000000b0100003900000000020104330000001a022001970000001b022001c700000000002104350000000002000410000000000020043500000000020104330000001a022001970000001b022001c70000000000210435000000200100003900000100020000390000000000120439000001200100003900000000000104390000001c010000410000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d000104300002000000000002000200000003001d0000002003300039000100000003001d00000051002104230000000203000029000000200230011a00000000020103550000001e010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000001d010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000005b000004320000005c0001042e0000005d00010430000000000000000100000000000000011806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b83020002000000000000000000000000000000002400000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff730000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"
						}
					},
					"factoryDependencies": {},
					"hash": "0100001f3343be38db229b61d7a08448654e1fa2fd20c5a6d1bf409fdcbb3e57"
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol": {
				"EnumerableSet": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": "000000010120018f000000000110004c000000040000c13d005b00070000040f005b00050000040f0000000101000039005b00290000040f00020000000000020000000001000410000080020210008c000000220000613d0000000002000411000080010220008c000000220000613d0000001802000041000000000020043900000004020000390000000000120439000000190100004100008002020000390000000003000415000000020330008a00000020033000c9005b00420000040f000000ff01000039000000010110024f000000000110004c000000270000613d000000020100035f000000000101043b000000000110004c000000220000c13d00000000010000190000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d0001043000000000010000190000005d00010430000000000110004c0000003d0000613d0000000b0100003900000000020104330000001a022001970000001b022001c700000000002104350000000002000410000000000020043500000000020104330000001a022001970000001b022001c70000000000210435000000200100003900000100020000390000000000120439000001200100003900000000000104390000001c010000410000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d000104300002000000000002000200000003001d0000002003300039000100000003001d00000051002104230000000203000029000000200230011a00000000020103550000001e010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000001d010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000005b000004320000005c0001042e0000005d00010430000000000000000100000000000000011806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b83020002000000000000000000000000000000002400000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff730000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"
						}
					},
					"factoryDependencies": {},
					"hash": "0100001f3343be38db229b61d7a08448654e1fa2fd20c5a6d1bf409fdcbb3e57"
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol": {
				"SafeCast": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": "000000010120018f000000000110004c000000040000c13d005b00070000040f005b00050000040f0000000101000039005b00290000040f00020000000000020000000001000410000080020210008c000000220000613d0000000002000411000080010220008c000000220000613d0000001802000041000000000020043900000004020000390000000000120439000000190100004100008002020000390000000003000415000000020330008a00000020033000c9005b00420000040f000000ff01000039000000010110024f000000000110004c000000270000613d000000020100035f000000000101043b000000000110004c000000220000c13d00000000010000190000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d0001043000000000010000190000005d00010430000000000110004c0000003d0000613d0000000b0100003900000000020104330000001a022001970000001b022001c700000000002104350000000002000410000000000020043500000000020104330000001a022001970000001b022001c70000000000210435000000200100003900000100020000390000000000120439000001200100003900000000000104390000001c010000410000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d000104300002000000000002000200000003001d0000002003300039000100000003001d00000051002104230000000203000029000000200230011a00000000020103550000001e010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000001d010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000005b000004320000005c0001042e0000005d00010430000000000000000100000000000000011806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b83020002000000000000000000000000000000002400000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff730000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"
						}
					},
					"factoryDependencies": {},
					"hash": "0100001f3343be38db229b61d7a08448654e1fa2fd20c5a6d1bf409fdcbb3e57"
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": "000000010120018f000000000110004c000000040000c13d005b00070000040f005b00050000040f0000000101000039005b00290000040f00020000000000020000000001000410000080020210008c000000220000613d0000000002000411000080010220008c000000220000613d0000001802000041000000000020043900000004020000390000000000120439000000190100004100008002020000390000000003000415000000020330008a00000020033000c9005b00420000040f000000ff01000039000000010110024f000000000110004c000000270000613d000000020100035f000000000101043b000000000110004c000000220000c13d00000000010000190000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d0001043000000000010000190000005d00010430000000000110004c0000003d0000613d0000000b0100003900000000020104330000001a022001970000001b022001c700000000002104350000000002000410000000000020043500000000020104330000001a022001970000001b022001c70000000000210435000000200100003900000100020000390000000000120439000001200100003900000000000104390000001c010000410000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d000104300002000000000002000200000003001d0000002003300039000100000003001d00000051002104230000000203000029000000200230011a00000000020103550000001e010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000001d010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000005b000004320000005c0001042e0000005d00010430000000000000000100000000000000011806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b83020002000000000000000000000000000000002400000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff730000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"
						}
					},
					"factoryDependencies": {},
					"hash": "0100001f3343be38db229b61d7a08448654e1fa2fd20c5a6d1bf409fdcbb3e57"
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": "000000010120018f000000000110004c000000040000c13d005b00070000040f005b00050000040f0000000101000039005b00290000040f00020000000000020000000001000410000080020210008c000000220000613d0000000002000411000080010220008c000000220000613d0000001802000041000000000020043900000004020000390000000000120439000000190100004100008002020000390000000003000415000000020330008a00000020033000c9005b00420000040f000000ff01000039000000010110024f000000000110004c000000270000613d000000020100035f000000000101043b000000000110004c000000220000c13d00000000010000190000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d0001043000000000010000190000005d00010430000000000110004c0000003d0000613d0000000b0100003900000000020104330000001a022001970000001b022001c700000000002104350000000002000410000000000020043500000000020104330000001a022001970000001b022001c70000000000210435000000200100003900000100020000390000000000120439000001200100003900000000000104390000001c010000410000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d000104300002000000000002000200000003001d0000002003300039000100000003001d00000051002104230000000203000029000000200230011a00000000020103550000001e010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000001d010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000005b000004320000005c0001042e0000005d00010430000000000000000100000000000000011806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b83020002000000000000000000000000000000002400000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff730000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"
						}
					},
					"factoryDependencies": {},
					"hash": "0100001f3343be38db229b61d7a08448654e1fa2fd20c5a6d1bf409fdcbb3e57"
				}
			},
			"@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol": {
				"TestToken": {
					"abi": [{
						"inputs": [{
							"internalType": "string",
							"name": "name",
							"type": "string"
						}, {
							"internalType": "string",
							"name": "symbol",
							"type": "string"
						}, {
							"internalType": "uint8",
							"name": "decimals",
							"type": "uint8"
						}],
						"stateMutability": "nonpayable",
						"type": "constructor"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}],
						"name": "Approval",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "from",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "to",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}],
						"name": "Transfer",
						"type": "event"
					}, {
						"inputs": [],
						"name": "DOMAIN_SEPARATOR",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}],
						"name": "allowance",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "approve",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "balanceOf",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "burn",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "burnFrom",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "decimals",
						"outputs": [{
							"internalType": "uint8",
							"name": "",
							"type": "uint8"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "subtractedValue",
							"type": "uint256"
						}],
						"name": "decreaseAllowance",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "addedValue",
							"type": "uint256"
						}],
						"name": "increaseAllowance",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "mint",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "name",
						"outputs": [{
							"internalType": "string",
							"name": "",
							"type": "string"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}],
						"name": "nonces",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}, {
							"internalType": "uint8",
							"name": "v",
							"type": "uint8"
						}, {
							"internalType": "bytes32",
							"name": "r",
							"type": "bytes32"
						}, {
							"internalType": "bytes32",
							"name": "s",
							"type": "bytes32"
						}],
						"name": "permit",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "symbol",
						"outputs": [{
							"internalType": "string",
							"name": "",
							"type": "string"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "totalSupply",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "transfer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "transferFrom",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": ""
						}
					},
					"factoryDependencies": {},
					"hash": "01000489d9ab2f6c36dda851e2dbb5f22aa5ee10a9c92fec53d089d7cc2c7e0a"
				}
			},
			"contracts/AccessControl.sol": {
				"AccessControl": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "bytes32",
							"name": "previousAdminRole",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "bytes32",
							"name": "newAdminRole",
							"type": "bytes32"
						}],
						"name": "RoleAdminChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}],
						"name": "RoleGranted",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}],
						"name": "RoleRevoked",
						"type": "event"
					}, {
						"inputs": [],
						"name": "DEFAULT_ADMIN_ROLE",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}],
						"name": "getRoleAdmin",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"internalType": "uint256",
							"name": "index",
							"type": "uint256"
						}],
						"name": "getRoleMember",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}],
						"name": "getRoleMemberCount",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "grantRole",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "hasRole",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "renounceRole",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "revokeRole",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"contracts/AssetHelpers.sol": {
				"AssetHelpers": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"contracts/AssetManagers.sol": {
				"AssetManagers": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "AuthorizerChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "ExternalBalanceTransfer",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "feeAmount",
							"type": "uint256"
						}],
						"name": "FlashLoan",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "delta",
							"type": "int256"
						}],
						"name": "InternalBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "PausedStateChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "liquidityProvider",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "int256[]",
							"name": "deltas",
							"type": "int256[]"
						}, {
							"indexed": false,
							"internalType": "uint256[]",
							"name": "protocolFeeAmounts",
							"type": "uint256[]"
						}],
						"name": "PoolBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "cashDelta",
							"type": "int256"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "managedDelta",
							"type": "int256"
						}],
						"name": "PoolBalanceManaged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "poolAddress",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "PoolRegistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "RelayerApprovalChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenIn",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenOut",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountIn",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountOut",
							"type": "uint256"
						}],
						"name": "Swap",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "TokensDeregistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "TokensRegistered",
						"type": "event"
					}, {
						"inputs": [],
						"name": "WETH",
						"outputs": [{
							"internalType": "contract IWETH",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "int256[]",
							"name": "limits",
							"type": "int256[]"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "batchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "",
							"type": "int256[]"
						}],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "deregisterTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address payable",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "minAmountsOut",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.ExitPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "exitPool",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "amounts",
							"type": "uint256[]"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "flashLoan",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "getInternalBalance",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getPausedState",
						"outputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}, {
							"internalType": "uint256",
							"name": "pauseWindowEndTime",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "bufferPeriodEndTime",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPool",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}, {
							"internalType": "enum IVault.PoolSpecialization",
							"name": "",
							"type": "uint8"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}],
						"name": "getPoolTokenInfo",
						"outputs": [{
							"internalType": "uint256",
							"name": "cash",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "managed",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPoolTokens",
						"outputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getProtocolFeesCollector",
						"outputs": [{
							"internalType": "contract IProtocolFeesCollector",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}],
						"name": "hasApprovedRelayer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "maxAmountsIn",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.JoinPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "joinPool",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.PoolBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "contract IERC20",
								"name": "token",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}],
							"internalType": "struct IVault.PoolBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "managePoolBalance",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.UserBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "asset",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}],
							"internalType": "struct IVault.UserBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "manageUserBalance",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}],
						"name": "queryBatchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "assetDeltas",
							"type": "int256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "registerPool",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "registerTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "setAuthorizer",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "setPaused",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "setRelayerApproval",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "assetIn",
								"type": "address"
							}, {
								"internalType": "contract IAsset",
								"name": "assetOut",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.SingleSwap",
							"name": "singleSwap",
							"type": "tuple"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "uint256",
							"name": "limit",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "swap",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "payable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"contracts/AssetTransfersHandler.sol": {
				"AssetTransfersHandler": {
					"abi": [{
						"stateMutability": "payable",
						"type": "receive"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"contracts/Authorizer.sol": {
				"Authorizer": {
					"abi": [{
						"inputs": [{
							"internalType": "address",
							"name": "admin",
							"type": "address"
						}],
						"stateMutability": "nonpayable",
						"type": "constructor"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "bytes32",
							"name": "previousAdminRole",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "bytes32",
							"name": "newAdminRole",
							"type": "bytes32"
						}],
						"name": "RoleAdminChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}],
						"name": "RoleGranted",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}],
						"name": "RoleRevoked",
						"type": "event"
					}, {
						"inputs": [],
						"name": "DEFAULT_ADMIN_ROLE",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "",
							"type": "address"
						}],
						"name": "canPerform",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}],
						"name": "getRoleAdmin",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"internalType": "uint256",
							"name": "index",
							"type": "uint256"
						}],
						"name": "getRoleMember",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}],
						"name": "getRoleMemberCount",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "grantRole",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32[]",
							"name": "roles",
							"type": "bytes32[]"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "grantRoles",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32[]",
							"name": "roles",
							"type": "bytes32[]"
						}, {
							"internalType": "address[]",
							"name": "accounts",
							"type": "address[]"
						}],
						"name": "grantRolesToMany",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "hasRole",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "renounceRole",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "revokeRole",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32[]",
							"name": "roles",
							"type": "bytes32[]"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "revokeRoles",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32[]",
							"name": "roles",
							"type": "bytes32[]"
						}, {
							"internalType": "address[]",
							"name": "accounts",
							"type": "address[]"
						}],
						"name": "revokeRolesFromMany",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": ""
						}
					},
					"factoryDependencies": {},
					"hash": "0100045710fc9c77bc6634c14a989b66ed6d49c3e3a8438fe9e2552322ec7379"
				}
			},
			"contracts/Fees.sol": {
				"Fees": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "AuthorizerChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "ExternalBalanceTransfer",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "feeAmount",
							"type": "uint256"
						}],
						"name": "FlashLoan",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "delta",
							"type": "int256"
						}],
						"name": "InternalBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "PausedStateChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "liquidityProvider",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "int256[]",
							"name": "deltas",
							"type": "int256[]"
						}, {
							"indexed": false,
							"internalType": "uint256[]",
							"name": "protocolFeeAmounts",
							"type": "uint256[]"
						}],
						"name": "PoolBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "cashDelta",
							"type": "int256"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "managedDelta",
							"type": "int256"
						}],
						"name": "PoolBalanceManaged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "poolAddress",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "PoolRegistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "RelayerApprovalChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenIn",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenOut",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountIn",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountOut",
							"type": "uint256"
						}],
						"name": "Swap",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "TokensDeregistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "TokensRegistered",
						"type": "event"
					}, {
						"inputs": [],
						"name": "WETH",
						"outputs": [{
							"internalType": "contract IWETH",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "int256[]",
							"name": "limits",
							"type": "int256[]"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "batchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "",
							"type": "int256[]"
						}],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "deregisterTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address payable",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "minAmountsOut",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.ExitPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "exitPool",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "amounts",
							"type": "uint256[]"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "flashLoan",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "getInternalBalance",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getPausedState",
						"outputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}, {
							"internalType": "uint256",
							"name": "pauseWindowEndTime",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "bufferPeriodEndTime",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPool",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}, {
							"internalType": "enum IVault.PoolSpecialization",
							"name": "",
							"type": "uint8"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}],
						"name": "getPoolTokenInfo",
						"outputs": [{
							"internalType": "uint256",
							"name": "cash",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "managed",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPoolTokens",
						"outputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getProtocolFeesCollector",
						"outputs": [{
							"internalType": "contract IProtocolFeesCollector",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}],
						"name": "hasApprovedRelayer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "maxAmountsIn",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.JoinPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "joinPool",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.PoolBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "contract IERC20",
								"name": "token",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}],
							"internalType": "struct IVault.PoolBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "managePoolBalance",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.UserBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "asset",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}],
							"internalType": "struct IVault.UserBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "manageUserBalance",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}],
						"name": "queryBatchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "assetDeltas",
							"type": "int256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "registerPool",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "registerTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "setAuthorizer",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "setPaused",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "setRelayerApproval",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "assetIn",
								"type": "address"
							}, {
								"internalType": "contract IAsset",
								"name": "assetOut",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.SingleSwap",
							"name": "singleSwap",
							"type": "tuple"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "uint256",
							"name": "limit",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "swap",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "payable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"contracts/FlashLoans.sol": {
				"FlashLoans": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "AuthorizerChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "ExternalBalanceTransfer",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "feeAmount",
							"type": "uint256"
						}],
						"name": "FlashLoan",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "delta",
							"type": "int256"
						}],
						"name": "InternalBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "PausedStateChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "liquidityProvider",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "int256[]",
							"name": "deltas",
							"type": "int256[]"
						}, {
							"indexed": false,
							"internalType": "uint256[]",
							"name": "protocolFeeAmounts",
							"type": "uint256[]"
						}],
						"name": "PoolBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "cashDelta",
							"type": "int256"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "managedDelta",
							"type": "int256"
						}],
						"name": "PoolBalanceManaged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "poolAddress",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "PoolRegistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "RelayerApprovalChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenIn",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenOut",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountIn",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountOut",
							"type": "uint256"
						}],
						"name": "Swap",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "TokensDeregistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "TokensRegistered",
						"type": "event"
					}, {
						"inputs": [],
						"name": "WETH",
						"outputs": [{
							"internalType": "contract IWETH",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "int256[]",
							"name": "limits",
							"type": "int256[]"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "batchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "",
							"type": "int256[]"
						}],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "deregisterTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address payable",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "minAmountsOut",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.ExitPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "exitPool",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "amounts",
							"type": "uint256[]"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "flashLoan",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "getInternalBalance",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getPausedState",
						"outputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}, {
							"internalType": "uint256",
							"name": "pauseWindowEndTime",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "bufferPeriodEndTime",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPool",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}, {
							"internalType": "enum IVault.PoolSpecialization",
							"name": "",
							"type": "uint8"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}],
						"name": "getPoolTokenInfo",
						"outputs": [{
							"internalType": "uint256",
							"name": "cash",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "managed",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPoolTokens",
						"outputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getProtocolFeesCollector",
						"outputs": [{
							"internalType": "contract IProtocolFeesCollector",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}],
						"name": "hasApprovedRelayer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "maxAmountsIn",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.JoinPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "joinPool",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.PoolBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "contract IERC20",
								"name": "token",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}],
							"internalType": "struct IVault.PoolBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "managePoolBalance",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.UserBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "asset",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}],
							"internalType": "struct IVault.UserBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "manageUserBalance",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}],
						"name": "queryBatchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "assetDeltas",
							"type": "int256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "registerPool",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "registerTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "setAuthorizer",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "setPaused",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "setRelayerApproval",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "assetIn",
								"type": "address"
							}, {
								"internalType": "contract IAsset",
								"name": "assetOut",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.SingleSwap",
							"name": "singleSwap",
							"type": "tuple"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "uint256",
							"name": "limit",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "swap",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "payable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"contracts/PoolBalances.sol": {
				"PoolBalances": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "AuthorizerChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "ExternalBalanceTransfer",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "feeAmount",
							"type": "uint256"
						}],
						"name": "FlashLoan",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "delta",
							"type": "int256"
						}],
						"name": "InternalBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "PausedStateChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "liquidityProvider",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "int256[]",
							"name": "deltas",
							"type": "int256[]"
						}, {
							"indexed": false,
							"internalType": "uint256[]",
							"name": "protocolFeeAmounts",
							"type": "uint256[]"
						}],
						"name": "PoolBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "cashDelta",
							"type": "int256"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "managedDelta",
							"type": "int256"
						}],
						"name": "PoolBalanceManaged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "poolAddress",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "PoolRegistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "RelayerApprovalChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenIn",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenOut",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountIn",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountOut",
							"type": "uint256"
						}],
						"name": "Swap",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "TokensDeregistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "TokensRegistered",
						"type": "event"
					}, {
						"inputs": [],
						"name": "WETH",
						"outputs": [{
							"internalType": "contract IWETH",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "int256[]",
							"name": "limits",
							"type": "int256[]"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "batchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "",
							"type": "int256[]"
						}],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "deregisterTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address payable",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "minAmountsOut",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.ExitPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "exitPool",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "amounts",
							"type": "uint256[]"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "flashLoan",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "getInternalBalance",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getPausedState",
						"outputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}, {
							"internalType": "uint256",
							"name": "pauseWindowEndTime",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "bufferPeriodEndTime",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPool",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}, {
							"internalType": "enum IVault.PoolSpecialization",
							"name": "",
							"type": "uint8"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}],
						"name": "getPoolTokenInfo",
						"outputs": [{
							"internalType": "uint256",
							"name": "cash",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "managed",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPoolTokens",
						"outputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getProtocolFeesCollector",
						"outputs": [{
							"internalType": "contract IProtocolFeesCollector",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}],
						"name": "hasApprovedRelayer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "maxAmountsIn",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.JoinPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "joinPool",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.PoolBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "contract IERC20",
								"name": "token",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}],
							"internalType": "struct IVault.PoolBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "managePoolBalance",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.UserBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "asset",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}],
							"internalType": "struct IVault.UserBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "manageUserBalance",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}],
						"name": "queryBatchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "assetDeltas",
							"type": "int256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "registerPool",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "registerTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "setAuthorizer",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "setPaused",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "setRelayerApproval",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "assetIn",
								"type": "address"
							}, {
								"internalType": "contract IAsset",
								"name": "assetOut",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.SingleSwap",
							"name": "singleSwap",
							"type": "tuple"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "uint256",
							"name": "limit",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "swap",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"stateMutability": "payable",
						"type": "receive"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"contracts/PoolRegistry.sol": {
				"PoolRegistry": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "AuthorizerChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "ExternalBalanceTransfer",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "feeAmount",
							"type": "uint256"
						}],
						"name": "FlashLoan",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "delta",
							"type": "int256"
						}],
						"name": "InternalBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "PausedStateChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "liquidityProvider",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "int256[]",
							"name": "deltas",
							"type": "int256[]"
						}, {
							"indexed": false,
							"internalType": "uint256[]",
							"name": "protocolFeeAmounts",
							"type": "uint256[]"
						}],
						"name": "PoolBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "cashDelta",
							"type": "int256"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "managedDelta",
							"type": "int256"
						}],
						"name": "PoolBalanceManaged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "poolAddress",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "PoolRegistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "RelayerApprovalChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenIn",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenOut",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountIn",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountOut",
							"type": "uint256"
						}],
						"name": "Swap",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "TokensDeregistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "TokensRegistered",
						"type": "event"
					}, {
						"inputs": [],
						"name": "WETH",
						"outputs": [{
							"internalType": "contract IWETH",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "int256[]",
							"name": "limits",
							"type": "int256[]"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "batchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "",
							"type": "int256[]"
						}],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "deregisterTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address payable",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "minAmountsOut",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.ExitPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "exitPool",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "amounts",
							"type": "uint256[]"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "flashLoan",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "getInternalBalance",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getPausedState",
						"outputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}, {
							"internalType": "uint256",
							"name": "pauseWindowEndTime",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "bufferPeriodEndTime",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPool",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}, {
							"internalType": "enum IVault.PoolSpecialization",
							"name": "",
							"type": "uint8"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}],
						"name": "getPoolTokenInfo",
						"outputs": [{
							"internalType": "uint256",
							"name": "cash",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "managed",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPoolTokens",
						"outputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getProtocolFeesCollector",
						"outputs": [{
							"internalType": "contract IProtocolFeesCollector",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}],
						"name": "hasApprovedRelayer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "maxAmountsIn",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.JoinPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "joinPool",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.PoolBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "contract IERC20",
								"name": "token",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}],
							"internalType": "struct IVault.PoolBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "managePoolBalance",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.UserBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "asset",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}],
							"internalType": "struct IVault.UserBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "manageUserBalance",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}],
						"name": "queryBatchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "assetDeltas",
							"type": "int256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "registerPool",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "registerTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "setAuthorizer",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "setPaused",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "setRelayerApproval",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "assetIn",
								"type": "address"
							}, {
								"internalType": "contract IAsset",
								"name": "assetOut",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.SingleSwap",
							"name": "singleSwap",
							"type": "tuple"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "uint256",
							"name": "limit",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "swap",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "payable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"contracts/PoolTokens.sol": {
				"PoolTokens": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "AuthorizerChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "ExternalBalanceTransfer",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "feeAmount",
							"type": "uint256"
						}],
						"name": "FlashLoan",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "delta",
							"type": "int256"
						}],
						"name": "InternalBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "PausedStateChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "liquidityProvider",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "int256[]",
							"name": "deltas",
							"type": "int256[]"
						}, {
							"indexed": false,
							"internalType": "uint256[]",
							"name": "protocolFeeAmounts",
							"type": "uint256[]"
						}],
						"name": "PoolBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "cashDelta",
							"type": "int256"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "managedDelta",
							"type": "int256"
						}],
						"name": "PoolBalanceManaged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "poolAddress",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "PoolRegistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "RelayerApprovalChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenIn",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenOut",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountIn",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountOut",
							"type": "uint256"
						}],
						"name": "Swap",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "TokensDeregistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "TokensRegistered",
						"type": "event"
					}, {
						"inputs": [],
						"name": "WETH",
						"outputs": [{
							"internalType": "contract IWETH",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "int256[]",
							"name": "limits",
							"type": "int256[]"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "batchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "",
							"type": "int256[]"
						}],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "deregisterTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address payable",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "minAmountsOut",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.ExitPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "exitPool",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "amounts",
							"type": "uint256[]"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "flashLoan",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "getInternalBalance",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getPausedState",
						"outputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}, {
							"internalType": "uint256",
							"name": "pauseWindowEndTime",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "bufferPeriodEndTime",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPool",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}, {
							"internalType": "enum IVault.PoolSpecialization",
							"name": "",
							"type": "uint8"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}],
						"name": "getPoolTokenInfo",
						"outputs": [{
							"internalType": "uint256",
							"name": "cash",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "managed",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPoolTokens",
						"outputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getProtocolFeesCollector",
						"outputs": [{
							"internalType": "contract IProtocolFeesCollector",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}],
						"name": "hasApprovedRelayer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "maxAmountsIn",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.JoinPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "joinPool",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.PoolBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "contract IERC20",
								"name": "token",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}],
							"internalType": "struct IVault.PoolBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "managePoolBalance",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.UserBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "asset",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}],
							"internalType": "struct IVault.UserBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "manageUserBalance",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}],
						"name": "queryBatchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "assetDeltas",
							"type": "int256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "registerPool",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "registerTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "setAuthorizer",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "setPaused",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "setRelayerApproval",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "assetIn",
								"type": "address"
							}, {
								"internalType": "contract IAsset",
								"name": "assetOut",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.SingleSwap",
							"name": "singleSwap",
							"type": "tuple"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "uint256",
							"name": "limit",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "swap",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "payable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"contracts/ProtocolFeesCollector.sol": {
				"ProtocolFeesCollector": {
					"abi": [{
						"inputs": [{
							"internalType": "contract IVault",
							"name": "_vault",
							"type": "address"
						}],
						"stateMutability": "nonpayable",
						"type": "constructor"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "uint256",
							"name": "newFlashLoanFeePercentage",
							"type": "uint256"
						}],
						"name": "FlashLoanFeePercentageChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "uint256",
							"name": "newSwapFeePercentage",
							"type": "uint256"
						}],
						"name": "SwapFeePercentageChanged",
						"type": "event"
					}, {
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "getCollectedFeeAmounts",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "feeAmounts",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getFlashLoanFeePercentage",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getSwapFeePercentage",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "uint256",
							"name": "newFlashLoanFeePercentage",
							"type": "uint256"
						}],
						"name": "setFlashLoanFeePercentage",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "uint256",
							"name": "newSwapFeePercentage",
							"type": "uint256"
						}],
						"name": "setSwapFeePercentage",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "vault",
						"outputs": [{
							"internalType": "contract IVault",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "amounts",
							"type": "uint256[]"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}],
						"name": "withdrawCollectedFees",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": ""
						}
					},
					"factoryDependencies": {},
					"hash": "010002b3a0d372248437c6895e57049af38aed617f3a41f516f25635561d31a8"
				}
			},
			"contracts/Swaps.sol": {
				"Swaps": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "AuthorizerChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "ExternalBalanceTransfer",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "feeAmount",
							"type": "uint256"
						}],
						"name": "FlashLoan",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "delta",
							"type": "int256"
						}],
						"name": "InternalBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "PausedStateChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "liquidityProvider",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "int256[]",
							"name": "deltas",
							"type": "int256[]"
						}, {
							"indexed": false,
							"internalType": "uint256[]",
							"name": "protocolFeeAmounts",
							"type": "uint256[]"
						}],
						"name": "PoolBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "cashDelta",
							"type": "int256"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "managedDelta",
							"type": "int256"
						}],
						"name": "PoolBalanceManaged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "poolAddress",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "PoolRegistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "RelayerApprovalChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenIn",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenOut",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountIn",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountOut",
							"type": "uint256"
						}],
						"name": "Swap",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "TokensDeregistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "TokensRegistered",
						"type": "event"
					}, {
						"inputs": [],
						"name": "WETH",
						"outputs": [{
							"internalType": "contract IWETH",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "int256[]",
							"name": "limits",
							"type": "int256[]"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "batchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "assetDeltas",
							"type": "int256[]"
						}],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "deregisterTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address payable",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "minAmountsOut",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.ExitPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "exitPool",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "amounts",
							"type": "uint256[]"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "flashLoan",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "getInternalBalance",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getPausedState",
						"outputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}, {
							"internalType": "uint256",
							"name": "pauseWindowEndTime",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "bufferPeriodEndTime",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPool",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}, {
							"internalType": "enum IVault.PoolSpecialization",
							"name": "",
							"type": "uint8"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}],
						"name": "getPoolTokenInfo",
						"outputs": [{
							"internalType": "uint256",
							"name": "cash",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "managed",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPoolTokens",
						"outputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getProtocolFeesCollector",
						"outputs": [{
							"internalType": "contract IProtocolFeesCollector",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}],
						"name": "hasApprovedRelayer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "maxAmountsIn",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.JoinPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "joinPool",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.PoolBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "contract IERC20",
								"name": "token",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}],
							"internalType": "struct IVault.PoolBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "managePoolBalance",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.UserBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "asset",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}],
							"internalType": "struct IVault.UserBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "manageUserBalance",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}],
						"name": "queryBatchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "",
							"type": "int256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "registerPool",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "registerTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "setAuthorizer",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "setPaused",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "setRelayerApproval",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "assetIn",
								"type": "address"
							}, {
								"internalType": "contract IAsset",
								"name": "assetOut",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.SingleSwap",
							"name": "singleSwap",
							"type": "tuple"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "uint256",
							"name": "limit",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "swap",
						"outputs": [{
							"internalType": "uint256",
							"name": "amountCalculated",
							"type": "uint256"
						}],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"stateMutability": "payable",
						"type": "receive"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"contracts/UserBalance.sol": {
				"UserBalance": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "AuthorizerChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "ExternalBalanceTransfer",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "feeAmount",
							"type": "uint256"
						}],
						"name": "FlashLoan",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "delta",
							"type": "int256"
						}],
						"name": "InternalBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "PausedStateChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "liquidityProvider",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "int256[]",
							"name": "deltas",
							"type": "int256[]"
						}, {
							"indexed": false,
							"internalType": "uint256[]",
							"name": "protocolFeeAmounts",
							"type": "uint256[]"
						}],
						"name": "PoolBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "cashDelta",
							"type": "int256"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "managedDelta",
							"type": "int256"
						}],
						"name": "PoolBalanceManaged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "poolAddress",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "PoolRegistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "RelayerApprovalChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenIn",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenOut",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountIn",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountOut",
							"type": "uint256"
						}],
						"name": "Swap",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "TokensDeregistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "TokensRegistered",
						"type": "event"
					}, {
						"inputs": [],
						"name": "WETH",
						"outputs": [{
							"internalType": "contract IWETH",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "int256[]",
							"name": "limits",
							"type": "int256[]"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "batchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "",
							"type": "int256[]"
						}],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "deregisterTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address payable",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "minAmountsOut",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.ExitPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "exitPool",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "amounts",
							"type": "uint256[]"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "flashLoan",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "getInternalBalance",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getPausedState",
						"outputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}, {
							"internalType": "uint256",
							"name": "pauseWindowEndTime",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "bufferPeriodEndTime",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPool",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}, {
							"internalType": "enum IVault.PoolSpecialization",
							"name": "",
							"type": "uint8"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}],
						"name": "getPoolTokenInfo",
						"outputs": [{
							"internalType": "uint256",
							"name": "cash",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "managed",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPoolTokens",
						"outputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getProtocolFeesCollector",
						"outputs": [{
							"internalType": "contract IProtocolFeesCollector",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}],
						"name": "hasApprovedRelayer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "maxAmountsIn",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.JoinPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "joinPool",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.PoolBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "contract IERC20",
								"name": "token",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}],
							"internalType": "struct IVault.PoolBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "managePoolBalance",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.UserBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "asset",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}],
							"internalType": "struct IVault.UserBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "manageUserBalance",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}],
						"name": "queryBatchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "assetDeltas",
							"type": "int256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "registerPool",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "registerTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "setAuthorizer",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "setPaused",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "setRelayerApproval",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "assetIn",
								"type": "address"
							}, {
								"internalType": "contract IAsset",
								"name": "assetOut",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.SingleSwap",
							"name": "singleSwap",
							"type": "tuple"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "uint256",
							"name": "limit",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "swap",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"stateMutability": "payable",
						"type": "receive"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"contracts/VaultAuthorization.sol": {
				"VaultAuthorization": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "AuthorizerChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "ExternalBalanceTransfer",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "feeAmount",
							"type": "uint256"
						}],
						"name": "FlashLoan",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "delta",
							"type": "int256"
						}],
						"name": "InternalBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "PausedStateChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "liquidityProvider",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "int256[]",
							"name": "deltas",
							"type": "int256[]"
						}, {
							"indexed": false,
							"internalType": "uint256[]",
							"name": "protocolFeeAmounts",
							"type": "uint256[]"
						}],
						"name": "PoolBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "cashDelta",
							"type": "int256"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "managedDelta",
							"type": "int256"
						}],
						"name": "PoolBalanceManaged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "poolAddress",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "PoolRegistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "RelayerApprovalChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenIn",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenOut",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountIn",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountOut",
							"type": "uint256"
						}],
						"name": "Swap",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "TokensDeregistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "TokensRegistered",
						"type": "event"
					}, {
						"inputs": [],
						"name": "WETH",
						"outputs": [{
							"internalType": "contract IWETH",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "int256[]",
							"name": "limits",
							"type": "int256[]"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "batchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "",
							"type": "int256[]"
						}],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "deregisterTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address payable",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "minAmountsOut",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.ExitPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "exitPool",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "amounts",
							"type": "uint256[]"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "flashLoan",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "getInternalBalance",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getPausedState",
						"outputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}, {
							"internalType": "uint256",
							"name": "pauseWindowEndTime",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "bufferPeriodEndTime",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPool",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}, {
							"internalType": "enum IVault.PoolSpecialization",
							"name": "",
							"type": "uint8"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}],
						"name": "getPoolTokenInfo",
						"outputs": [{
							"internalType": "uint256",
							"name": "cash",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "managed",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPoolTokens",
						"outputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getProtocolFeesCollector",
						"outputs": [{
							"internalType": "contract IProtocolFeesCollector",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}],
						"name": "hasApprovedRelayer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "maxAmountsIn",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.JoinPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "joinPool",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.PoolBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "contract IERC20",
								"name": "token",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}],
							"internalType": "struct IVault.PoolBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "managePoolBalance",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.UserBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "asset",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}],
							"internalType": "struct IVault.UserBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "manageUserBalance",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}],
						"name": "queryBatchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "assetDeltas",
							"type": "int256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "registerPool",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "registerTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "setAuthorizer",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "setPaused",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "setRelayerApproval",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "assetIn",
								"type": "address"
							}, {
								"internalType": "contract IAsset",
								"name": "assetOut",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.SingleSwap",
							"name": "singleSwap",
							"type": "tuple"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "uint256",
							"name": "limit",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "swap",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "payable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"contracts/authorizer/TimelockAuthorizer.sol": {
				"TimelockAuthorizer": {
					"abi": [{
						"inputs": [{
							"internalType": "address",
							"name": "admin",
							"type": "address"
						}, {
							"internalType": "contract IAuthentication",
							"name": "vault",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "rootTransferDelay",
							"type": "uint256"
						}],
						"stateMutability": "nonpayable",
						"type": "constructor"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "delay",
							"type": "uint256"
						}],
						"name": "ActionDelaySet",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "uint256",
							"name": "scheduledExecutionId",
							"type": "uint256"
						}],
						"name": "ExecutionCancelled",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "uint256",
							"name": "scheduledExecutionId",
							"type": "uint256"
						}],
						"name": "ExecutionExecuted",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "uint256",
							"name": "scheduledExecutionId",
							"type": "uint256"
						}],
						"name": "ExecutionScheduled",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "pendingRoot",
							"type": "address"
						}],
						"name": "PendingRootSet",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "where",
							"type": "address"
						}],
						"name": "PermissionGranted",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "where",
							"type": "address"
						}],
						"name": "PermissionRevoked",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "root",
							"type": "address"
						}],
						"name": "RootSet",
						"type": "event"
					}, {
						"inputs": [],
						"name": "EVERYWHERE",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "EXECUTE_ACTION_ID",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "GENERAL_PERMISSION_SPECIFIER",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "GRANT_ACTION_ID",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "MAX_DELAY",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "MIN_DELAY",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "REVOKE_ACTION_ID",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "SCHEDULE_DELAY_ACTION_ID",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "uint256",
							"name": "scheduledExecutionId",
							"type": "uint256"
						}],
						"name": "canExecute",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "where",
							"type": "address"
						}],
						"name": "canGrant",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "where",
							"type": "address"
						}],
						"name": "canPerform",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "where",
							"type": "address"
						}],
						"name": "canRevoke",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "uint256",
							"name": "scheduledExecutionId",
							"type": "uint256"
						}],
						"name": "cancel",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "claimRoot",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "uint256",
							"name": "scheduledExecutionId",
							"type": "uint256"
						}],
						"name": "execute",
						"outputs": [{
							"internalType": "bytes",
							"name": "result",
							"type": "bytes"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}],
						"name": "getActionIdDelay",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "uint256",
							"name": "executionId",
							"type": "uint256"
						}],
						"name": "getExecuteExecutionActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getExecutor",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "baseActionId",
							"type": "bytes32"
						}, {
							"internalType": "bytes32",
							"name": "specifier",
							"type": "bytes32"
						}],
						"name": "getExtendedActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}],
						"name": "getGrantPermissionActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getPendingRoot",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "where",
							"type": "address"
						}],
						"name": "getPermissionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}],
						"name": "getRevokePermissionActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getRoot",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getRootTransferDelay",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}],
						"name": "getScheduleDelayActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "uint256",
							"name": "scheduledExecutionId",
							"type": "uint256"
						}],
						"name": "getScheduledExecution",
						"outputs": [{
							"components": [{
								"internalType": "address",
								"name": "where",
								"type": "address"
							}, {
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "executed",
								"type": "bool"
							}, {
								"internalType": "bool",
								"name": "cancelled",
								"type": "bool"
							}, {
								"internalType": "bool",
								"name": "protected",
								"type": "bool"
							}, {
								"internalType": "uint256",
								"name": "executableAt",
								"type": "uint256"
							}],
							"internalType": "struct TimelockAuthorizer.ScheduledExecution",
							"name": "",
							"type": "tuple"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getVault",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32[]",
							"name": "actionIds",
							"type": "bytes32[]"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address[]",
							"name": "where",
							"type": "address[]"
						}],
						"name": "grantPermissions",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "where",
							"type": "address"
						}],
						"name": "hasPermission",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "where",
							"type": "address"
						}],
						"name": "isGranter",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "isPendingRoot",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "where",
							"type": "address"
						}],
						"name": "isPermissionGrantedOnTarget",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "where",
							"type": "address"
						}],
						"name": "isRevoker",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "isRoot",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "where",
							"type": "address"
						}, {
							"internalType": "bool",
							"name": "allowed",
							"type": "bool"
						}],
						"name": "manageGranter",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "where",
							"type": "address"
						}, {
							"internalType": "bool",
							"name": "allowed",
							"type": "bool"
						}],
						"name": "manageRevoker",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32[]",
							"name": "actionIds",
							"type": "bytes32[]"
						}, {
							"internalType": "address[]",
							"name": "where",
							"type": "address[]"
						}],
						"name": "renouncePermissions",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32[]",
							"name": "actionIds",
							"type": "bytes32[]"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address[]",
							"name": "where",
							"type": "address[]"
						}],
						"name": "revokePermissions",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "where",
							"type": "address"
						}, {
							"internalType": "bytes",
							"name": "data",
							"type": "bytes"
						}, {
							"internalType": "address[]",
							"name": "executors",
							"type": "address[]"
						}],
						"name": "schedule",
						"outputs": [{
							"internalType": "uint256",
							"name": "scheduledExecutionId",
							"type": "uint256"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "uint256",
							"name": "newDelay",
							"type": "uint256"
						}, {
							"internalType": "address[]",
							"name": "executors",
							"type": "address[]"
						}],
						"name": "scheduleDelayChange",
						"outputs": [{
							"internalType": "uint256",
							"name": "scheduledExecutionId",
							"type": "uint256"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "where",
							"type": "address"
						}, {
							"internalType": "address[]",
							"name": "executors",
							"type": "address[]"
						}],
						"name": "scheduleGrantPermission",
						"outputs": [{
							"internalType": "uint256",
							"name": "scheduledExecutionId",
							"type": "uint256"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "where",
							"type": "address"
						}, {
							"internalType": "address[]",
							"name": "executors",
							"type": "address[]"
						}],
						"name": "scheduleRevokePermission",
						"outputs": [{
							"internalType": "uint256",
							"name": "scheduledExecutionId",
							"type": "uint256"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "newRoot",
							"type": "address"
						}, {
							"internalType": "address[]",
							"name": "executors",
							"type": "address[]"
						}],
						"name": "scheduleRootChange",
						"outputs": [{
							"internalType": "uint256",
							"name": "scheduledExecutionId",
							"type": "uint256"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "uint256",
							"name": "delay",
							"type": "uint256"
						}],
						"name": "setDelay",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "pendingRoot",
							"type": "address"
						}],
						"name": "setPendingRoot",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": "000400000000000200020000000103550000006003100270000011250030019d0000112503300197000000000131034f00030000000103550000006001100270000111250010019d000000010120018f000000000110004c0000000d0000c13d448d00100000040f448d000e0000040f0000000101000039448d002f0000040f00020000000000020000000001000410000080020210008c0000002b0000613d0000000002000411000080010220008c0000002b0000613d0000112602000041000000000020043900000004020000390000000000120439000011270100004100008002020000390000000003000415000000020330008a00000020033000c9448d44700000040f000000ff01000039000000010110024f000000000110004c0000002d0000613d000000020100035f000000000101043b000000000110004c0000002b0000c13d00000000010000190000448e0001042e0000000001000019448d002f0000040f00000000010000190000448f000104300209000000000002000000000110004c0000028a0000613d000001a00a00003900000040090000390000000000a904350000000001000416000000000110004c000002950000c13d000000020300036700000000020000310000001f0420018f00000000010904330000000505200270000000000650004c000000480000613d000000000600001900000005076002100000000008710019000000000773034f000000000707043b00000000007804350000000106600039000000000756004b000000400000413d000000000640004c000000570000613d0000000505500210000000000353034f00000000055100190000000304400210000000000605043300000000064601cf000000000646022f000000000303043b0000010004400089000000000343022f00000000034301cf000000000363019f00000000003504350000000003120019000000000039043500001131030000410000005f0420008c000000000400001900000000040320190000113102200197000000000520004c0000000003008019000011310220009c00000000020400190000000002036019000000000220004c000002990000613d00000000040104330000114703400197000011470240009c000002c80000213d00000020021000390000000005020433000011470250009c000002e60000213d001000000004001d000f0000000a001d00000040011000390000000001010433001100000001001d0000000101000039001400000001001d0000000002000019001300000009001d001500000003001d001200000005001d448d44890000040f0000001401000029448d448b0000040f00001159011001970000001502000029000000000121019f0000001402000029448d44890000040f0000119f010000410000000202000039000000000012041f0000001501000029000000000001041e000000120100002900000060011002100000016002000039000e00000002001d0000000000120435000011a0010000410000001304000029000000000204043300000024032000390000000000130435000000000104043300000060040000390000004403100039001400000004001d0000000000430435000011a1030000410000000000310435000000000212004900000064031000390000000000230435000000040310003900000000000304350000006002200210000011a202200041000011350220019700000040011002100000113601100197000000000121019f00001142011001c700008006020000390000000003000415000002030330008a00000020033000c9448d44570000040f000002030100035f000000ff04000039000002020240024f000000010220008c000003330000c13d000000000201043b000000000320004c000003330000613d00000060012002100000014002000039000d00000002001d00000000001204350000018001000039000c00000001001d000000110200002900000000002104350000001305000029000000000105043300000040021000390000117303000041000000000032043500000020021000390000000003000410001100000003001d0000000000320435000000000205043300000000032100490000002403300039000000000032043500000044011000390000000000150435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000002090330008a00000020033000c9001200000004001d448d44700000040f000002090100035f0000001202000029000002080220024f000000000220004c000006170000613d000000000101043b000b00000001001d00000013040000290000000001040433000000400210003900001187030000410000000000320435000000200210003900000011030000290000000000320435000000000204043300000000032100490000002403300039000000000032043500000044011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001630330008a00000020033000c9448d44700000040f000001630100035f0000001202000029000001620220024f000000000220004c000009410000613d000000000101043b000a00000001001d0000001304000029000000000104043300000020021000390000000b0300002900000000003204350000004002100039000000010300008a000900000003001d000000000032043500000000030404330000000002320049000000000023043500000060011000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001610330008a00000020033000c9448d44700000040f000001610100035f0000001202000029000001600220024f000000000220004c00000c680000613d000000000101043b000800000001001d0000001304000029000000000104043300000020021000390000000a03000029000000000032043500000040021000390000000903000029000000000032043500000000030404330000000002320049000000000023043500000060011000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000015d0330008a00000020033000c9448d44700000040f0000015d0100035f00000012020000290000015c0220024f000000000220004c0000102f0000613d000000000101043b000900000001001d00000013040000290000000001040433000000200210003900000008030000290000000000320435000000100200002900000060032002100000004002100039001000000003001d0000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000015b0330008a00000020033000c9448d44700000040f0000015b0100035f00000012020000290000015a0220024f000000000220004c0000146d0000613d000000000101043b000500000001001d000000000010043500000004020000390000002001000039000600000001001d000700000002001d0000000000210435000011430100004100008010020000390000000003000415000001550330008a00000020033000c9448d44700000040f000001550100035f0000001202000029000001540220024f000000000220004c0000154d0000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c0000019d0000c13d00000005010000290000000000100435000000060100002900000007020000290000000000210435000011430100004100008010020000390000000003000415000001590330008a00000020033000c9448d44700000040f000001590100035f0000001202000029000001580220024f000000010220008c0000176d0000c13d000000000101043b000500000001001d448d448b0000040f000001000200008a000000000121016f00000001011001bf0000000502000029448d44890000040f0000115f010000410000000702000029000000000012041f00000015010000290000000802000029000000000012041e0000114701000041000000000001041e00000013040000290000000001040433000000400210003900000010030000290000000000320435000000200210003900000009030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000002070330008a00000020033000c9448d44700000040f000002070100035f0000001202000029000002060220024f000000000220004c000016870000613d000000000101043b001000000001001d0000000000100435000000060100002900000007020000290000000000210435000011430100004100008010020000390000000003000415000001530330008a00000020033000c9448d44700000040f000001530100035f0000001202000029000001520220024f000000000220004c0000195e0000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000001f60000c13d00000010010000290000000000100435000000060100002900000007020000290000000000210435000011430100004100008010020000390000000003000415000001570330008a00000020033000c9448d44700000040f000001570100035f0000001202000029000001560220024f000000010220008c00001be10000c13d000000000101043b001000000001001d448d448b0000040f000001000200008a000000000121016f00000001011001bf0000001002000029448d44890000040f0000115f010000410000000702000029000000000012041f00000015010000290000000902000029000000000012041e0000114701000041000000000001041e00000080020000390000000b01000029001000000002001d0000000000120435000000a0020000390000000a01000029001500000002001d0000000000120435000000130400002900000000010404330000004002100039000011a3030000410000000000320435000000200210003900000011030000290000000000320435000000000204043300000000032100490000002403300039000000000032043500000044011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000002050330008a00000020033000c9448d44700000040f000002050100035f0000001202000029000002040220024f000000000220004c00001ab50000613d000000000101043b000000c002000039000b00000002001d0000000000120435000000130400002900000000010404330000004002100039000011a4030000410000000000320435000000200210003900000011030000290000000000320435000000000204043300000000032100490000002403300039000000000032043500000044011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000015f0330008a00000020033000c9448d44700000040f0000015f0100035f00000012020000290000015e0220024f000000000220004c00001c790000613d000000000101043b000000e00300003900000000001304350000010001000039000000080200002900000000002104350000012002000039001200000002001d000000090f0000290000000000f2043500000010020000290000000004020433001100000004001d00000015040000290000000005040433000a00000005001d0000000b050000290000000006050433000000000703043300000000080104330000000d0d00002900000000090d04330000000e0c000029000000000a0c04330000000c0e000029000000000b0e043300000000000d04390000000000bc0439000000060c0000290000000000ce0439000000600aa002700000000f0b0000290000000000ab0439000001c00a000039000000130b0000290000000000ba04390000006009900270000001e00a00003900000000009a04390000020009000039000000140a0000290000000000a9043900000220090000390000000000f90439000002400900003900000000002904390000026009000039000000000089043900000280080000390000000000480439000002a0080000390000000000780439000002c0070000390000000000570439000002e00700003900000000006704390000030006000039000000000036043900000320030000390000000a020000290000000000230439000003400300003900000000001304390000036003000039000000110200002900000000002304390000000000c10439000000090100003900000012020000290000000000120439000011a5010000410000448e0001042e0000008006000039000000400900003900000000006904350000000001000416000000000110004c000002970000c13d0000000001000031000000030210008c0000029b0000213d00000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f000104300000000202000367000000000402043b000000e003400270000011280540009c000002ca0000813d000011770540009c000002e80000813d000011890440009c000003560000813d000011970430009c0000046e0000c13d000000040110008a00001131030000410000001f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c000006350000613d0000000401200370000000000201043b0000114d0120009c0000095f0000813d001200000009001d0000000201000039001500000002001d448d448b0000040f0000001502000029000000000121013f0000114701100197000000000110004c00000000030000190000000103006039000000120a00002900000000010a0433000000000230004c0000000002000019000000010200c039000000000021043500000a0a0000013d00000000010000190000448f00010430000011290540009c000003260000813d000011660440009c000003930000813d0000116d0430009c000004860000c13d001200000009001d0000113f010000410000000000100439000000000100041200000004020000390000000000120439000001000100003900000024020000390000000000120439000011400100004100008005020000390000000003000415000001fb0330008a00000020033000c9001500000003001d448d44700000040f000000ff01000039000001fa0110024f000000000110004c000008b20000c13d00000000010000190000448f0001043000000000010000190000448f00010430000011780440009c000004380000813d0000118004000041000011810530009c000008b70000613d000011820430009c000006370000c13d000000040310008a00001131040000410000005f0530008c000000000500001900000000050420190000113103300197000000000630004c0000000004008019000011310330009c00000000030500190000000003046019000000000330004c000009610000613d0000000403200370000000000303043b0000114a0430009c00000ca40000813d00000023043000390000113105000041000000000614004b0000000006000019000000000605401900001131071001970000113104400197000000000874004b000000000500a019000000000474013f000011310440009c00000000040600190000000004056019000000000440004c0000104d0000613d0000000404300039000000000242034f000000000202043b0000114a0520009c0000148b0000813d0000000505200210000000200550003900000000070904330000000006750019000f00000007001d000000000776004b0000156b0000413d0000114a0760009c0000156b0000813d001200000009001d00000000006904350000000f0600002900000000002604350000000004450019000000000441004b0000178b0000813d00000000010000190000448f000104300000112a0440009c000004460000813d000011600430009c000004be0000c13d001200000009001d0000000201000039448d448b0000040f0000114702100197000000120a00002900000000010a04330000114702200197000000000021043500000a0a0000013d0000004002100370000000000302043b000000600110037000030000000103550000001f0230018f000100000003001f0000000503300270000000000430004c000003440000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000033d0000413d000000000420004c000003520000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000131034f000000000101043b0000010002200089000000000121022f00000000012101cf000000000141019f0000000000130435000000140100002900000001011001ff00001135011001970000448f000104300000118a0430009c000004e60000c13d000000040110008a00001131030000410000001f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c000006550000613d0000000401200370000000000101043b00001147021001970000114d0110009c000009630000813d001100000002001d0000113f01000041000000000010043900000000010004120000000402000039001500000002001d00000000001204390000002401000039001400000001001d0000000000910439000011400100004100008005020000390000000003000415000001e30330008a00000020033000c9448d44700000040f000000ff01000039000001e20110024f000000000110004c00000ca60000613d000001e30100035f000000000101043b00001147011001970000000002000411000000000121004b0000104f0000c13d0000000201000039001500000001001d448d448b0000040f00001159011001970000001102000029000000000121019f0000001502000029448d44890000040f00001196010000410000001502000029000000000012041f0000001101000029000000000001041e00000000010000190000448e0001042e000011670430009c000005240000c13d000000040110008a00001131030000410000005f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c000006570000613d0000000401200370000000000301043b0000002401200370000000000401043b0000114d0140009c000009650000813d0000004401200370000000000201043b000011470120009c00000ca80000213d001300000002001d001500000004001d001200000009001d001400000003001d000000000030043500000005010000390000002002000039001000000002001d0000000000120435000011430100004100008010020000390000000003000415000001dd0330008a00000020033000c9448d44700000040f000001dd0100035f000000ff03000039000001dc0230024f000000000220004c0000105c0000613d001100000003001d000000000101043b448d448b0000040f000000000110004c0000148d0000c13d00000012040000290000000001040433000000200210003900000014030000290000000000320435000000150200002900000060032002100000004002100039001500000003001d00000000003204350000001302000029000000600220021000000054031000390000000000230435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001490330008a00000020033000c9448d44700000040f000001490100035f0000001103000029000001480230024f000000000220004c000015710000613d000000000101043b000000000010043500000004020000390000001001000029001300000002001d0000000000210435000011430100004100008010020000390000000003000415000000d30330008a00000020033000c9448d44700000040f000000d30100035f0000001102000029000000d20220024f000000000220004c000016a50000613d000000000101043b448d448b0000040f000000ff0310018f000000000130004c000002c10000c13d00000012040000290000000001040433000000400210003900000015030000290000000000320435000000200210003900000014030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000610330008a00000020033000c9448d44700000040f000000610100035f0000001102000029000000600220024f000000000220004c00001ad70000613d000000000101043b0000000000100435000000100100002900000013020000290000000000210435000011430100004100008010020000390000000003000415000000d10330008a00000020033000c9448d44700000040f000000d10100035f0000001102000029000000d00220024f000000000220004c00001c9b0000613d000000000101043b448d448b0000040f000000ff0310018f000002c10000013d000011790430009c000005590000c13d0000000001090433000011470200004100000000002104350000000002090433000000000121004900000060011002100000117f01100041000011350110019700000040022002100000113602200197000000000121019f0000448e0001042e0000112b0430009c000005d80000c13d000000040110008a00001131030000410000001f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c000006590000613d001200000009001d0000000401200370000000000101043b001500000001001d0000113f010000410000000000100439000000000100041200000004020000390000000000120439000000e00100003900000024020000390000000000120439000011400100004100008005020000390000000003000415000001730330008a00000020033000c9001400000003001d448d44700000040f000000ff01000039000001720110024f000000000110004c000009e10000c13d00000000010000190000448f00010430001200000009001d000011980430009c0000065b0000c13d0000113f010000410000000000100439000000000100041200000004020000390000000000120439000000a00100003900000024020000390000000000120439000011400100004100008005020000390000000003000415000002010330008a00000020033000c9001500000003001d448d44700000040f000000ff01000039000002000110024f000000000110004c000008b20000c13d00000000010000190000448f000104300000116e0430009c0000083e0000c13d000000040310008a00001131040000410000003f0530008c000000000500001900000000050420190000113103300197000000000630004c0000000004008019000011310330009c00000000030500190000000003046019000000000330004c000009670000613d0000000403200370000000000303043b000011490430009c00000caa0000213d00000023043000390000113105000041000000000614004b0000000006000019000000000605401900001131071001970000113104400197000000000874004b000000000500a019000000000474013f000011310440009c00000000040600190000000004056019000000000440004c0000107a0000613d0000000404300039000000000242034f000000000202043b0000114a0520009c000014a80000813d0000000505200210000000200550003900000000080904330000000006850019000000000786004b0000156d0000413d0000114a0760009c0000156d0000813d001200000009001d0000000000690435000d00000008001d00000000002804350000000004450019000000000441004b000017cb0000813d00000000010000190000448f00010430000011610430009c000008740000c13d000000040110008a00001131030000410000001f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c000009690000613d001200000009001d0000000401200370000000000101043b001500000001001d0000113f010000410000000000100439000000000100041200000004020000390000000000120439000000c00100003900000024020000390000000000120439000011400100004100008005020000390000000003000415000001770330008a00000020033000c9001400000003001d448d44700000040f000000ff01000039000001760110024f000000000110004c000009e10000c13d00000000010000190000448f000104300000118b0430009c0000089c0000c13d000000040110008a00001131030000410000005f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c0000096b0000613d0000000401200370000000000101043b0000002403200370000000000303043b0000114d0430009c00000cac0000813d0000004402200370000000000202043b000011470420009c0000107c0000213d00000060033002100000000004090433000000400540003900000000003504350000002003400039000000000013043500000060012002100000005402400039000000000012043500000000010904330000000002140049000000480220003900000000002104350000006802400039001200000009001d0000000000290435000000400210021000001141022000410000113602200197000000000101043300000060011002100000113501100197000000000112019f00001142011001c700008010020000390000000003000415000001e10330008a00000020033000c9448d44700000040f000001e10100035f000000ff02000039000001e00220024f000000000220004c000014aa0000613d000000000101043b000900000001001d00000a060000013d0000115404000041000011680530009c000008b70000613d000011690430009c0000096d0000c13d000000040110008a00001131030000410000005f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c00000cae0000613d0000000401200370000000000401043b0000002401200370000000000301043b0000114d0130009c0000107e0000813d0000004401200370000000000201043b000011470120009c000014c80000213d001500000004001d001100000002001d001300000003001d001200000009001d0000113f010000410000000000100439000000000100041200000004020000390000000000120439000001000100003900000024020000390000000000120439000011400100004100008005020000390000000003000415000001db0330008a00000020033000c9001400000003001d448d44700000040f000000ff01000039000001da0110024f000000000110004c00000b3b0000c13d00000000010000190000448f000104300000117a0430009c000008c20000c13d000000040110008a00001131030000410000001f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c000009850000613d0000000401200370000000000101043b001500000001001d0000000001090433000000c002100039001200000009001d0000000000290435000000200210003900000060030000390000000000320435000000a002100039000000000002043500000080021000390000000000020435000000600210003900000000000204350000004002100039000000000002043500000000000104350000000301000039001400000001001d448d448b0000040f0000001502000029000000000112004b00000cb00000813d00000014010000290000000000100435000011370100004100008010020000390000000003000415000001bf0330008a00000020033000c9448d44700000040f000001bf0100035f000000ff03000039000001be0230024f000000000220004c000010800000613d001300000003001d000000000101043b00000012030000290000000002030433001100000002001d000000c0022000390000000000230435000000150200002900000002022002100000000001210019001000000001001d448d448b0000040f00001147011001970000001102000029000000000012043500000010010000290000000101100039001400000001001d448d448b0000040f000000010200008a0000000803100210000000000223013f000001000220018f000000010220008a000000000112016f000000200300008a00000001051002700000001f02500039000f00000003001d000000000232016f00000012060000290000000003060433000000200430003900000000022400190000000000260435000e00000003001d0000000000530435000000020210008c000015950000413d001500000004001d0000003f0110008c0000158f0000a13d000d00000005001d00000014010000290000000000100435000011370100004100008010020000390000000003000415000001bd0330008a00000020033000c9448d44700000040f000001bd0100035f0000001302000029000001bc0220024f000000000220004c000016c30000613d00000015020000290000000d030000290000000003230019001300000003001d000000000301043b001400000003001d001500000002001d0000000001030019448d448b0000040f000000140300002900000015020000290000000000120435000000010330003900000020022000390000001301000029000000000121004b000005cb0000213d000015950000013d0000112c0430009c000008d90000c13d000000040310008a00001131040000410000005f0530008c000000000500001900000000050420190000113103300197000000000630004c0000000004008019000011310330009c00000000030500190000000003046019000000000330004c000009870000613d0000002403200370000000000a03043b0000000403200370000000000b03043b0000004403200370000000000303043b000011490430009c00000cb20000213d00000023043000390000113105000041000000000614004b0000000006000019000000000605401900001131071001970000113104400197000000000874004b000000000500a019000000000474013f000011310440009c00000000040600190000000004056019000000000440004c0000109e0000613d0000000404300039000000000242034f000000000202043b0000114a0520009c000014ca0000813d0000000505200210000000200550003900000000070904330000000006750019000c00000007001d000000000776004b0000156f0000413d0000114a0760009c0000156f0000813d00140000000b001d00150000000a001d001200000009001d00000000006904350000000c0600002900000000002604350000000004450019000000000141004b000018050000813d00000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000006250000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000061e0000413d000000000420004c000006330000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f00010430000011830430009c000009890000c13d000000040110008a00001131030000410000001f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c00000cb40000613d0000000401200370000000000201043b0000114d0120009c000010a00000813d001200000009001d0000000101000039001500000002001d448d448b0000040f0000001502000029000000000121013f0000114701100197000000000110004c00000000030000190000000103006039000002c10000013d00000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f00010430000011990430009c000009bc0000c13d001400000006001d0000000101000039448d448b0000040f001500000001001d0000000201000039001300000001001d448d448b0000040f0000001502000029000011470320019700001147011001970000000002000411000000000121004b00000cb60000c13d000d00000003001d001500000002001d0000113f01000041000000000010043900000000020004120000000401000039001000000001001d000f00000002001d00000000002104390000002401000039000e00000001001d00000014020000290000000000210439000011400100004100008005020000390000000003000415000001e50330008a00000020033000c9448d44700000040f000000ff03000039000001e40130024f000000000110004c000010a20000613d000001e50100035f000000000601043b00000015010000290000006005100210000000120400002900000000010404330000004002100039000c00000005001d00000000005204350000005402100039001100000003001d000011440300004100000000003204350000002002100039000b00000006001d0000000000620435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000012f0330008a00000020033000c9448d44700000040f0000012f0100035f00000011020000290000012e0220024f000000000220004c000014cc0000613d000000000101043b000900000001001d000000000010043500000020020000390000001001000029000a00000002001d0000000000120435000011430100004100008010020000390000000003000415000001250330008a00000020033000c9448d44700000040f000001250100035f0000001102000029000001240220024f000000000220004c000015f50000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000006e00000c13d0000000901000029000000000010043500000010010000290000000a020000290000000000120435000011430100004100008010020000390000000003000415000000470330008a00000020033000c9448d44700000040f000000470100035f0000001102000029000000460220024f000000010220008c0000199c0000c13d000000000101043b000900000001001d448d448b0000040f000001000200008a000000000121016f00000001011001bf0000000902000029448d44890000040f0000115f010000410000001002000029000000000012041f00000015010000290000000b02000029000000000012041e0000114701000041000000000001041e0000113f01000041000000000010043900000010010000290000000f02000029000000000021043900000060020000390000000e01000029000b00000002001d0000000000210439000011400100004100008005020000390000000003000415000001eb0330008a00000020033000c9448d44700000040f0000001101000029000001ea0110024f000000000110004c000019200000613d000001eb0100035f000000000501043b0000001204000029000000000104043300000040021000390000000c0300002900000000003204350000005402100039000011440300004100000000003204350000002002100039000c00000005001d0000000000520435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000012d0330008a00000020033000c9448d44700000040f0000012d0100035f00000011020000290000012c0220024f000000000220004c00001a260000613d000000000101043b000900000001001d000000000010043500000010010000290000000a020000290000000000120435000011430100004100008010020000390000000003000415000001230330008a00000020033000c9448d44700000040f000001230100035f0000001102000029000001220220024f000000000220004c00001bff0000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c0000074e0000c13d0000000901000029000000000010043500000010010000290000000a020000290000000000120435000011430100004100008010020000390000000003000415000000450330008a00000020033000c9448d44700000040f000000450100035f0000001102000029000000440220024f000000010220008c000020e70000c13d000000000101043b000900000001001d448d448b0000040f000001000200008a000000000121016f00000001011001bf0000000902000029448d44890000040f0000115f010000410000001002000029000000000012041f00000015010000290000000c02000029000000000012041e0000114701000041000000000001041e0000113f01000041000000000010043900000010010000290000000f0200002900000000002104390000000e0100002900000014020000290000000000210439000011400100004100008005020000390000000003000415000001e90330008a00000020033000c9448d44700000040f0000001101000029000001e80110024f000000000110004c00001e590000613d000001e90100035f000000000501043b0000000d010000290000006003100210000000120400002900000000010404330000004002100039001400000003001d00000000003204350000005402100039000011440300004100000000003204350000002002100039000c00000005001d0000000000520435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000012b0330008a00000020033000c9448d44700000040f0000012b0100035f00000011020000290000012a0220024f000000000220004c0000216e0000613d000000000101043b000900000001001d000000000010043500000010010000290000000a020000290000000000120435000011430100004100008010020000390000000003000415000001210330008a00000020033000c9448d44700000040f000001210100035f0000001102000029000001200220024f000000000220004c000023c70000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000007bc0000613d0000000901000029000000000010043500000010010000290000000a020000290000000000120435000011430100004100008010020000390000000003000415000000370330008a00000020033000c9448d44700000040f000000370100035f0000001102000029000000360220024f000000010220008c00002a3a0000c13d000000000101043b000900000001001d448d448b0000040f000001000200008a000000000121016f0000000902000029448d44890000040f00001175010000410000001002000029000000000012041f0000000d010000290000000c02000029000000000012041e0000114701000041000000000001041e0000113f01000041000000000010043900000010010000290000000f0200002900000000002104390000000e010000290000000b020000290000000000210439000011400100004100008005020000390000000003000415000001e70330008a00000020033000c9448d44700000040f0000001101000029000001e60110024f000000000110004c000029910000613d000001e70100035f000000000501043b000000120400002900000000010404330000004002100039000000140300002900000000003204350000005402100039000011440300004100000000003204350000002002100039001400000005001d0000000000520435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001290330008a00000020033000c9448d44700000040f000001290100035f0000001102000029000001280220024f000000000220004c00002baf0000613d000000000101043b001200000001001d000000000010043500000010010000290000000a0200002900000000001204350000114301000041000080100200003900000000030004150000011f0330008a00000020033000c9448d44700000040f0000011f0100035f00000011020000290000011e0220024f000000000220004c00002fd70000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000008280000613d0000001201000029000000000010043500000010010000290000000a020000290000000000120435000011430100004100008010020000390000000003000415000000350330008a00000020033000c9448d44700000040f000000350100035f0000001102000029000000340220024f000000010220008c000034060000c13d000000000101043b001200000001001d448d448b0000040f000001000200008a000000000121016f0000001202000029448d44890000040f00001175010000410000001002000029000000000012041f0000000d010000290000001402000029000000000012041e0000114701000041000000000001041e0000000101000039001400000001001d448d448b0000040f00001159011001970000001502000029000000000121019f0000001402000029448d44890000040f0000119f020000410000001301000029000000000021041f0000001502000029000000000002041e448d448b0000040f00001159011001970000001302000029448d44890000040f00001196010000410000001302000029000000000012041f001100000000001d0000038f0000013d0000116f0430009c00000a130000c13d000000040110008a00001131030000410000001f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c00000cc30000613d0000000401200370000000000101043b0000117402100197000000000221004b000010a40000c13d00000000020904330000004003200039000000000013043500000020012000390000000003000410000000000031043500000000010904330000000003120049000000240330003900000000003104350000004402200039001200000009001d0000000000290435000000400210021000001141022000410000113602200197000000000101043300000060011002100000113501100197000000000112019f00001142011001c700008010020000390000000003000415000001a70330008a00000020033000c9448d44700000040f000001a70100035f000000ff02000039000001a60220024f000000000220004c000014ea0000613d000000000101043b000900000001001d00000a060000013d000011620430009c00000a5e0000c13d000000040110008a00001131030000410000001f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c00000cc50000613d001200000009001d0000000401200370000000000101043b001500000001001d0000113f010000410000000000100439000000000100041200000004020000390000000000120439000000a00100003900000024020000390000000000120439000011400100004100008005020000390000000003000415000001750330008a00000020033000c9001400000003001d448d44700000040f000000ff01000039000001740110024f000000000110004c000009e10000c13d00000000010000190000448f000104300000118c0430009c00000a900000c13d001200000009001d0000113f010000410000000000100439000000000100041200000004020000390000000000120439000000c00100003900000024020000390000000000120439000011400100004100008005020000390000000003000415000001ff0330008a00000020033000c9001500000003001d448d44700000040f000000ff01000039000001fe0110024f000000000110004c00000cc70000613d0000001501000029000000200110011a0000000001010367000000000401043b0000001209000029000000000109043300000000004104350000000002090433000000000121004900000060011002100000117f01100041000011350110019700000040022002100000113602200197000000000121019f0000448e0001042e0000117b0430009c00000ad10000c13d0000113f0100004100000000001004390000000001000412000000040200003900000000001204390000002401000039001200000009001d0000000000910439000011400100004100008005020000390000000003000415000001fd0330008a00000020033000c9448d44700000040f000000ff01000039000001fc0110024f000000000110004c00000cc90000613d000001fd0100035f000000000201043b0000032e0000013d0000112d0430009c00000b0b0000c13d000000040110008a00001131030000410000003f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c00000ccb0000613d0000002401200370000000000101043b001000000001001d0000000401200370000000000101043b001100000001001d0000113f01000041000000000010043900000000020004120000000401000039001500000001001d001300000002001d00000000002104390000002401000039001200000009001d001400000001001d00000000009104390000114001000041000080050200003900000000030004150000016b0330008a00000020033000c9448d44700000040f000000ff030000390000016a0130024f000000000110004c000010a60000613d0000016b0100035f000000000101043b00001147011001970000000002000411000000000121004b000015080000c13d000000120100002900000000020104330000114e01000041000f00000002001d00000000001204350000113f0100004100000000001004390000001502000029000000130100002900000000001204390000002001000039001300000001001d0000001402000029000000000012043900001140010000410000800502000039001400000003001d0000000003000415000001a10330008a00000020033000c9448d44700000040f0000001401000029000001a00110024f000000000110004c000016130000613d000001a10100035f000000000101043b0000000f0200002900000004022000390000114f03000041000000000032043500000012020000290000000002020433000d00000002001d000011260200004100000000002004390000114701100197000e00000001001d00000015020000290000000000120439000011270100004100008002020000390000000003000415000000530330008a00000020033000c9448d44700000040f0000001401000029000000520110024f000000000110004c000016e10000613d000000530100035f000000000101043b000000000110004c000019ba0000c13d00000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000094f0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000009480000413d000000000420004c0000095d0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f000104300000116a0430009c00000ccd0000c13d001200000009001d0000113f01000041000000000010043900000000010004120000000402000039000000000012043900000024010000390000000000010439000011400100004100008005020000390000000003000415000001f70330008a00000020033000c9448d44700000040f000000ff01000039000001f60110024f000000000110004c000010a80000613d000001f70100035f000000000101043b000900000001001d00000a060000013d00000000010000190000448f0001043000000000010000190000448f00010430000011840430009c00000d220000c13d000000040110008a00001131030000410000003f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c000010aa0000613d0000002401200370000000000101043b0000000402200370000000000202043b000000000309043300000020043000390000000000240435000000400230003900000000001204350000000001090433000000000212004900000000002104350000006002300039001200000009001d0000000000290435000000400210021000001141022000410000113602200197000000000101043300000060011002100000113501100197000000000112019f00001142011001c7000080100200003900000000030004150000016d0330008a00000020033000c9448d44700000040f0000016d0100035f000000ff020000390000016c0220024f000000000220004c000015150000613d000000000101043b000900000001001d00000a060000013d0000119a0430009c00000d6d0000c13d000000040110008a00001131030000410000001f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c000010ac0000613d0000000401200370000000000101043b001500000001001d0000113f0100004100000000001004390000000001000412000000040200003900000000001204390000010001000039000000240200003900000000001204390000114001000041000080050200003900000000030004150000017b0330008a00000020033000c9001400000003001d448d44700000040f000000ff010000390000017a0110024f000000000110004c000015330000613d0000001401000029000000200110011a0000000001010367000000000101043b00000012040000290000000002040433000000200320003900000000001304350000004001200039000000150300002900000000003104350000000003040433000000000131004900000000001304350000006001200039001200000004001d0000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001f10330008a00000020033000c9448d44700000040f000001f10100035f000000ff02000039000001f00220024f000000000220004c00000c860000613d000000000101043b000900000001001d000000120a00002900000000010a04330000000902000029000000000021043500000000020a0433000000000121004900000060011002100000117f01100041000011350110019700000040022002100000113602200197000000000121019f0000448e0001042e000011700430009c00000db10000c13d000000040310008a00001131040000410000007f0530008c000000000500001900000000050420190000113103300197000000000630004c0000000004008019000011310330009c00000000030500190000000003046019000000000330004c000010ae0000613d0000000403200370000000000503043b0000002403200370000000000303043b00001147063001970000114d0330009c000015350000813d0000004403200370000000000803043b0000114707800197000011470380009c000016150000213d0000006403200370000000000303043b0000114a0430009c000016e30000813d001400000008001d001100000007001d001300000006001d001500000005001d001200000009001d00000023043000390000113105000041000000000614004b0000000006000019000000000605401900001131071001970000113104400197000000000874004b000000000500a019000000000474013f000011310440009c00000000040600190000000004056019000000000440004c000019c00000613d0000000404300039000000000242034f000000000202043b0000114a0520009c00001af50000813d00000005052002100000002005500039000000120600002900000000070604330000000006750019001000000007001d000000000776004b00001c970000413d0000114a0760009c00001c970000813d00000012070000290000000000670435000000100600002900000000002604350000000004450019000000000141004b00001f0c0000813d00000000010000190000448f00010430000011630430009c00000e070000c13d000000040110008a00001131030000410000005f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c000010b00000613d0000000401200370000000000401043b0000002401200370000000000301043b0000114d0130009c000015370000813d0000004401200370000000000201043b000011470120009c000016170000213d001500000004001d001100000002001d001300000003001d001200000009001d0000113f010000410000000000100439000000000100041200000004020000390000000000120439000001000100003900000024020000390000000000120439000011400100004100008005020000390000000003000415000001d90330008a00000020033000c9001400000003001d448d44700000040f000000ff01000039000001d80110024f000000000110004c00000eb10000c13d00000000010000190000448f000104300000118d0430009c00000e5c0000c13d000000040310008a00001131040000410000003f0530008c000000000500001900000000050420190000113103300197000000000630004c0000000004008019000011310330009c00000000030500190000000003046019000000000330004c000010b20000613d0000000403200370000000000303043b000011470a3001970000114d0330009c000015390000813d0000002403200370000000000303043b0000114a0430009c000016190000813d00000023043000390000113105000041000000000614004b0000000006000019000000000605401900001131071001970000113104400197000000000874004b000000000500a019000000000474013f000011310440009c00000000040600190000000004056019000000000440004c000016e50000613d00150000000a001d001200000009001d0000000404300039000000000242034f000000000202043b0000114a0520009c000019c20000813d00000005052002100000002005500039000000120600002900000000070604330000000006750019000c00000007001d000000000776004b00001ad50000413d0000114a0760009c00001ad50000813d000000120700002900000000006704350000000c0600002900000000002604350000000004450019000000000141004b00001cb90000813d00000000010000190000448f000104300000117c0430009c00000e810000c13d000000040310008a00001131040000410000005f0530008c000000000500001900000000050420190000113103300197000000000630004c0000000004008019000011310330009c00000000030500190000000003046019000000000330004c000010b40000613d0000000403200370000000000303043b0000114a0430009c0000153b0000813d00000023043000390000113105000041000000000614004b0000000006000019000000000605401900001131071001970000113104400197000000000874004b000000000500a019000000000474013f000011310440009c00000000040600190000000004056019000000000440004c0000161b0000613d0000000404300039000000000242034f000000000202043b0000114a0520009c000016e70000813d00000005052002100000002005500039001200000009001d00000000070904330000000006750019000f00000007001d000000000776004b0000199a0000413d0000114a0760009c0000199a0000813d000000120700002900000000006704350000000f0600002900000000002604350000000004450019000000000441004b00001af70000813d00000000010000190000448f000104300000112e0430009c000010080000c13d000000040110008a00001131030000410000005f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c000010b60000613d0000000401200370000000000401043b0000002401200370000000000301043b0000114d0130009c0000153d0000813d0000004401200370000000000201043b000011470120009c0000161d0000213d001500000004001d001100000002001d001300000003001d001200000009001d0000113f010000410000000000100439000000000100041200000004020000390000000000120439000000e00100003900000024020000390000000000120439000011400100004100008005020000390000000003000415000001d50330008a00000020033000c9001400000003001d448d44700000040f000000ff01000039000001d40110024f000000000110004c000016e90000613d0000001401000029000000200110011a0000000001010367000000000501043b000000120400002900000000010404330000004002100039000000150300002900000000003204350000002003100039001400000005001d00000000005304350000000003040433000000000232004900000000002304350000006001100039001200000004001d0000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001ab0330008a00000020033000c9448d44700000040f000001ab0100035f000000ff02000039001500000002001d000001aa0220024f000000000220004c000016690000613d000000000101043b001000000001001d000000120400002900000000010404330000002002100039000000140300002900000000003204350000004002100039000000010300008a000000000032043500000000030404330000000002320049000000000023043500000060011000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000910330008a00000020033000c9448d44700000040f000000910100035f0000001502000029000000900220024f000000000220004c000019220000613d000000000101043b000f00000001001d00000012040000290000000001040433000000200210003900000010030000290000000000320435000000130200002900000060032002100000004002100039001400000003001d0000000000320435000000110200002900000060032002100000005402100039001300000003001d0000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000008f0330008a00000020033000c9448d44700000040f0000008f0100035f00000015020000290000008e0220024f000000000220004c00001a440000613d000000000101043b000000000010043500000004010000390000002002000039001100000001001d000e00000002001d0000000000120435000011430100004100008010020000390000000003000415000000cf0330008a00000020033000c9448d44700000040f000000cf0100035f0000001502000029000000ce0220024f000000000220004c00001c1d0000613d000000000101043b448d448b0000040f000000ff0310018f000000000130004c000002c10000c13d00000012040000290000000001040433000000400210003900000014030000290000000000320435000000200210003900000010030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000005f0330008a00000020033000c9448d44700000040f0000005f0100035f00000015020000290000005e0220024f000000000220004c000021050000613d000000000101043b000000000010043500000011010000290000000e020000290000000000120435000011430100004100008010020000390000000003000415000000c90330008a00000020033000c9448d44700000040f000000c90100035f0000001502000029000000c80220024f000000000220004c0000236b0000613d000000000101043b448d448b0000040f000000ff0310018f000000000130004c000002c10000c13d0000001204000029000000000104043300000040021000390000001403000029000000000032043500000020021000390000000f030000290000000000320435000000540210003900000013030000290000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000190330008a00000020033000c9448d44700000040f000000190100035f0000001502000029000000180220024f000000000220004c000029930000613d000000000101043b000000000010043500000011010000290000000e020000290000000000120435000011430100004100008010020000390000000003000415000000cd0330008a00000020033000c9448d44700000040f000000cd0100035f0000001502000029000000cc0220024f000000000220004c00002bcd0000613d000000000101043b448d448b0000040f000000ff0310018f000000000130004c000002c10000c13d0000001204000029000000000104043300000040021000390000001403000029000000000032043500000020021000390000000f030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000005d0330008a00000020033000c9448d44700000040f0000005d0100035f00000015020000290000005c0220024f000000000220004c000032740000613d000000000101043b000000000010043500000011010000290000000e020000290000000000120435000011430100004100008010020000390000000003000415000000cb0330008a00000020033000c9448d44700000040f000000cb0100035f0000001502000029000000ca0220024f000000000220004c0000342b0000613d000000000101043b448d448b0000040f000000ff0310018f000002c10000013d00000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00000c760000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00000c6f0000413d000000000420004c00000c840000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00000c940000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00000c8d0000413d000000000420004c00000ca20000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f000104300000113301000041000000000010043500000020010000390000000402000039000000000012043500000007010000390000002402000039000000000012043500001145010000410000004402000039000000000012043500001134010000410000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f000104300000116b0430009c000010b80000c13d000000040110008a00001131030000410000001f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c0000153f0000613d001200000009001d0000000401200370000000000101043b001500000001001d0000000301000039448d448b0000040f0000001502000029000000000112004b0000161f0000813d0000000301000039001400000001001d448d448b0000040f0000001502000029000000000112004b000016eb0000813d00000014010000290000000000100435000011370100004100008010020000390000000003000415000001a90330008a00000020033000c9448d44700000040f000001a90100035f000000ff02000039001400000002001d000001a80220024f000000000220004c000019c40000613d00000015020000290000000202200210000000000101043b0000000001210019001300000001001d0000000201100039001500000001001d448d448b0000040f000000ff0110018f000000000110004c0000000003000019000002c10000c13d0000001501000029448d448b0000040f0000ff000110018f000000000110004c0000000003000019000002c10000c13d00000013010000290000000301100039448d448b0000040f0000113b020000410000000000200439001500000001001d0000113c010000410000800b020000390000000003000415000000810330008a00000020033000c9448d44700000040f0000001401000029000000800110024f000000010110008c000020690000c13d000000810100035f000000000101043b0000001502000029000000000121004b00000000030000190000000103008039000002c10000013d000011850430009c000012350000c13d000000040310008a00001131040000410000007f0530008c000000000500001900000000050420190000113103300197000000000630004c0000000004008019000011310330009c00000000030500190000000003046019000000000330004c000015410000613d0000000403200370000000000403043b0000002403200370000000000303043b00001147053001970000114d0330009c000016350000813d0000004403200370000000000703043b0000114706700197000011470370009c000016ed0000213d001400000007001d001100000006001d001300000005001d001500000004001d001200000009001d0000006403200370000000000303043b0000114a0430009c000019e20000813d00000023043000390000113105000041000000000614004b0000000006000019000000000605401900001131071001970000113104400197000000000874004b000000000500a019000000000474013f000011310440009c00000000040600190000000004056019000000000440004c00001b370000613d0000000404300039000000000242034f000000000202043b0000114a0520009c00001dad0000813d00000005052002100000002005500039000000120600002900000000070604330000000006750019001000000007001d000000000776004b0000206b0000413d0000114a0760009c0000206b0000813d00000012070000290000000000670435000000100600002900000000002604350000000004450019000000000141004b000021ae0000813d00000000010000190000448f000104300000119b0330009c0000146b0000c13d000000040310008a00001131040000410000005f0530008c000000000500001900000000050420190000113103300197000000000630004c0000000004008019000011310330009c00000000030500190000000003046019000000000330004c000015430000613d0000000403200370000000000603043b00001147056001970000114d0360009c000016370000813d0000002403200370000000000303043b0000114a0430009c000016ef0000813d001400000006001d001500000005001d00000023043000390000113105000041000000000614004b0000000006000019000000000605801900001131071001970000113104400197000000000874004b0000000005008019000000000474013f000011310440009c00000000040600190000000004056019000000000440004c000019e40000c13d0000000405300039000000000252034f000000000402043b0000114a0240009c00001b390000813d0000003f02400039000000200600008a001100000006001d000000000262016f000000120600002900000000060604330000000002260019001300000006001d000000000662004b00001c990000413d0000114a0620009c00001c990000813d000000120600002900000000002604350000001302000029000000000042043500000020024000390000000005520019000000000515004b0000206d0000a13d00000000010000190000448f00010430000011710430009c0000123c0000c13d000000040110008a00001131030000410000005f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c000015450000613d0000000401200370000000000401043b0000002401200370000000000101043b0000114d0310009c000016390000813d0000004402200370000000000202043b000011470320009c000016f10000213d001500000004001d001200000009001d0000006001100210001400000001001d0000006002200210000000120400002900000000010404330000004003100039000000140500002900000000005304350000002003100039000000150500002900000000005304350000005403100039000000000023043500000000020404330000000003210049000000480330003900000000003204350000006801100039001200000004001d0000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001f30330008a00000020033000c9448d44700000040f000001f30100035f000000ff02000039001500000002001d000001f20220024f000000000220004c0000197c0000613d000000000101043b0000000000100435000000040100003900000020020000390000000000120435000011430100004100008010020000390000000003000415000000d50330008a00000020033000c9448d44700000040f000000d50100035f0000001502000029000000d40220024f000000000220004c00001a970000613d000000000101043b448d448b0000040f000000ff0310018f000002c10000013d000011640430009c000012540000c13d000000040110008a00001131030000410000005f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c000015470000613d0000000401200370000000000501043b0000002401200370000000000101043b0000114d0310009c0000163b0000813d0000004402200370000000000202043b000011470320009c000016f30000213d00000000030904330000002004300039001500000005001d000000000054043500000060041002100000004001300039001400000004001d000000000041043500000060012002100000005402300039000000000012043500000000010904330000000002130049000000480220003900000000002104350000006802300039001200000009001d0000000000290435000000400210021000001141022000410000113602200197000000000101043300000060011002100000113501100197000000000112019f00001142011001c700008010020000390000000003000415000001d70330008a00000020033000c9448d44700000040f000001d70100035f000000ff02000039001300000002001d000001d60220024f000000000220004c000019e60000613d000000000101043b0000000000100435000000040100003900000020020000390000000000120435000011430100004100008010020000390000000003000415000000bf0330008a00000020033000c9448d44700000040f000000bf0100035f0000001302000029000000be0220024f000000000220004c00001b3b0000613d000000000101043b448d448b0000040f0000114402000041000000ff0310018f000000000130004c00000dcf0000613d000002c10000013d0000118e0430009c0000126c0000c13d000000040110008a00001131030000410000001f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c000015490000613d001200000009001d0000000401200370000000000101043b0000000000100435000000050100003900000020020000390000000000120435000011430100004100008010020000390000000003000415000001790330008a00000020033000c9448d44700000040f000001790100035f000000ff02000039000001780220024f000000000220004c0000163d0000613d000000000101043b448d448b0000040f000900000001001d00000a060000013d0000117d0430009c000012ee0000c13d000000040110008a00001131030000410000005f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c0000154b0000613d0000000401200370000000000401043b0000002401200370000000000301043b0000114d0130009c0000165b0000813d001500000004001d001300000003001d001200000009001d0000004401200370000000000101043b001100000001001d000011470110009c000016f50000213d0000113f010000410000000000100439000000000100041200000004020000390000000000120439000000e00100003900000024020000390000000000120439000011400100004100008005020000390000000003000415000001df0330008a00000020033000c9001400000003001d448d44700000040f000000ff01000039000001de0110024f000000000110004c00001a040000613d0000001401000029000000200110011a0000000001010367000000000501043b000000120400002900000000010404330000004002100039000000150300002900000000003204350000002003100039001400000005001d00000000005304350000000003040433000000000232004900000000002304350000006001100039001200000004001d0000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001b70330008a00000020033000c9448d44700000040f000001b70100035f000000ff02000039001500000002001d000001b60220024f000000000220004c000019400000613d000000000101043b001000000001001d000000000010043500000005020000390000002001000039000f00000001001d000e00000002001d00000000002104350000114301000041000080100200003900000000030004150000009f0330008a00000020033000c9448d44700000040f0000009f0100035f00000015020000290000009e0220024f000000000220004c00001a620000613d000000000101043b448d448b0000040f000000000110004c00001c3b0000c13d00000012040000290000000001040433000000200210003900000010030000290000000000320435000000130200002900000060032002100000004002100039000d00000003001d0000000000320435000000110200002900000060032002100000005402100039001100000003001d0000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000018f0330008a00000020033000c9448d44700000040f0000018f0100035f00000015020000290000018e0220024f000000000220004c00001df10000613d000000000101043b000000000010043500000004020000390000000f01000029000c00000002001d0000000000210435000011430100004100008010020000390000000003000415000000f30330008a00000020033000c9448d44700000040f000000f30100035f0000001502000029000000f20220024f000000000220004c000021230000613d000000000101043b448d448b0000040f0000000103000039000000ff0110018f000000000110004c000002c10000c13d000b00000003001d0000001204000029000000000104043300000040021000390000000d030000290000000000320435000000200210003900000010030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000006d0330008a00000020033000c9448d44700000040f0000006d0100035f00000015020000290000006c0220024f000000000220004c000025440000613d000000000101043b00000000001004350000000f010000290000000c020000290000000000210435000011430100004100008010020000390000000003000415000000ed0330008a00000020033000c9448d44700000040f000000ed0100035f0000001502000029000000ec0220024f000000000220004c000029b10000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c0000000b03000029000002c10000c13d000000120400002900000000010404330000002002100039000000140300002900000000003204350000004002100039000000010300008a000000000032043500000000030404330000000002320049000000000023043500000060011000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001890330008a00000020033000c9448d44700000040f000001890100035f0000001502000029000001880220024f000000000220004c00002ff50000613d000000000101043b001400000001001d00000000001004350000000f010000290000000e0200002900000000002104350000114301000041000080100200003900000000030004150000009d0330008a00000020033000c9448d44700000040f0000009d0100035f00000015020000290000009c0220024f000000000220004c000032920000613d000000000101043b448d448b0000040f000000000110004c000034490000c13d0000001204000029000000000104043300000040021000390000000d030000290000000000320435000000200210003900000014030000290000000000320435000000540210003900000011030000290000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000014b0330008a00000020033000c9448d44700000040f0000014b0100035f00000015020000290000014a0220024f000000000220004c000035f60000613d000000000101043b00000000001004350000000f010000290000000c020000290000000000210435000011430100004100008010020000390000000003000415000000f10330008a00000020033000c9448d44700000040f000000f10100035f0000001502000029000000f00220024f000000000220004c000037d80000613d000000000101043b448d448b0000040f000000ff0310018f000000000130004c000002c10000c13d0000001204000029000000000104043300000040021000390000000d030000290000000000320435000000200210003900000014030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000006b0330008a00000020033000c9448d44700000040f0000006b0100035f00000015020000290000006a0220024f000000000220004c00003a080000613d000000000101043b00000000001004350000000f010000290000000c020000290000000000210435000011430100004100008010020000390000000003000415000000ef0330008a00000020033000c9448d44700000040f000000ef0100035f0000001502000029000000ee0220024f000000000220004c00003c820000613d000000000101043b448d448b0000040f000000ff0310018f000002c10000013d000000010400008a0000112f0530009c000008b70000613d000011300330009c0000146b0000c13d000000040110008a00001131030000410000001f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c0000165d0000613d001200000009001d0000000401200370000000000101043b001000000001001d0000000001000019448d448b0000040f000000020110008c000016f70000c13d000011330100004100000000001004350000002001000039000000040200003900000000001204350000000701000039000000240200003900000000001204350000114c010000410000004402000039000000000012043500001134010000410000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000103d0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000010360000413d000000000420004c0000104b0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f000104300000113301000041000000000010043500000020010000390000001502000029000000000012043500000007010000390000001402000029000000000012043500001145010000410000004402000039000000000012043500001134010000410000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000106a0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000010630000413d000000000420004c000010780000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000108e0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000010870000413d000000000420004c0000109c0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f000104300000116c0330009c0000146b0000c13d000000040110008a00001131030000410000007f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c0000165f0000613d0000000401200370000000000401043b0000002401200370000000000301043b0000114d0130009c000017530000813d001500000004001d001400000003001d001200000009001d0000004401200370000000000101043b001100000001001d000011470110009c00001a060000213d0000006401200370000000000201043b000000000120004c0000000001000019000000010100c039001300000002001d000000000112004b00001b590000c13d0000000101000039448d448b0000040f0000000002000411001000000002001d000000000121013f0000114701100197000000000110004c00000000010000190000000101006039000012260000613d0000001302000029000000000220004c000012260000c13d0000113f01000041000000000010043900000000020004120000000401000039000d00000001001d000f00000002001d0000000000210439000000e001000039000000240200003900000000001204390000114001000041000080050200003900000000030004150000007f0330008a00000020033000c9448d44700000040f000000ff01000039000e00000001001d0000007e0110024f000000000110004c000020bf0000613d0000007f0100035f000000000501043b000000120400002900000000010404330000004002100039000000150300002900000000003204350000002003100039000c00000005001d000000000053043500000000030404330000000002320049000000000023043500000060011000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001310330008a00000020033000c9448d44700000040f000001310100035f0000000e02000029000001300220024f000000000220004c0000230b0000613d000000000101043b000b00000001001d0000001204000029000000000104043300000020021000390000000c0300002900000000003204350000004002100039000000010300008a000000000032043500000000030404330000000002320049000000000023043500000060011000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000008d0330008a00000020033000c9448d44700000040f0000008d0100035f0000000e020000290000008c0220024f000000000220004c000024220000613d000000000101043b000c00000001001d0000001204000029000000000104043300000020021000390000000b030000290000000000320435000000100200002900000060032002100000004002100039001000000003001d0000000000320435000000110200002900000060032002100000005402100039000a00000003001d0000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000008b0330008a00000020033000c9448d44700000040f0000008b0100035f0000000e020000290000008a0220024f000000000220004c000025d30000613d000000000101043b000000000010043500000020020000390000000d01000029000900000002001d0000000000120435000011430100004100008010020000390000000003000415000000c70330008a00000020033000c9448d44700000040f000000c70100035f0000000e02000029000000c60220024f000000000220004c00002a960000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c00001e5d0000c13d0000001204000029000000000104043300000040021000390000001003000029000000000032043500000020021000390000000b030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000005b0330008a00000020033000c9448d44700000040f0000005b0100035f0000000e020000290000005a0220024f000000000220004c000031fc0000613d000000000101043b00000000001004350000000d0100002900000009020000290000000000120435000011430100004100008010020000390000000003000415000000c10330008a00000020033000c9448d44700000040f000000c10100035f0000000e02000029000000c00220024f000000000220004c000033370000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c00001e5d0000c13d0000001204000029000000000104043300000040021000390000001003000029000000000032043500000020021000390000000c03000029000000000032043500000054021000390000000a030000290000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000170330008a00000020033000c9448d44700000040f000000170100035f0000000e02000029000000160220024f000000000220004c000036a90000613d000000000101043b00000000001004350000000d0100002900000009020000290000000000120435000011430100004100008010020000390000000003000415000000c50330008a00000020033000c9448d44700000040f000000c50100035f0000000e02000029000000c40220024f000000000220004c000038b60000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c00001e5d0000c13d0000001204000029000000000104043300000040021000390000001003000029000000000032043500000020021000390000000c030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000590330008a00000020033000c9448d44700000040f000000590100035f0000000e02000029000000580220024f000000000220004c00003c370000613d000000000101043b00000000001004350000000d0100002900000009020000290000000000120435000011430100004100008010020000390000000003000415000000c30330008a00000020033000c9448d44700000040f000000c30100035f0000000e02000029000000c20220024f000000000220004c00003d940000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c00001e5b0000c13d0000113301000041000000000010043500000020010000390000000402000039000000000012043500000007010000390000002402000039000000000012043500001145010000410000004402000039000000000012043500001134010000410000448f00010430000011860130009c0000146b0000c13d001200000009001d0000000101000039448d448b0000040f00001147021001970000032e0000013d000011720130009c0000146b0000c13d001200000009001d0000113f010000410000000000100439000000000100041200000004020000390000000000120439000000200100003900000024020000390000000000120439000011400100004100008005020000390000000003000415000001f90330008a00000020033000c9448d44700000040f000000ff01000039000001f80110024f000000000110004c000016610000613d000001f90100035f000000000201043b0000032e0000013d000011650130009c0000146b0000c13d001200000009001d0000113f010000410000000000100439000000000100041200000004020000390000000000120439000000e00100003900000024020000390000000000120439000011400100004100008005020000390000000003000415000001f50330008a00000020033000c9001500000003001d448d44700000040f000000ff01000039000001f40110024f000000000110004c000008b20000c13d00000000010000190000448f000104300000118f0330009c0000146b0000c13d000000040110008a00001131030000410000001f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c000016630000613d001200000009001d0000000401200370000000000101043b001100000001001d0000000301000039448d448b0000040f0000001102000029000000000112004b000017550000813d0000000301000039001500000001001d448d448b0000040f0000001102000029000000000112004b00001a080000813d00000015010000290000000000100435000011370100004100008010020000390000000003000415000001cb0330008a00000020033000c9448d44700000040f000001cb0100035f000000ff02000039001000000002001d000001ca0220024f000000000220004c00001b5b0000613d00000011020000290000000202200210000000000101043b0000000001210019000f00000001001d0000000201100039000e00000001001d448d448b0000040f00001139030000410000001702000039000000ff0110018f000000000110004c00001c560000c13d0000000e01000029448d448b0000040f0000113a0300004100000018020000390000ff000110018f000000000110004c00001c560000c13d0000000f01000029448d448b0000040f001500000001001d0000000f010000290000000101100039001400000001001d448d448b0000040f0000000802100210000000010300008a000000000232013f000001000220018f000000010220008a000000000112016f000000200300008a00000001061002700000001f02600039000a00000003001d000000000232016f000000120300002900000000050304330000002004500039000c00000004001d0000000002240019000000000023043500000015020000290000114702200197000d00000002001d000b00000005001d001500000006001d0000000000650435000000020210008c000024490000413d0000003f0110008c000024400000a13d00000014010000290000000000100435000011370100004100008010020000390000000003000415000001c70330008a00000020033000c9448d44700000040f000001c70100035f0000001002000029000001c60220024f000000000220004c000025f10000613d0000000c0200002900000015030000290000000003230019001300000003001d000000000301043b001500000002001d001400000003001d0000000001030019448d448b0000040f000000140300002900000015020000290000000000120435000000010330003900000020022000390000001301000029001500000002001d000000000121004b000012e10000213d000024460000013d0000117e0330009c0000146b0000c13d000000040110008a00001131030000410000007f0410008c000000000400001900000000040320190000113101100197000000000510004c0000000003008019000011310110009c00000000010400190000000001036019000000000110004c000016650000613d0000000401200370000000000401043b0000002401200370000000000301043b0000114d0130009c0000176b0000813d001500000004001d001400000003001d001200000009001d0000004401200370000000000101043b001100000001001d000011470110009c00001a0a0000213d0000006401200370000000000201043b000000000120004c0000000001000019000000010100c039001300000002001d000000000112004b00001b790000c13d0000000101000039448d448b0000040f0000000002000411001000000002001d000000000121013f0000114701100197000000000110004c000000000100001900000001010060390000145c0000613d0000001302000029000000000220004c0000145c0000c13d0000113f01000041000000000010043900000000020004120000000401000039000d00000001001d000f00000002001d0000000000210439000001000100003900000024020000390000000000120439000011400100004100008005020000390000000003000415000000850330008a00000020033000c9448d44700000040f000000ff01000039000e00000001001d000000840110024f000000000110004c000020c10000613d000000850100035f000000000501043b000000120400002900000000010404330000004002100039000000150300002900000000003204350000002003100039000c00000005001d000000000053043500000000030404330000000002320049000000000023043500000060011000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001470330008a00000020033000c9448d44700000040f000001470100035f0000000e02000029000001460220024f000000000220004c000023290000613d000000000101043b000b00000001001d0000001204000029000000000104043300000020021000390000000c0300002900000000003204350000004002100039000000010300008a000000000032043500000000030404330000000002320049000000000023043500000060011000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000990330008a00000020033000c9448d44700000040f000000990100035f0000000e02000029000000980220024f000000000220004c000024810000613d000000000101043b000c00000001001d0000001204000029000000000104043300000020021000390000000b030000290000000000320435000000100200002900000060032002100000004002100039001000000003001d0000000000320435000000110200002900000060032002100000005402100039000a00000003001d0000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000970330008a00000020033000c9448d44700000040f000000970100035f0000000e02000029000000960220024f000000000220004c0000260f0000613d000000000101043b000000000010043500000020020000390000000d01000029000900000002001d0000000000120435000011430100004100008010020000390000000003000415000000e70330008a00000020033000c9448d44700000040f000000e70100035f0000000e02000029000000e60220024f000000000220004c00002ab40000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c00001e740000c13d0000001204000029000000000104043300000040021000390000001003000029000000000032043500000020021000390000000b030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000690330008a00000020033000c9448d44700000040f000000690100035f0000000e02000029000000680220024f000000000220004c0000321a0000613d000000000101043b00000000001004350000000d0100002900000009020000290000000000120435000011430100004100008010020000390000000003000415000000e10330008a00000020033000c9448d44700000040f000000e10100035f0000000e02000029000000e00220024f000000000220004c000033550000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c00001e740000c13d0000001204000029000000000104043300000040021000390000001003000029000000000032043500000020021000390000000c03000029000000000032043500000054021000390000000a030000290000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000001d0330008a00000020033000c9448d44700000040f0000001d0100035f0000000e020000290000001c0220024f000000000220004c000036c70000613d000000000101043b00000000001004350000000d0100002900000009020000290000000000120435000011430100004100008010020000390000000003000415000000e50330008a00000020033000c9448d44700000040f000000e50100035f0000000e02000029000000e40220024f000000000220004c000038d40000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c00001e740000c13d0000001204000029000000000104043300000040021000390000001003000029000000000032043500000020021000390000000c030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000670330008a00000020033000c9448d44700000040f000000670100035f0000000e02000029000000660220024f000000000220004c00003c550000613d000000000101043b00000000001004350000000d0100002900000009020000290000000000120435000011430100004100008010020000390000000003000415000000e30330008a00000020033000c9448d44700000040f000000e30100035f0000000e02000029000000e20220024f000000000220004c00003db20000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c00001e720000c13d0000113301000041000000000010043500000020010000390000000402000039000000000012043500000007010000390000002402000039000000000012043500001145010000410000004402000039000000000012043500001134010000410000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000147b0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000014740000413d000000000420004c000014890000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f000104300000113f010000410000000000100439000000000100041200000004020000390000000000120439000000240100003900000012020000290000000000210439000011400100004100008005020000390000000003000415000001ad0330008a00000020033000c9448d44700000040f0000001101000029000001ac0110024f000000000110004c000016670000613d000001ad0100035f000000000101043b0000001502000029000000000121013f0000114701100197000000000110004c00000000030000190000000103006039000002c10000013d00000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000014b80000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000014b10000413d000000000420004c000014c60000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000014da0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000014d30000413d000000000420004c000014e80000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000014f80000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000014f10000413d000000000420004c000015060000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300000113301000041000000000010043500000020010000390000001502000029000000000012043500000007010000390000001402000029000000000012043500001145010000410000004402000039000000000012043500001134010000410000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000015230000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000151c0000413d000000000420004c000015310000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000155b0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000015540000413d000000000420004c000015690000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000157f0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000015780000413d000000000420004c0000158d0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300000001401000029448d448b0000040f000001000200008a000000000121016f0000001502000029000000000012043500000011010000290000002002100039000d00000002001d0000000e01000029000000000012043500000010010000290000000201100039448d448b0000040f0000113e02100197000000000220004c0000000002000019000000010200c03900000011040000290000008003400039001500000003001d00000000002304350000ff000210018f000000000220004c0000000002000019000000010200c0390000006003400039001400000003001d0000000000230435000000ff0110018f000000000110004c0000000001000019000000010100c0390000004002400039001300000002001d000000000012043500000010010000290000000301100039448d448b0000040f0000001104000029000000a0024000390000000000120435000000120a00002900000000010a04330000002003000039000000000031043500000000030404330000114703300197000000200410003900000000003404350000000d030000290000000005030433000000c00300003900000040041000390000000000340435000000e00310003900000000040504330000000000430435000000000640004c000015d80000613d0000010006100039000000000700001900000000086700190000002007700039000000000957001900000000090904330000000000980435000000000847004b000015cd0000413d000000000547004b000015d80000a13d0000000005640019000000000005043500000013050000290000000005050433000000000550004c0000000005000019000000010500c0390000006006100039000000000056043500000014050000290000000005050433000000000550004c0000000005000019000000010500c0390000008006100039000000000056043500000015050000290000000005050433000000000550004c0000000005000019000000010500c039000000a0061000390000000000560435000000c001100039000000000202043300000000002104350000001f014000390000000f02000029000000000121016f000000000131001900000a0a0000013d00000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000016030000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000015fc0000413d000000000420004c000016110000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000012040000290000000001040433000000440210003900001132030000410000000000320435000000240210003900000015030000390000000000320435000011330200004100000000002104350000000402100039000000200300003900000000003204350000000002040433000000000121004900000060011002100000113401100041000011350110019700000040022002100000113602200197000000000121019f0000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000164b0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000016440000413d000000000420004c000016590000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000016770000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000016700000413d000000000420004c000016850000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000016950000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000168e0000413d000000000420004c000016a30000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000016b30000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000016ac0000413d000000000420004c000016c10000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000016d10000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000016ca0000413d000000000420004c000016df0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f000104300000000201000039000f00000001001d0000000002000019448d44890000040f0000000301000039448d448b0000040f0000001002000029000000000112004b00001a0c0000813d0000000301000039001500000001001d448d448b0000040f0000001002000029000000000112004b00001b7b0000813d000000150100002900000000001004350000113701000041000080100200003900000000030004150000019d0330008a00000020033000c9448d44700000040f0000019d0100035f000000ff02000039000e00000002001d0000019c0220024f000000000220004c00001daf0000613d00000010020000290000000202200210000000000101043b0000000001210019001400000001001d0000000201100039001500000001001d448d448b0000040f00001139020000410000001703000039000000ff0110018f000000000110004c0000173f0000c13d0000001501000029448d448b0000040f0000113a0200004100000018030000390000ff000110018f000000000110004c0000173f0000c13d00000014010000290000000301100039448d448b0000040f0000113b020000410000000000200439001300000001001d0000113c010000410000800b0200003900000000030004150000019b0330008a00000020033000c9448d44700000040f0000000e010000290000019a0110024f000000000110004c0000249f0000613d0000113d0200004100000015030000390000019b0100035f000000000101043b0000001304000029000000000141004b0000262d0000813d000000120500002900000000010504330000004404100039000000000024043500000024021000390000000000320435000011330200004100000000002104350000000402100039000000200300003900000000003204350000000002050433000000000121004900000060011002100000113401100041000011350110019700000040022002100000113602200197000000000121019f0000448f0001043000000000010000190000448f0001043000000012040000290000000001040433000000440210003900001132030000410000000000320435000000240210003900000015030000390000000000320435000011330200004100000000002104350000000402100039000000200300003900000000003204350000000002040433000000000121004900000060011002100000113401100041000011350110019700000040022002100000113602200197000000000121019f0000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000177b0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000017740000413d000000000420004c000017890000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f00010430000000000420004c000017990000613d00000024033000390000000f0400002900000000050000190000000206000367000000000636034f000000000606043b0000002004400039000000000064043500000020033000390000000105500039000000000625004b000017900000413d00000002030003670000002402300370000000000202043b0000114704200197000200000004001d0000114d0420009c00001a220000813d0000004404300370000000000404043b0000114a0540009c00001b7d0000813d00000023054000390000113106000041000000000715004b0000000007000019000000000706401900001131081001970000113105500197000000000985004b000000000600a019000000000585013f000011310550009c00000000050700190000000005066019000000000550004c00001dcd0000613d0000000405400039000000000353034f000000000303043b0000114a0630009c000020c30000813d00000005063002100000002006600039000000120700002900000000080704330000000007860019000e00000008001d000000000887004b000023470000413d0000114a0870009c000023470000813d000000120800002900000000007804350000000e0700002900000000003704350000000005560019000000000151004b000024a10000813d00000000010000190000448f00010430000000000420004c000017d90000613d00000024033000390000000d0400002900000000050000190000000206000367000000000636034f000000000606043b0000002004400039000000000064043500000020033000390000000105500039000000000625004b000017d00000413d00000002020003670000002403200370000000000303043b0000114a0430009c00001a240000813d00000023043000390000113105000041000000000614004b0000000006000019000000000605401900001131071001970000113104400197000000000874004b000000000500a019000000000474013f000011310440009c00000000040600190000000004056019000000000440004c00001b7f0000613d0000000404300039000000000242034f000000000202043b0000114a0520009c00001dcf0000813d00000005052002100000002005500039000000120600002900000000070604330000000006750019000c00000007001d000000000776004b000020c50000413d0000114a0760009c000020c50000813d000000120700002900000000006704350000000c0600002900000000002604350000000004450019000000000141004b000023490000813d00000000010000190000448f00010430000000000120004c000018150000613d00000024013000390000000c0300002900000000040000190000000205000367000000000515034f000000000505043b0000114d0650009c00001ad30000813d0000002003300039000000000053043500000020011000390000000104400039000000000524004b0000180a0000413d0000001501000029000011520110009c00001a800000813d0000000101000039448d448b0000040f0000000002000411000000000121013f0000114701100197000000000110004c00001c6c0000c13d0000001401000029000000000010043500000005010000390000002002000039000e00000002001d0000000000120435000011430100004100008010020000390000000003000415000001a30330008a00000020033000c9448d44700000040f000001a30100035f000000ff02000039001000000002001d000001a20220024f000000000220004c00001e3b0000613d000000000101043b448d448b0000040f0000113f02000041000000000020043900000000030004120000000402000039000f00000002001d000d00000003001d0000000000320439000000a0020000390000002403000039000b00000003001d0000000000230439001300000001001d000011400100004100008005020000390000000003000415000000550330008a00000020033000c9448d44700000040f00000015020000290000001303000029000000000123004b000000000100001900000001010020390000000002230049000011540320009c00000000030000190000000103002039000000000131016f0000115403000041000000000110004c0000000001030019000000000102c019001300000001001d0000001001000029000000540110024f000000000110004c0000215f0000613d000000550100035f000000000101043b000000120400002900000000020404330000002003200039000000000013043500000040012000390000001403000029000000000031043500000000030404330000000001310049000000000013043500000060012000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001370330008a00000020033000c9448d44700000040f000001370100035f0000001002000029000001360220024f000000000220004c000023890000613d000000000101043b001100000001001d000000120400002900000000010404330000002402100039000000140300002900000000003204350000004402100039000000150300002900000000003204350000000003040433000a00000003001d000000000232004900000000002304350000006401100039000000000014043500000020013000390000000002010433000011550220019700001156022001c700000000002104350000000301000039001500000001001d448d448b0000040f00001157020000410000001503000029000000000023041f000900000001001d0000001102000029000000000012041e0000000c01000029000000000101043300000012040000290000000003040433000000c0023000390000000000240435000000000110004c0000000001000019000000010100c0390000008002300039000600000002001d00000000001204350000002001300039001100000001001d0000000a0200002900000000002104350000000001000410000300000001001d0000114701100197000800000001001d00000000001304350000006001300039000700000001001d0000000000010435001400000003001d0000004001300039000500000001001d00000000000104350000113b0100004100000000001004390000113c010000410000800b020000390000000003000415000000890330008a00000020033000c9448d44700000040f0000001001000029000000880110024f000000000110004c000025620000613d000000890100035f000000000101043b000000130200002900000000012100190000001402000029000000a002200039000200000002001d00000000001204350000001501000029448d448b0000040f001300000001001d00000001011000390000001502000029448d44890000040f0000001501000029000000000010043500000014010000290000000001010433001400000001001d00000013010000290000000201100210000a00000001001d0000115801100041001500000001001d448d448b0000040f000000140200002900001147022001970000115901100197000000000121019f0000001502000029448d44890000040f00000011010000290000000001010433001500000001001d0000000001010433000400000001001d0000000a010000290000115a01100041001100000001001d448d448b0000040f00000011020000290000000000200435001400000001001d000011370100004100008010020000390000000003000415000000b10330008a00000020033000c9448d44700000040f000000b10100035f0000001002000029000000b00220024f000000000220004c000029cf0000613d00000015020000290000002002200039001300000002001d00000014040000290000000802400210000000010300008a000000000232013f000001000220018f000000010220008a000000000242016f00000001022002700000001f02200039000000000301043b0000000501200270001500000003001d0000000001130019001400000001001d00000004010000290000001f0110008c00002beb0000a13d0000000401000029000000010110021000000001011001bf0000001102000029448d44890000040f000000130300002900000004010000290000000001130019001100000001001d000000000131004b000000150200002900002bf50000a13d001300000003001d001500000002001d0000000001030433448d44890000040f00000013030000290000001502000029000000010220003900000020033000390000001101000029000000000131004b000019140000213d00002bf50000013d00000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000019300000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000019290000413d000000000420004c0000193e0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000194e0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000019470000413d000000000420004c0000195c0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000196c0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000019650000413d000000000420004c0000197a0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000198a0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000019830000413d000000000420004c000019980000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000019aa0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000019a30000413d000000000420004c000019b80000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010004140000000e02000029000000040220008c00001b810000c13d000000010400003100001baa0000013d00000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000019d20000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000019cb0000413d000000000420004c000019e00000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000019f40000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000019ed0000413d000000000420004c00001a020000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000012040000290000000001040433000000440210003900001132030000410000000000320435000000240210003900000015030000390000000000320435000011330200004100000000002104350000000402100039000000200300003900000000003204350000000002040433000000000121004900000060011002100000113401100041000011350110019700000040022002100000113602200197000000000121019f0000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00001a340000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00001a2d0000413d000000000420004c00001a420000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00001a520000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00001a4b0000413d000000000420004c00001a600000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00001a700000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00001a690000413d000000000420004c00001a7e0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300000001201000029000000000101043300000044021000390000115303000041000000000032043500000024021000390000000f0300003900000000003204350000113302000041000000000021043500000004021000390000002003000039000000000032043500000064011000390000001202000029000000000202043300000000012100490000006001100210000011350110019700000040022002100000113602200197000000000121019f0000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00001aa50000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00001a9e0000413d000000000420004c00001ab30000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00001ac30000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00001abc0000413d000000000420004c00001ad10000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00001ae50000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00001ade0000413d000000000420004c00001af30000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f00010430000000000420004c00001b050000613d00000024033000390000000f0400002900000000050000190000000206000367000000000636034f000000000606043b0000002004400039000000000064043500000020033000390000000105500039000000000625004b00001afc0000413d00000002030003670000002402300370000000000202043b0000114704200197000100000004001d0000114d0420009c00001dd10000813d0000004404300370000000000404043b0000114a0540009c000020c70000813d00000023054000390000113106000041000000000715004b0000000007000019000000000706401900001131081001970000113105500197000000000985004b000000000600a019000000000585013f000011310550009c00000000050700190000000005066019000000000550004c000023500000613d0000000405400039000000000353034f000000000303043b0000114a0630009c000024a80000813d00000005063002100000002006600039000000120700002900000000080704330000000007860019000e00000008001d000000000887004b0000267d0000413d0000114a0870009c0000267d0000813d000000120800002900000000007804350000000e0700002900000000003704350000000005560019000000000151004b00002ad20000813d00000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00001b490000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00001b420000413d000000000420004c00001b570000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00001b690000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00001b620000413d000000000420004c00001b770000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f000104300000000d030000290000000f02000029000000000232004900000024022000390000004003300210000011360330019700000060022002100000113502200197000000000232019f000000c0011002100000114801100197000000000112019f0000000003000415000000510330008a00000020033000c90000000e02000029448d44700000040f0000000d060000290000001401000029000000500210024f000000510100035f000000000300001900000005043002100000000005460019000000000441034f000000000404043b00000000004504350000000104300039000000000334004b00000000030000190000000103004039000000010330018f000000000330004c000000000304001900001b970000c13d00030000000103550000006003100270000111250030019d0000112504300197000000000220004c00001dd30000613d0000001f01400039000000200200008a000000000221016f000000120300002900000000010304330000000002120019000000000023043500001131020000410000001f0340008c000000000300001900000000030220190000113104400197000000000540004c0000000002008019000011310440009c000000000203c019000000000220004c00001c6a0000613d00000000010104330000001102000029000000000212004b00001e0f0000c13d000000110100002900000000001004350000000501000039000000130200002900000000001204350000114301000041000080100200003900000000030004150000019f0330008a00000020033000c9448d44700000040f0000019f0100035f00000014020000290000019e0220024f000000000220004c000020c90000613d000000000201043b0000001001000029448d44890000040f0000001202000029000000000102043300000010030000290000000000310435000000200110003900000000020204330000000003210049000000000430004c000023540000c13d00001151010000410000000202000039000000000012041f00000011010000290000038f0000013d00000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00001bef0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00001be80000413d000000000420004c00001bfd0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00001c0d0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00001c060000413d000000000420004c00001c1b0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00001c2b0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00001c240000413d000000000420004c00001c390000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300000113f010000410000000000100439000000000100041200000004020000390000000000120439000000240100003900000012020000290000000000210439000011400100004100008005020000390000000003000415000000210330008a00000020033000c9448d44700000040f0000001501000029000000200110024f000000010110008c00001e390000c13d000000210100035f000000000101043b0000001302000029000000000121013f0000114701100197000000000110004c00000000030000190000000103006039000002c10000013d000000120500002900000000010504330000004404100039000000000034043500000024031000390000000000230435000011330200004100000000002104350000000402100039000000200300003900000000003204350000000002050433000000000121004900000060011002100000113401100041000011350110019700000040022002100000113602200197000000000121019f0000448f0001043000000000010000190000448f000104300000113301000041000000000010043500000020010000390000000402000039000000000012043500000007010000390000002402000039000000000012043500001145010000410000004402000039000000000012043500001134010000410000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00001c870000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00001c800000413d000000000420004c00001c950000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00001ca90000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00001ca20000413d000000000420004c00001cb70000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f00010430000000000120004c00001cc90000613d00000024013000390000000c0300002900000000040000190000000205000367000000000515034f000000000505043b0000114d0650009c000021ac0000813d0000002003300039000000000053043500000020011000390000000104400039000000000524004b00001cbe0000413d0000000101000039448d448b0000040f0000000002000411000000000121013f0000114701100197000000000110004c000021610000c13d0000001204000029000000000104043300000040021000390000118903000041000000000032043500000020021000390000000003000410000e00000003001d0000000000320435000000000204043300000000032100490000002403300039000000000032043500000044011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001cd0330008a00000020033000c9448d44700000040f000001cd0100035f000000ff02000039001000000002001d000001cc0220024f000000000220004c000023a70000613d000000000101043b001300000001001d0000001203000029000000000103043300000024021000390000001504000029000000000042043500000000040304330000000002420049000000000024043500000044011000390000000000130435001400000004001d00000020014000390000000002010433000011550220019700001189022001c700000000002104350000113f01000041000000000010043900000000020004120000000401000039000f00000001001d000d00000002001d00000000002104390000002401000039000b00000001001d0000000000010439000011400100004100008005020000390000000003000415000000830330008a00000020033000c9448d44700000040f0000001001000029000000820110024f000000000110004c000025640000613d000000830100035f000000000101043b000a00000001001d0000000301000039001500000001001d448d448b0000040f00001157020000410000001503000029000000000023041f000900000001001d0000001302000029000000000012041e0000000c01000029000000000101043300000012030000290000000004030433000000c0024000390000000000230435000000000110004c0000000001000019000000010100c0390000008002400039000600000002001d00000000001204350000002001400039001100000001001d000000140200002900000000002104350000000e010000290000114701100197000800000001001d00000000001404350000006001400039000700000001001d0000000000010435001300000004001d0000004001400039000500000001001d00000000000104350000113b0100004100000000001004390000113c010000410000800b020000390000000003000415000001430330008a00000020033000c9448d44700000040f0000001001000029000001420110024f000000000110004c000029ed0000613d000001430100035f000000000101043b0000000a0200002900000000012100190000001302000029000000a002200039000300000002001d00000000001204350000001501000029448d448b0000040f001400000001001d00000001011000390000001502000029448d44890000040f0000001501000029000000000010043500000013010000290000000001010433001300000001001d00000014010000290000000201100210000a00000001001d0000115801100041001500000001001d448d448b0000040f000000130200002900001147022001970000115901100197000000000121019f0000001502000029448d44890000040f00000011010000290000000001010433001500000001001d0000000001010433000400000001001d0000000a010000290000115a01100041001100000001001d448d448b0000040f00000011020000290000000000200435001400000001001d000011370100004100008010020000390000000003000415000000b50330008a00000020033000c9448d44700000040f000000b50100035f0000001002000029000000b40220024f000000000220004c00002ce70000613d00000015020000290000002002200039001300000002001d00000014040000290000000802400210000000010300008a000000000232013f000001000220018f000000010220008a000000000242016f00000001022002700000001f02200039000000000301043b0000000501200270001500000003001d0000000001130019001400000001001d00000004010000290000001f0110008c000030130000a13d0000000401000029000000010110021000000001011001bf0000001102000029448d44890000040f000000130300002900000004010000290000000001130019001100000001001d000000000131004b00000015020000290000301d0000a13d001300000003001d001500000002001d0000000001030433448d44890000040f00000013030000290000001502000029000000010220003900000020033000390000001101000029000000000131004b00001da10000213d0000301d0000013d00000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00001dbd0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00001db60000413d000000000420004c00001dcb0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f000104300000001f0340018f0000000502400270000000000420004c00001ddf0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000524004b00001dd80000413d000000000430004c00001ded0000613d00000003033002100000000502200210000000000402043300000000043401cf000000000434022f000000000121034f000000000101043b0000010003300089000000000131022f00000000013101cf000000000141019f0000000000120435000000600100003900000001011001ff00001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00001dff0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00001df80000413d000000000420004c00001e0d0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000001004350000000501000039000000130200002900000000001204350000114301000041000080100200003900000000030004150000004f0330008a00000020033000c9448d44700000040f0000004f0100035f00000014020000290000004e0220024f000000000220004c000021410000613d000000000101043b448d448b0000040f0000001002000029000000000112004b00001bc00000a13d0000001204000029000000000104043300000044021000390000115003000041000000000032043500000024021000390000001c030000390000000000320435000011330200004100000000002104350000000402100039000000130300002900000000003204350000000002040433000000000121004900000060011002100000113401100041000011350110019700000040022002100000113602200197000000000121019f0000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00001e490000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00001e420000413d000000000420004c00001e570000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f000104300000000001000412000f00000001001d0000113f01000041000000000010043900000004010000390000000f020000290000000000210439000000e00100003900000024020000390000000000120439000011400100004100008005020000390000000003000415000001a50330008a00000020033000c9001000000003001d448d44700000040f000000ff01000039000001a40110024f000000000110004c00001e870000c13d00000000010000190000448f000104300000000001000412000f00000001001d0000113f01000041000000000010043900000004010000390000000f020000290000000000210439000001000100003900000024020000390000000000120439000011400100004100008005020000390000000003000415000001b50330008a00000020033000c9001000000003001d448d44700000040f000000ff01000039000001b40110024f000000000110004c0000218c0000613d0000001001000029000000200110011a0000000001010367000000000101043b00000012040000290000000002040433000000200320003900000000001304350000004001200039000000150300002900000000003104350000000003040433000000000131004900000000001304350000006001200039001200000004001d0000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001ed0330008a00000020033000c9448d44700000040f000001ed0100035f000000ff02000039001500000002001d000001ec0220024f000000000220004c0000218e0000613d000000000501043b00000014010000290000006001100210000000120400002900000000020404330000004003200039000000000013043500000011010000290000006001100210000000540320003900000000001304350000002001200039001000000005001d0000000000510435000000000104043300000000031200490000004803300039000000000031043500000068022000390000000000240435000000400210021000001141022000410000113602200197000000000101043300000060011002100000113501100197000000000112019f00001142011001c7000080100200003900000000030004150000009b0330008a00000020033000c9448d44700000040f00000015010000290000009a0210024f0000009b0100035f0000001303000029000000000330004c000023e50000c13d000000000220004c000025930000613d000000000101043b001200000001001d000000000010043500000004010000390000002002000039001300000001001d000f00000002001d0000000000120435000011430100004100008010020000390000000003000415000000e90330008a00000020033000c9448d44700000040f000000e90100035f0000001502000029000000e80220024f000000000220004c00002a580000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000003910000613d0000001201000029000000000010043500000013010000290000000f020000290000000000120435000011430100004100008010020000390000000003000415000000310330008a00000020033000c9448d44700000040f000000310100035f0000001502000029000000300220024f000000010220008c0000317b0000c13d000000000101043b001500000001001d448d448b0000040f000001000200008a000000000121016f0000001502000029448d44890000040f00001175010000410000001302000029000000000012041f00000014010000290000001002000029000000000012041e0000001101000029001100000001001d0000038f0000013d000000000120004c00001f1c0000613d0000002401300039000000100300002900000000040000190000000205000367000000000515034f000000000505043b0000114d0650009c000024200000813d0000002003300039000000000053043500000020011000390000000104400039000000000524004b00001f110000413d0000113f01000041000000000010043900000000020004120000000401000039000e00000001001d000c00000002001d000000000021043900000100020000390000002401000039000d00000001001d000b00000002001d00000000002104390000114001000041000080050200003900000000030004150000017d0330008a00000020033000c9448d44700000040f000000ff01000039000f00000001001d0000017c0110024f000000000110004c000023c50000613d0000017d0100035f000000000501043b000000120400002900000000010404330000004002100039000000150300002900000000003204350000002003100039000a00000005001d000000000053043500000000030404330000000002320049000000000023043500000060011000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001450330008a00000020033000c9448d44700000040f000001450100035f0000000f02000029000001440220024f000000000220004c000025660000613d000000000101043b000900000001001d0000001204000029000000000104043300000020021000390000000a0300002900000000003204350000004002100039000000010300008a000000000032043500000000030404330000000002320049000000000023043500000060011000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000950330008a00000020033000c9448d44700000040f000000950100035f0000000f02000029000000940220024f000000000220004c000029ef0000613d0000000002000411000000000101043b000800000001001d0000001204000029000000000104043300000020031000390000000905000029000000000053043500000060032002100000004002100039000a00000003001d0000000000320435000000140200002900000060032002100000005402100039001400000003001d0000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000930330008a00000020033000c9448d44700000040f000000930100035f0000000f02000029000000920220024f000000000220004c00002d050000613d000000000101043b000000000010043500000020020000390000000e01000029000700000002001d0000000000120435000011430100004100008010020000390000000003000415000000dd0330008a00000020033000c9448d44700000040f000000dd0100035f0000000f02000029000000dc0220024f000000000220004c000030f40000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000032560000c13d0000001204000029000000000104043300000040021000390000000a030000290000000000320435000000200210003900000009030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000650330008a00000020033000c9448d44700000040f000000650100035f0000000f02000029000000640220024f000000000220004c000034640000613d000000000101043b00000000001004350000000e0100002900000007020000290000000000120435000011430100004100008010020000390000000003000415000000d70330008a00000020033000c9448d44700000040f000000d70100035f0000000f02000029000000d60220024f000000000220004c000036140000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000032560000c13d0000001204000029000000000104043300000040021000390000000a030000290000000000320435000000200210003900000008030000290000000000320435000000540210003900000014030000290000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000001b0330008a00000020033000c9448d44700000040f0000001b0100035f0000000f020000290000001a0220024f000000000220004c0000393f0000613d000000000101043b00000000001004350000000e0100002900000007020000290000000000120435000011430100004100008010020000390000000003000415000000db0330008a00000020033000c9448d44700000040f000000db0100035f0000000f02000029000000da0220024f000000000220004c00003a260000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000032560000c13d0000001204000029000000000104043300000040021000390000000a030000290000000000320435000000200210003900000008030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000630330008a00000020033000c9448d44700000040f000000630100035f0000000f02000029000000620220024f000000000220004c00003dd00000613d000000000101043b00000000001004350000000e0100002900000007020000290000000000120435000011430100004100008010020000390000000003000415000000d90330008a00000020033000c9448d44700000040f000000d90100035f0000000f02000029000000d80220024f000000000220004c00003edb0000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000032560000c13d000011330100004100000000001004350000000e010000290000000702000029000000000021043500000007010000390000000d02000029000000000012043500001145010000410000004402000039000000000012043500001134010000410000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000024033000390000000205000367000000000535034f0000001f0340018f000000130600002900000020096000390000000504400270000000000640004c0000207f0000613d000000000600001900000005076002100000000008790019000000000775034f000000000707043b00000000007804350000000106600039000000000746004b000020770000413d001000000009001d000000000630004c000020900000613d0000000504400210000000000545034f000000100600002900000000044600190000000303300210000000000604043300000000063601cf000000000636022f000000000505043b0000010003300089000000000535022f00000000033501cf000000000363019f000000000034043500000013030000290000000002320019000000000002043500000002020003670000004403200370000000000303043b000011490430009c000023520000213d00000023043000390000113105000041000000000614004b0000000006000019000000000605401900001131071001970000113104400197000000000874004b000000000500a019000000000474013f000011310440009c00000000040600190000000004056019000000000440004c000024aa0000613d0000000404300039000000000242034f000000000202043b0000114a0520009c0000267f0000813d00000005052002100000002005500039000000120600002900000000070604330000000006750019000f00000007001d000000000776004b00002ad90000413d0000114a0760009c00002ad90000813d000000120700002900000000006704350000000f0600002900000000002604350000000004450019000000000141004b00002d630000813d00000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000020d70000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000020d00000413d000000000420004c000020e50000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000020f50000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000020ee0000413d000000000420004c000021030000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000021130000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000210c0000413d000000000420004c000021210000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000021310000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000212a0000413d000000000420004c0000213f0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000214f0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000021480000413d000000000420004c0000215d0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f000104300000113301000041000000000010043500000020010000390000000402000039000000000012043500000007010000390000002402000039000000000012043500001145010000410000004402000039000000000012043500001134010000410000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000217c0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000021750000413d000000000420004c0000218a0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000219c0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000021950000413d000000000420004c000021aa0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f00010430000000000120004c000021be0000613d0000002401300039000000100300002900000000040000190000000205000367000000000515034f000000000505043b0000114d0650009c000025cf0000813d0000002003300039000000000053043500000020011000390000000104400039000000000524004b000021b30000413d0000113f01000041000000000010043900000000020004120000000401000039000e00000001001d000c00000002001d0000000000210439000000e0020000390000002401000039000d00000001001d000b00000002001d00000000002104390000114001000041000080050200003900000000030004150000017f0330008a00000020033000c9448d44700000040f000000ff01000039000f00000001001d0000017e0110024f000000000110004c000025840000613d0000017f0100035f000000000501043b000000120400002900000000010404330000004002100039000000150300002900000000003204350000002003100039000a00000005001d000000000053043500000000030404330000000002320049000000000023043500000060011000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001330330008a00000020033000c9448d44700000040f000001330100035f0000000f02000029000001320220024f000000000220004c00002a0d0000613d000000000101043b000900000001001d0000001204000029000000000104043300000020021000390000000a0300002900000000003204350000004002100039000000010300008a000000000032043500000000030404330000000002320049000000000023043500000060011000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000a90330008a00000020033000c9448d44700000040f000000a90100035f0000000f02000029000000a80220024f000000000220004c00002d230000613d0000000002000411000000000101043b000800000001001d0000001204000029000000000104043300000020031000390000000905000029000000000053043500000060032002100000004002100039000a00000003001d0000000000320435000000140200002900000060032002100000005402100039001400000003001d0000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000a70330008a00000020033000c9448d44700000040f000000a70100035f0000000f02000029000000a60220024f000000000220004c000031120000613d000000000101043b000000000010043500000020020000390000000e01000029000700000002001d0000000000120435000011430100004100008010020000390000000003000415000001070330008a00000020033000c9448d44700000040f000001070100035f0000000f02000029000001060220024f000000000220004c000032b00000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000033cd0000c13d0000001204000029000000000104043300000040021000390000000a030000290000000000320435000000200210003900000009030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000750330008a00000020033000c9448d44700000040f000000750100035f0000000f02000029000000740220024f000000000220004c000036320000613d000000000101043b00000000001004350000000e0100002900000007020000290000000000120435000011430100004100008010020000390000000003000415000000ff0330008a00000020033000c9448d44700000040f000000ff0100035f0000000f02000029000000fe0220024f000000000220004c000037f60000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000033cd0000c13d0000001204000029000000000104043300000040021000390000000a030000290000000000320435000000200210003900000008030000290000000000320435000000540210003900000014030000290000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000001f0330008a00000020033000c9448d44700000040f0000001f0100035f0000000f020000290000001e0220024f000000000220004c00003a440000613d000000000101043b00000000001004350000000e0100002900000007020000290000000000120435000011430100004100008010020000390000000003000415000001030330008a00000020033000c9448d44700000040f000001030100035f0000000f02000029000001020220024f000000000220004c00003ca00000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000033cd0000c13d0000001204000029000000000104043300000040021000390000000a030000290000000000320435000000200210003900000008030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000730330008a00000020033000c9448d44700000040f000000730100035f0000000f02000029000000720220024f000000000220004c00003ef90000613d000000000101043b00000000001004350000000e0100002900000007020000290000000000120435000011430100004100008010020000390000000003000415000001010330008a00000020033000c9448d44700000040f000001010100035f0000000f02000029000001000220024f000000000220004c000040630000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000033cd0000c13d000011330100004100000000001004350000000e010000290000000702000029000000000021043500000007010000390000000d02000029000000000012043500001145010000410000004402000039000000000012043500001134010000410000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000023190000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000023120000413d000000000420004c000023270000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000023370000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000023300000413d000000000420004c000023450000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f00010430000000000120004c000024ac0000c13d0000000d010000290000000001010433000000000110004c000003910000613d000025860000013d00000000010000190000448f0001043000000000010000190000448f00010430000000200330021000000002033001bf00000000040204330000115105000041000000000053041f0000001103000029000000000043041e0000002002200039000000000321004b000003910000a13d000023630000013d000000000003041e0000004002200039000000000321004b000003910000a13d000000000421004900000000030204330000003f0440008c0000235f0000a13d00000020042000390000000004040433000000000043041e000023600000013d00000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000023790000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000023720000413d000000000420004c000023870000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000023970000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000023900000413d000000000420004c000023a50000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000023b50000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000023ae0000413d000000000420004c000023c30000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000023d50000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000023ce0000413d000000000420004c000023e30000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f00010430000000000220004c000025b10000613d000000000101043b001200000001001d000000000010043500000004010000390000002002000039001300000001001d000f00000002001d0000000000120435000011430100004100008010020000390000000003000415000000eb0330008a00000020033000c9448d44700000040f000000eb0100035f0000001502000029000000ea0220024f000000000220004c00002a760000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000003910000c13d0000001201000029000000000010043500000013010000290000000f0200002900000000001204350000114301000041000080100200003900000000030004150000003b0330008a00000020033000c9448d44700000040f0000003b0100035f00000015020000290000003a0220024f000000010220008c000031990000c13d000000000101043b001500000001001d448d448b0000040f000001000200008a000000000121016f00000001011001bf0000001502000029448d44890000040f0000115f010000410000001302000029000000000012041f00000014010000290000001002000029000000000012041e0000001101000029001100000001001d0000038f0000013d00000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000024300000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000024290000413d000000000420004c0000243e0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300000001401000029448d448b0000040f000001000200008a000000000121016f0000000c0200002900000000001204350000000b010000290000000001010433001500000001001d0000001501000029000000030110008c0000000001000019000024600000a13d0000000b0300002900000023013000390000000001010433000000180110027000001190011001970000002202300039000000000202043300000010022002700000119102200197000000000112019f0000002102300039000000000202043300000008022002700000119202200197000000000121019f0000000c0200002900000000020204330000119302200197000000000121019f000000120300002900000000040304330000114e020000410000000000240435001400000004001d000000040240003900000000001204350000000001030433001500000001001d000011260100004100000000001004390000000401000039001300000001001d0000000d020000290000000000210439000011270100004100008002020000390000000003000415000001c90330008a00000020033000c9448d44700000040f0000001001000029000001c80110024f000000000110004c0000247f0000613d000001c90100035f000000000101043b000000000110004c0000253e0000c13d00000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000248f0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000024880000413d000000000420004c0000249d0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f00010430000000000130004c000026810000c13d0000000f010000290000000001010433000000000110004c000003910000613d00002a2b0000013d00000000010000190000448f0001043000000000010000190000448f0001043000000024013000390000000c0300002900000000040000190000000205000367000000000515034f000000000505043b0000114d0650009c000025d10000813d0000002003300039000000000053043500000020011000390000000104400039000000000524004b000024af0000413d0000000c0100002900000000010104330000000d030000290000000002030433000000000212004b000025860000c13d000000000110004c000003910000613d0000002002000039000000200130003900000000030004110000114704300197000900000004001d0000006003300210000b00000003001d0000801003000039000a00000003001d000000ff03000039001500000003001d001300000000001d0000000c040000290000000002420019000000000502043300000000060104330000001204000029000000000104043300000040021000390000000b030000290000000000320435001100000005001d0000006002500210000000540310003900000000002304350000002002100039001000000006001d0000000000620435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c70000000003000415000001c10330008a00000020033000c90000000a02000029448d44700000040f000001c10100035f0000001502000029000001c00220024f000000000220004c000033910000613d000000000101043b000f00000001001d000000000010043500000004010000390000002002000039001400000001001d000e00000002001d0000000000120435000011430100004100008010020000390000000003000415000000df0330008a00000020033000c9448d44700000040f000000df0100035f0000001502000029000000de0220024f000000000220004c000033af0000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c0000252e0000613d0000000f01000029000000000010043500000014010000290000000e0200002900000000001204350000114301000041000080100200003900000000030004150000002f0330008a00000020033000c9448d44700000040f0000002f0100035f00000015020000290000002e0220024f000000010220008c000034a20000c13d000000000101043b000f00000001001d448d448b0000040f000001000200008a000000000121016f0000000f02000029448d44890000040f00001175010000410000001402000029000000000012041f00000009010000290000001002000029000000000012041e00000011010000290000114701100197000000000001041e000000130500002900000001055000390000000d030000290000000001030433000000000115004b000003910000813d0000000501500210000000200210003900000000013200190000000c040000290000000003040433001300000005001d000000000335004b000024cf0000413d00000000010000190000448f0001043000000000010004140000000d02000029000000040220008c000028cb0000c13d0000000104000031000028f40000013d00000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000025520000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000254b0000413d000000000420004c000025600000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000025740000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000256d0000413d000000000420004c000025820000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f000104300000113301000041000000000010043500000020010000390000000402000039000000000012043500000007010000390000002402000039000000000012043500001176010000410000004402000039000000000012043500001134010000410000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000025a10000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000259a0000413d000000000420004c000025af0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000025bf0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000025b80000413d000000000420004c000025cd0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000025e10000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000025da0000413d000000000420004c000025ef0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000025ff0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000025f80000413d000000000420004c0000260d0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000261d0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000026160000413d000000000420004c0000262b0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300000001501000029448d448b0000040f0000113e01100197000000000110004c0000000001000412001300000001001d00002adb0000c13d0000001501000029448d448b0000040f000001000200008a001100000002001d000000000121016f00000001011001bf0000001502000029448d44890000040f0000001401000029448d448b0000040f000011460200004100000012030000290000000004030433001500000004001d00000000002404350000113f02000041000000000020043900000004040000390000001302000029000d00000004001d000000000024043900000024020000390000000000320439001300000001001d000011400100004100008005020000390000000003000415000001990330008a00000020033000c9448d44700000040f0000000e01000029000001980110024f000000000110004c00002d610000613d000001990100035f000000000101043b000c00000001001d0000001503000029000000240130003900000012020000290000000000210435000000130100002900001147011001970000000402300039000000000012043500000014010000290000000101100039000b00000001001d448d448b0000040f000000150200002900000044022000390000000c030000290000114703300197000c00000003001d00000000030100190000000101300270001300000001001d001400000003001d000000010130018f000000000110004c000031b70000c13d00000013010000290000007f0110018f000000000012043500000011010000290000001402000029000000000112016f0000001503000029000000640230003900000000001204350000008401300039001500000001001d000031e20000013d00000000010000190000448f0001043000000000010000190000448f0001043000000024014000390000000e0400002900000000050000190000000206000367000000000616034f000000000606043b0000114d0760009c00002a940000813d0000002004400039000000000064043500000020011000390000000105500039000000000635004b000026840000413d0000000e0100002900000000010104330000000f040000290000000003040433000000000313004b00002a2b0000c13d000000000110004c000003910000613d0000006001200210000400000001001d000000200100003900000020064000390000000002000411000300000002001d0000006002200210000100000002001d0000000002000412000b00000002001d0000000404000039000000e002000039000600000002001d0000002402000039000c00000002001d0000800502000039000500000002001d001100000000001d0000000e03000029001400000004001d0000000001310019001000000006001d0000000002060433001300000002001d000d00000001001d0000000001010433000900000001001d0000113f0100004100000000001004390000000b0100002900000000001404390000000c010000290000000602000029000000000021043900001140010000410000000003000415000001c50330008a00000020033000c90000000502000029448d44700000040f000000ff01000039001500000001001d000001c40110024f000000000110004c000038160000613d000001c50100035f000000000501043b000000120400002900000000010404330000004002100039000000130300002900000000003204350000002003100039000800000005001d000000000053043500000000030404330000000002320049000000000023043500000060011000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001510330008a00000020033000c9448d44700000040f000001510100035f0000001502000029000001500220024f000000000220004c000038180000613d000000000101043b000a00000001001d000000000010043500000005020000390000002001000039001300000001001d000700000002001d0000000000210435000011430100004100008010020000390000000003000415000000ad0330008a00000020033000c9448d44700000040f000000ad0100035f0000001502000029000000ac0220024f000000000220004c000038360000613d000000000101043b448d448b0000040f000000000110004c0000271c0000613d0000113f01000041000000000010043900000014010000290000000b02000029000000000021043900000012010000290000000c020000290000000000120439000011400100004100008005020000390000000003000415000000250330008a00000020033000c9448d44700000040f0000001501000029000000240110024f000000010110008c0000391f0000c13d000000250100035f000000000101043b0000000302000029000000000121013f0000114701100197000000000110004c00000000010000190000000101006039000000120400002900000011020000290000001003000029000000000110004c000027930000c13d000039100000013d0000001204000029000000000104043300000040021000390000000103000029000000000032043500000020021000390000000a030000290000000000320435000000090200002900000060032002100000005402100039000900000003001d0000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001930330008a00000020033000c9448d44700000040f000001930100035f0000001502000029000001920220024f000000000220004c000039cc0000613d000000000101043b0000000000100435000000140100002900000013020000290000000000120435000011430100004100008010020000390000000003000415000001110330008a00000020033000c9448d44700000040f000001110100035f0000001502000029000001100220024f000000000220004c000039ea0000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000000120400002900000011020000290000001003000029000027930000c13d000000000104043300000040021000390000000103000029000000000032043500000020021000390000000a030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000790330008a00000020033000c9448d44700000040f000000790100035f0000001502000029000000780220024f000000000220004c00003cdc0000613d000000000101043b0000000000100435000000140100002900000013020000290000000000120435000011430100004100008010020000390000000003000415000001090330008a00000020033000c9448d44700000040f000001090100035f0000001502000029000001080220024f000000000220004c00003cfa0000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000000120400002900000011020000290000001003000029000028060000613d0000000f010000290000000001010433000000000112004b000038540000813d0000000e010000290000000001010433000000000112004b000038560000813d00000000050304330000000d01000029000000000601043300000000010404330000004002100039000000040300002900000000003204350000002002100039001000000005001d0000000000520435000d00000006001d000000600260021000000054031000390000000000230435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001c30330008a00000020033000c9448d44700000040f000001c30100035f0000001502000029000001c20220024f000000000220004c000038580000613d000000000101043b000a00000001001d00000000001004350000001401000029000000130200002900000000001204350000114301000041000080100200003900000000030004150000010f0330008a00000020033000c9448d44700000040f0000010f0100035f00000015020000290000010e0220024f000000000220004c000038760000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c0000001404000029000027f70000613d0000000a01000029000000000010043500000013010000290000000000410435000011430100004100008010020000390000000003000415000000330330008a00000020033000c9448d44700000040f000000330100035f0000001502000029000000320220024f000000010220008c000039210000c13d000000000101043b001500000001001d448d448b0000040f000001000200008a000000000121016f0000001502000029448d44890000040f00001175010000410000001404000029000000000014041f00000002010000290000001002000029000000000012041e0000000d010000290000114701100197000000000001041e000000110500002900000001055000390000000f020000290000000001020433000000000115004b000003910000813d0000000501500210000000200110003900000000062100190000000e030000290000000002030433001100000005001d000000000225004b000026ab0000413d000038940000013d00000000010404330000002002100039000000080300002900000000003204350000004002100039000000010300008a000000000032043500000000030404330000000002320049000000000023043500000060011000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000018d0330008a00000020033000c9448d44700000040f0000018d0100035f00000015020000290000018c0220024f000000000220004c00003e630000613d000000000101043b000a00000001001d0000000000100435000000130100002900000007020000290000000000210435000011430100004100008010020000390000000003000415000000ab0330008a00000020033000c9448d44700000040f000000ab0100035f0000001502000029000000aa0220024f000000000220004c00003e810000613d000000000101043b448d448b0000040f000000000110004c000028570000613d0000113f01000041000000000010043900000014010000290000000b02000029000000000021043900000012010000290000000c020000290000000000120439000011400100004100008005020000390000000003000415000001b30330008a00000020033000c9448d44700000040f0000001501000029000001b20110024f000000000110004c00003f170000613d000001b30100035f000000000101043b0000000302000029000000000121013f0000114701100197000000000110004c00000000010000190000000101006039000000120400002900000011020000290000001003000029000027190000013d0000001204000029000000000104043300000040021000390000000103000029000000000032043500000020021000390000000a030000290000000000320435000000540210003900000009030000290000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000014f0330008a00000020033000c9448d44700000040f0000014f0100035f00000015020000290000014e0220024f000000000220004c000040270000613d000000000101043b00000000001004350000001401000029000000130200002900000000001204350000114301000041000080100200003900000000030004150000010d0330008a00000020033000c9448d44700000040f0000010d0100035f00000015020000290000010c0220024f000000000220004c000040450000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000000120400002900000011020000290000001003000029000027930000c13d000000000104043300000040021000390000000103000029000000000032043500000020021000390000000a030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000770330008a00000020033000c9448d44700000040f000000770100035f0000001502000029000000760220024f000000000220004c000041ac0000613d000000000101043b00000000001004350000001401000029000000130200002900000000001204350000114301000041000080100200003900000000030004150000010b0330008a00000020033000c9448d44700000040f0000010b0100035f00000015020000290000010a0220024f000000000220004c000041ca0000613d000000000101043b448d448b0000040f000000ff0110018f000000120400002900000011020000290000001003000029000027190000013d00000015030000290000001402000029000000000232004900000024022000390000004003300210000011360330019700000060022002100000113502200197000000000232019f000000c0011002100000114801100197000000000112019f0000000003000415000000af0330008a00000020033000c90000000d02000029448d44700000040f00000015060000290000001001000029000000ae0210024f000000af0100035f000000000300001900000005043002100000000005460019000000000441034f000000000404043b00000000004504350000000104300039000000000334004b00000000030000190000000103004039000000010330018f000000000330004c0000000003040019000028e10000c13d00030000000103550000006003100270000111250030019d0000112504300197000000000220004c00002b910000613d0000001f014000390000000a02000029000000000221016f000000120300002900000000010304330000000002120019000000000023043500001131020000410000001f0340008c000000000300001900000000030220190000113104400197000000000540004c0000000002008019000011310440009c000000000203c019000000000220004c00002a380000613d0000000001010433001500000001001d0000000f01000029448d448b0000040f0000000002000411000f00000002001d0000006005200210000000120400002900000000020404330000004003200039001400000005001d0000000000530435000000600110021000000054032000390000000000130435000000200120003900000015030000290000000000310435000000000104043300000000031200490000004803300039000000000031043500000068022000390000000000240435000000400210021000001141022000410000113602200197000000000101043300000060011002100000113501100197000000000112019f00001142011001c7000080100200003900000000030004150000016f0330008a00000020033000c9448d44700000040f0000016f0100035f00000010020000290000016e0220024f000000000220004c00002d430000613d000000000101043b000000000010043500000020020000390000001301000029000d00000002001d0000000000120435000011430100004100008010020000390000000003000415000001150330008a00000020033000c9448d44700000040f000001150100035f0000001002000029000001140220024f000000000220004c0000315d0000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000029850000c13d00000012040000290000000001040433000000400210003900000014030000290000000000320435000000200210003900000015030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000007b0330008a00000020033000c9448d44700000040f0000007b0100035f00000010020000290000007a0220024f000000000220004c000034840000613d000000000101043b000000000010043500000013010000290000000d020000290000000000120435000011430100004100008010020000390000000003000415000001130330008a00000020033000c9448d44700000040f000001130100035f0000001002000029000001120220024f000000000220004c000036890000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000029850000c13d0000000101000039448d448b0000040f0000000f02000029000000000121013f0000114701100197000000000110004c000039810000c13d0000000e01000029448d448b0000040f0000119402000041000000000121016f00000100011001bf0000000e02000029448d44890000040f00001195010000410000000202000039000000000012041f00000011010000290000038f0000013d00000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000029a10000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000299a0000413d000000000420004c000029af0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000029bf0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000029b80000413d000000000420004c000029cd0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000029dd0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000029d60000413d000000000420004c000029eb0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000029fd0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000029f60000413d000000000420004c00002a0b0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00002a1b0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00002a140000413d000000000420004c00002a290000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300000113301000041000000000010043500000020010000390000000402000039000000000012043500000007010000390000002402000039000000000012043500001176010000410000004402000039000000000012043500001134010000410000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00002a480000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00002a410000413d000000000420004c00002a560000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00002a660000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00002a5f0000413d000000000420004c00002a740000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00002a840000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00002a7d0000413d000000000420004c00002a920000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00002aa40000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00002a9d0000413d000000000420004c00002ab20000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00002ac20000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00002abb0000413d000000000420004c00002ad00000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f00010430000000000130004c00002d8a0000c13d0000000f010000290000000001010433000000000110004c000003910000613d0000314e0000013d00000000010000190000448f000104300000113f01000041000000000010043900000004020000390000001301000029001100000002001d0000000000120439000000c0010000390000002402000039000d00000002001d00000000001204390000114001000041000080050200003900000000030004150000004d0330008a00000020033000c9448d44700000040f0000000e010000290000004c0110024f000000000110004c00002fd50000613d0000004d0100035f000000000101043b000000120400002900000000020404330000002003200039000000000013043500000040012000390000001003000029000000000031043500000000030404330000000001310049000000000013043500000060012000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001390330008a00000020033000c9448d44700000040f000001390100035f0000000e02000029000001380220024f000000000220004c000032380000613d000000000501043b00000000010004110000006003100210000000120400002900000000010404330000004002100039000b00000003001d000000000032043500000000020004100000006002200210000000540310003900000000002304350000002002100039000c00000005001d0000000000520435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000870330008a00000020033000c9448d44700000040f000000870100035f0000000e02000029000000860220024f000000000220004c000033730000613d000000000101043b000000000010043500000020020000390000001101000029000a00000002001d0000000000120435000011430100004100008010020000390000000003000415000000bb0330008a00000020033000c9448d44700000040f000000bb0100035f0000000e02000029000000ba0220024f000000000220004c000034c00000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000026340000c13d0000001204000029000000000104043300000040021000390000000b03000029000000000032043500000020021000390000000c030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000570330008a00000020033000c9448d44700000040f000000570100035f0000000e02000029000000560220024f000000000220004c000038f20000613d000000000101043b000000000010043500000011010000290000000a020000290000000000120435000011430100004100008010020000390000000003000415000000b90330008a00000020033000c9448d44700000040f000000b90100035f0000000e02000029000000b80220024f000000000220004c000039ae0000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000026340000c13d0000113301000041000000000010043500000011010000290000000a02000029000000000021043500000007010000390000000d02000029000000000012043500001145010000410000004402000039000000000012043500001134010000410000448f000104300000001f0340018f0000000502400270000000000420004c00002b9d0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000524004b00002b960000413d000000000430004c00002bab0000613d00000003033002100000000502200210000000000402043300000000043401cf000000000434022f000000000121034f000000000101043b0000010003300089000000000131022f00000000013101cf000000000141019f0000000000120435000000600100003900000001011001ff00001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00002bbd0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00002bb60000413d000000000420004c00002bcb0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00002bdb0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00002bd40000413d000000000420004c00002be90000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000013010000290000000001010433000001000200008a000000000121016f00000004020000290000000102200210000000000121019f0000001102000029448d44890000040f00000015020000290000001401000029000000000121004b00002c000000a13d001500000002001d0000000001000019448d44890000040f000000150200002900000001022000390000001401000029000000000121004b00002bf80000213d00000005010000290000000001010433001400000001001d0000000a010000290000115b01100041001500000001001d448d448b0000040f000000060200002900000000020204330000115c03000041000000000220004c000000000203001900000000020060190000001403000029000000000330004c0000000003000019000000010300c0390000115d01100197000000000131019f00000007030000290000000003030433000000000330004c00000100030000390000000003006019000000000131019f000000000121019f0000001502000029448d44890000040f0000000a010000290000115e0210004100000002010000290000000001010433448d44890000040f0000113f0100004100000000001004390000000f010000290000000d020000290000000000210439000000c0010000390000000b020000290000000000120439000011400100004100008005020000390000000003000415000001810330008a00000020033000c9448d44700000040f0000001001000029000001800110024f000000000110004c00002d410000613d000001810100035f000000000101043b000000120400002900000000020404330000002003200039000000000013043500000040012000390000000903000029000000000031043500000000030404330000000001310049000000000013043500000060012000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000013b0330008a00000020033000c9448d44700000040f0000013b0100035f00000010020000290000013a0220024f000000000220004c000031300000613d0000000c020000290000000002020433000000000220004c00000a060000613d00000003020000290000006002200210000b00000002001d0000000c020000290000002002200039000a00000002001d000000000101043b001300000001001d0000801001000039001500000001001d000000000200001900002c7a0000013d000000000101043b000d00000001001d448d448b0000040f000001000200008a000000000121016f00000001011001bf0000000d02000029448d44890000040f0000115f010000410000000f02000029000000000012041f000000110100002900001147011001970000001302000029000000000012041e0000000801000029000000000001041e000000140200002900000001022000390000000c010000290000000001010433000000000112004b00000a060000813d001400000002001d00000005012002100000000a0200002900000000011200190000000001010433001100000001001d0000006001100210000000120400002900000000020404330000004003200039000000000013043500000020012000390000001303000029000000000031043500000054012000390000000b030000290000000000310435000000000104043300000000031200490000004803300039000000000031043500000068022000390000000000240435000000400210021000001141022000410000113602200197000000000101043300000060011002100000113501100197000000000112019f00001142011001c70000000003000415000000270330008a00000020033000c90000001502000029448d44700000040f000000270100035f0000001002000029000000260220024f000000000220004c000034de0000613d000000000101043b000d00000001001d00000000001004350000000e010000290000000f02000029000000000021043500001143010000410000000003000415000000bd0330008a00000020033000c90000001502000029448d44700000040f000000bd0100035f0000001002000029000000bc0220024f000000000220004c000034fc0000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c00002c740000c13d0000000d0100002900000000001004350000000e010000290000000f020000290000000000210435000011430100004100008010020000390000000003000415000000390330008a00000020033000c9448d44700000040f000000390100035f0000001002000029000000380220024f000000010220008c00002c630000613d00000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00002cd70000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00002cd00000413d000000000420004c00002ce50000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00002cf50000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00002cee0000413d000000000420004c00002d030000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00002d130000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00002d0c0000413d000000000420004c00002d210000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00002d310000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00002d2a0000413d000000000420004c00002d3f0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00002d510000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00002d4a0000413d000000000420004c00002d5f0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f00010430000000000120004c00002d730000613d00000024013000390000000f0300002900000000040000190000000205000367000000000515034f000000000505043b0000114d0650009c000033350000813d0000002003300039000000000053043500000020011000390000000104400039000000000524004b00002d680000413d0000000001000410000c00000001001d0000001502000029000000000121004b000032ce0000c13d0000001201000029000000000101043300000064021000390000119d03000041000000000032043500000044021000390000119e03000041000000000032043500000024021000390000002203000039000000000032043500001133020000410000000000210435000000040210003900000020030000390000000000320435000000840110003900001a8e0000013d00000024014000390000000e0400002900000000050000190000000206000367000000000616034f000000000606043b0000114d0760009c000031fa0000813d0000002004400039000000000064043500000020011000390000000105500039000000000635004b00002d8d0000413d0000000e0100002900000000010104330000000f040000290000000003040433000000000313004b0000314e0000c13d000000000110004c000003910000613d0000006001200210000400000001001d000000200100003900000020064000390000000002000411000300000002001d0000006002200210000200000002001d0000000002000412000b00000002001d00000004040000390000010002000039000600000002001d0000002402000039000c00000002001d0000800502000039000500000002001d001300000000001d0000000e03000029001400000004001d0000000001310019001000000006001d0000000002060433001100000002001d000d00000001001d0000000001010433000900000001001d0000113f0100004100000000001004390000000b0100002900000000001404390000000c010000290000000602000029000000000021043900001140010000410000000003000415000001bb0330008a00000020033000c90000000502000029448d44700000040f000000ff01000039001500000001001d000001ba0110024f000000000110004c00003b1f0000613d000001bb0100035f000000000501043b000000120400002900000000010404330000004002100039000000110300002900000000003204350000002003100039000800000005001d000000000053043500000000030404330000000002320049000000000023043500000060011000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001350330008a00000020033000c9448d44700000040f000001350100035f0000001502000029000001340220024f000000000220004c00003b210000613d000000000101043b000a00000001001d000000000010043500000005020000390000002001000039001100000001001d000700000002001d0000000000210435000011430100004100008010020000390000000003000415000000a30330008a00000020033000c9448d44700000040f000000a30100035f0000001502000029000000a20220024f000000000220004c00003b3f0000613d000000000101043b448d448b0000040f000000000110004c00002e250000613d0000113f01000041000000000010043900000014010000290000000b02000029000000000021043900000012010000290000000c020000290000000000120439000011400100004100008005020000390000000003000415000000230330008a00000020033000c9448d44700000040f0000001501000029000000220110024f000000010110008c00003c800000c13d000000230100035f000000000101043b0000000302000029000000000121013f0000114701100197000000000110004c00000000010000190000000101006039000000120400002900000013020000290000001003000029000000000110004c00002e9c0000c13d00003c730000013d0000001204000029000000000104043300000040021000390000000203000029000000000032043500000020021000390000000a030000290000000000320435000000090200002900000060032002100000005402100039000900000003001d0000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001910330008a00000020033000c9448d44700000040f000001910100035f0000001502000029000001900220024f000000000220004c00003d3a0000613d000000000101043b0000000000100435000000140100002900000011020000290000000000120435000011430100004100008010020000390000000003000415000000fd0330008a00000020033000c9448d44700000040f000000fd0100035f0000001502000029000000fc0220024f000000000220004c00003d580000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c00000012040000290000001302000029000000100300002900002e9c0000c13d000000000104043300000040021000390000000203000029000000000032043500000020021000390000000a030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000000710330008a00000020033000c9448d44700000040f000000710100035f0000001502000029000000700220024f000000000220004c00003e9f0000613d000000000101043b0000000000100435000000140100002900000011020000290000000000120435000011430100004100008010020000390000000003000415000000f50330008a00000020033000c9448d44700000040f000000f50100035f0000001502000029000000f40220024f000000000220004c00003ebd0000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c00000012040000290000001302000029000000100300002900002f100000613d0000000f010000290000000001010433000000000112004b00003b5d0000813d0000000e010000290000000001010433000000000112004b00003b5f0000813d00000000050304330000000d01000029000000000601043300000000010404330000004002100039000000040300002900000000003204350000002002100039001000000005001d0000000000520435000d00000006001d000000600260021000000054031000390000000000230435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001b90330008a00000020033000c9448d44700000040f000001b90100035f0000001502000029000001b80220024f000000000220004c00003b610000613d000000000101043b000a00000001001d0000000000100435000000140100002900000011020000290000000000120435000011430100004100008010020000390000000003000415000000fb0330008a00000020033000c9448d44700000040f000000fb0100035f0000001502000029000000fa0220024f000000000220004c00003b7f0000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000000140400002900002f010000c13d0000000a010000290000000000100435000000110100002900000000004104350000114301000041000080100200003900000000030004150000003d0330008a00000020033000c9448d44700000040f0000003d0100035f00000015020000290000003c0220024f000000010220008c00003d760000c13d000000000101043b001500000001001d448d448b0000040f000001000200008a000000000121016f00000001011001bf0000001502000029448d44890000040f0000115f010000410000001404000029000000000014041f00000001010000290000001002000029000000000012041e0000000d010000290000114701100197000000000001041e000000130500002900000001055000390000000f020000290000000001020433000000000115004b000003910000813d0000000501500210000000200110003900000000062100190000000e030000290000000002030433001300000005001d000000000225004b00002db40000413d00003b9d0000013d00000000010404330000002002100039000000080300002900000000003204350000004002100039000000010300008a000000000032043500000000030404330000000002320049000000000023043500000060011000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000018b0330008a00000020033000c9448d44700000040f0000018b0100035f00000015020000290000018a0220024f000000000220004c000040bd0000613d000000000101043b000a00000001001d0000000000100435000000110100002900000007020000290000000000210435000011430100004100008010020000390000000003000415000000a10330008a00000020033000c9448d44700000040f000000a10100035f0000001502000029000000a00220024f000000000220004c000040db0000613d000000000101043b448d448b0000040f000000000110004c00002f610000613d0000113f01000041000000000010043900000014010000290000000b02000029000000000021043900000012010000290000000c020000290000000000120439000011400100004100008005020000390000000003000415000001b10330008a00000020033000c9448d44700000040f0000001501000029000001b00110024f000000000110004c000041170000613d000001b10100035f000000000101043b0000000302000029000000000121013f0000114701100197000000000110004c0000000001000019000000010100603900000012040000290000001302000029000000100300002900002e220000013d0000001204000029000000000104043300000040021000390000000203000029000000000032043500000020021000390000000a030000290000000000320435000000540210003900000009030000290000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000014d0330008a00000020033000c9448d44700000040f0000014d0100035f00000015020000290000014c0220024f000000000220004c000042060000613d000000000101043b0000000000100435000000140100002900000011020000290000000000120435000011430100004100008010020000390000000003000415000000f90330008a00000020033000c9448d44700000040f000000f90100035f0000001502000029000000f80220024f000000000220004c000042240000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c00000012040000290000001302000029000000100300002900002e9c0000c13d000000000104043300000040021000390000000203000029000000000032043500000020021000390000000a030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000006f0330008a00000020033000c9448d44700000040f0000006f0100035f00000015020000290000006e0220024f000000000220004c000042800000613d000000000101043b0000000000100435000000140100002900000011020000290000000000120435000011430100004100008010020000390000000003000415000000f70330008a00000020033000c9448d44700000040f000000f70100035f0000001502000029000000f60220024f000000000220004c0000429e0000613d000000000101043b448d448b0000040f000000ff0110018f00000012040000290000001302000029000000100300002900002e220000013d00000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00002fe50000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00002fde0000413d000000000420004c00002ff30000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000030030000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00002ffc0000413d000000000420004c000030110000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000013010000290000000001010433000001000200008a000000000121016f00000004020000290000000102200210000000000121019f0000001102000029448d44890000040f00000015020000290000001401000029000000000121004b000030280000a13d001500000002001d0000000001000019448d44890000040f000000150200002900000001022000390000001401000029000000000121004b000030200000213d00000005010000290000000001010433001400000001001d0000000a010000290000115b01100041001500000001001d448d448b0000040f000000060200002900000000020204330000115c03000041000000000220004c000000000203001900000000020060190000001403000029000000000330004c0000000003000019000000010300c0390000115d01100197000000000131019f00000007030000290000000003030433000000000330004c00000100030000390000000003006019000000000131019f000000000121019f0000001502000029448d44890000040f0000000a010000290000115e0210004100000003010000290000000001010433448d44890000040f0000113f0100004100000000001004390000000f010000290000000d020000290000000000210439000000c0010000390000000b020000290000000000120439000011400100004100008005020000390000000003000415000001850330008a00000020033000c9448d44700000040f0000001001000029000001840110024f000000000110004c0000315b0000613d000001850100035f000000000101043b000000120400002900000000020404330000002003200039000000000013043500000040012000390000000903000029000000000031043500000000030404330000000001310049000000000013043500000060012000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000013f0330008a00000020033000c9448d44700000040f0000013f0100035f00000010020000290000013e0220024f000000000220004c000032f90000613d0000000c020000290000000002020433000000000220004c00000a060000613d0000000e020000290000006002200210000b00000002001d0000000c020000290000002002200039000a00000002001d000000000101043b001300000001001d0000801001000039001500000001001d0000002001000039001100000001001d0000000002000019000030930000013d000000140200002900000001022000390000000c010000290000000001010433000000000112004b00000a060000813d001400000002001d00000005012002100000000a0200002900000000011200190000000001010433000e00000001001d0000006001100210000000120400002900000000020404330000004003200039000000000013043500000020012000390000001303000029000000000031043500000054012000390000000b030000290000000000310435000000000104043300000000031200490000004803300039000000000031043500000068022000390000000000240435000000400210021000001141022000410000113602200197000000000101043300000060011002100000113501100197000000000112019f00001142011001c700000000030004150000002b0330008a00000020033000c90000001502000029448d44700000040f0000002b0100035f00000010020000290000002a0220024f000000000220004c000036e50000613d000000000101043b000d00000001001d00000000001004350000000f010000290000001102000029000000000012043500001143010000410000000003000415000001170330008a00000020033000c90000001502000029448d44700000040f000001170100035f0000001002000029000001160220024f000000000220004c000037030000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c0000308d0000c13d0000000d0100002900000000001004350000000f0200002900000011010000290000000000210435000011430100004100008010020000390000000003000415000000410330008a00000020033000c9448d44700000040f000000410100035f0000001002000029000000400220024f000000010220008c000039630000c13d000000000101043b000d00000001001d448d448b0000040f000001000200008a000000000121016f00000001011001bf0000000d02000029448d44890000040f0000115f010000410000000f02000029000000000012041f0000000e0100002900001147011001970000001302000029000000000012041e0000000801000029000000000001041e0000308d0000013d00000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000031020000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000030fb0000413d000000000420004c000031100000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000031200000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000031190000413d000000000420004c0000312e0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000313e0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000031370000413d000000000420004c0000314c0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300000113301000041000000000010043500000020010000390000000402000039000000000012043500000007010000390000002402000039000000000012043500001176010000410000004402000039000000000012043500001134010000410000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000316b0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000031640000413d000000000420004c000031790000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000031890000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000031820000413d000000000420004c000031970000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000031a70000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000031a00000413d000000000420004c000031b50000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f00010430000000130100002900000000001204350000000b0100002900000000001004350000113701000041000080100200003900000000030004150000004b0330008a00000020033000c9448d44700000040f0000004b0100035f0000000e020000290000004a0220024f000000000220004c000033170000613d00000015020000290000006402200039001100000002001d0000001402000029000000020220008c001500000000001d0000001302000029000031de0000413d000000000201043b001500000000001d001400000002001d0000000001020019448d448b0000040f00000011020000290000001503000029000000000232001900000000001204350000001402000029000000010220003900000020033000390000001301000029001500000003001d000000000113004b000031d00000413d000000110100002900000015020000290000000001210019001500000001001d00000012010000290000000001010433001400000001001d000011260100004100000000001004390000000c010000290000000d020000290000000000120439000011270100004100008002020000390000000003000415000001690330008a00000020033000c9448d44700000040f0000000e01000029000001680110024f000000000110004c000032720000613d000001690100035f000000000101043b000000000110004c000034240000c13d00000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000320a0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000032030000413d000000000420004c000032180000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000032280000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000032210000413d000000000420004c000032360000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000032460000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000323f0000413d000000000420004c000032540000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f00010430000000120300002900000000040304330000000101000039000000000014043500000040024000390000000000230435000000200240003900000002030003670000000003300368000000000500001900000005065002100000000007620019000000000663034f000000000606043b00000000006704350000000106500039000000000556004b00000000050000190000000105004039000000010550018f000000000550004c0000000005060019000032600000c13d0000000003040433000000000330004c000033e90000c13d00000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000032820000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000327b0000413d000000000420004c000032900000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000032a00000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000032990000413d000000000420004c000032ae0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000032be0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000032b70000413d000000000420004c000032cc0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300000113f01000041000000000010043900000000020004120000000401000039000d00000001001d000a00000002001d000000000021043900000024020000390000001201000029000b00000002001d0000000000120439000011400100004100008005020000390000000003000415000001d30330008a00000020033000c9448d44700000040f000000ff01000039000e00000001001d000001d20110024f000000000110004c000034820000613d000001d30100035f000000000101043b00001147011001970000001502000029000000000112004b000036500000c13d0000001201000029000000000101043300000044021000390000119c03000041000000000032043500000024021000390000001e03000039000000000032043500001133020000410000000000210435000000040210003900000020030000390000000000320435000000640110003900001a8e0000013d00000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000033070000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000033000000413d000000000420004c000033150000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000033250000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000331e0000413d000000000420004c000033330000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000033450000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000333e0000413d000000000420004c000033530000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000033630000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000335c0000413d000000000420004c000033710000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000033810000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000337a0000413d000000000420004c0000338f0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000339f0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000033980000413d000000000420004c000033ad0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000033bd0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000033b60000413d000000000420004c000033cb0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f00010430000000120300002900000000040304330000000101000039000000000014043500000040024000390000000000230435000000200240003900000002030003670000000003300368000000000500001900000005065002100000000007620019000000000663034f000000000606043b00000000006704350000000106500039000000000556004b00000000050000190000000105004039000000010550018f000000000550004c0000000005060019000033d70000c13d0000000003040433000000000330004c0000351a0000c13d00000000010000190000448f000104300000001503000029000000000032043500000012050000290000000003050433000000000013043500000040013000390000000000150435000000200130003900000002050003670000000005500368000000000600001900000005076002100000000008710019000000000775034f000000000707043b00000000007804350000000107600039000000000667004b00000000060000190000000106004039000000010660018f000000000660004c0000000006070019000033f40000c13d0000000005030433000000000550004c000035370000c13d00000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000034140000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000340d0000413d000000000420004c000034220000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010004140000000c02000029000000040220008c000035810000c13d000000030100036700000001040000310000359a0000013d00000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000034390000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000034320000413d000000000420004c000034470000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300000113f01000041000000000010043900000000010004120000000c020000290000000000120439000000240100003900000012020000290000000000210439000011400100004100008005020000390000000003000415000001af0330008a00000020033000c9448d44700000040f0000001501000029000001ae0110024f000000000110004c000036870000613d000001af0100035f000000000101043b0000001302000029000000000121013f0000114701100197000000000110004c00000000030000190000000103006039000002c10000013d00000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000034720000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000346b0000413d000000000420004c000034800000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000034920000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000348b0000413d000000000420004c000034a00000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000034b00000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000034a90000413d000000000420004c000034be0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000034ce0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000034c70000413d000000000420004c000034dc0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000034ec0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000034e50000413d000000000420004c000034fa0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000350a0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000035030000413d000000000420004c000035180000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300000001503000029000000000032043500000012050000290000000003050433000000000013043500000040013000390000000000150435000000200130003900000002050003670000000005500368000000000600001900000005076002100000000008710019000000000775034f000000000707043b00000000007804350000000107600039000000000667004b00000000060000190000000106004039000000010660018f000000000660004c0000000006070019000035250000c13d0000000005030433000000000550004c000037210000c13d00000000010000190000448f000104300000001105000029000000000051043500000012050000290000000005050433000000240650003900000060070000390000000000760435000000000704043300000084045000390000000000740435000000a404500039000000000870004c0000354c0000613d000000000800001900000000090204330000000000940435000000200220003900000020044000390000000108800039000000000978004b000035450000413d000000000264004900000064065000390000000000260435000000440250003900000013050000290000000000520435000000000303043300000000003404350000002002400039000000000430004c000035600000613d0000000004000019000000000501043300001147055001970000000000520435000000200220003900000020011000390000000104400039000000000534004b000035580000413d000000120300002900000000040304330000000001420049000000200110008a00000000001404350000000000230435001300000004001d00000020014000390000000002010433000011550220019700001173022001c700000000002104350000113f0100004100000000001004390000000e010000290000000c0200002900000000002104390000000d010000290000000b020000290000000000210439000011400100004100008005020000390000000003000415000001650330008a00000020033000c9001400000003001d448d44700000040f0000000f01000029000001640110024f000000000110004c000037690000c13d00000000010000190000448f000104300000001502000029000000140300002900000000023200490000004003300210000011360330019700000060022002100000113502200197000000000232019f000000c0011002100000114801100197000000000112019f0000000003000415000000490330008a00000020033000c90000000c02000029448d44570000040f000000490100035f00030000000103550000006002100270000111250020019d00001125042001970000000e02000029000000480220024f000000000220004c000037ba0000613d0000001f0340018f000000120200002900000000020204330000000504400270000000000540004c000035a90000613d000000000500001900000005065002100000000007620019000000000661034f000000000606043b00000000006704350000000105500039000000000645004b000035a10000413d000000000530004c000035b80000613d0000000504400210000000000141034f00000000044200190000000303300210000000000504043300000000053501cf000000000535022f000000000101043b0000010003300089000000000131022f00000000013101cf000000000151019f0000000000140435000000010100003100001131030000410000001f0410008c000000000400001900000000040320190000113105100197000000000650004c0000000003008019000011310550009c000000000304c0190000001f04100039000000200500008a001400000005001d000000000454016f00000000052400190000001204000029001500000005001d0000000000540435000000000330004c000036a70000613d0000000004020433000011490340009c000038b40000213d000000000321001900000000022400190000001f012000390000113104000041000000000513004b0000000005000019000000000504a01900001131011001970000113106300197000000000716004b000000000400a019000000000116013f000011310110009c00000000010500190000000001046019000000000110004c000039ac0000c13d00000000010204330000114a0410009c00003c330000813d0000003f041000390000001405000029000000000454016f00000015050000290000000004540019000000000554004b00003d1a0000413d0000114a0540009c00003d1a0000813d000000120500002900000000004504350000001504000029000000000014043500000020022000390000000004120019000000000334004b00003e0c0000a13d00000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000036040000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000035fd0000413d000000000420004c000036120000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000036220000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000361b0000413d000000000420004c000036300000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000036400000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000036390000413d000000000420004c0000364e0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000013010000290000000001010433000000030110008c0000000001000019000036680000a13d000000130300002900000023013000390000000001010433000000180110027000001190011001970000002202300039000000000202043300000010022002700000119102200197000000000112019f0000002102300039000000000202043300000008022002700000119202200197000000000121019f000000100200002900000000020204330000119302200197000000000121019f000000120300002900000000040304330000114e0200004100000000002404350000117401100197000900000004001d000000040240003900000000001204350000000001030433001000000001001d000011260100004100000000001004390000000d0100002900000015020000290000000000210439000011270100004100008002020000390000000003000415000001d10330008a00000020033000c9448d44700000040f0000000e01000029000001d00110024f000000000110004c000038140000613d000001d10100035f000000000101043b000000000110004c0000395d0000c13d00000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000036970000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000036900000413d000000000420004c000036a50000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000036b70000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000036b00000413d000000000420004c000036c50000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000036d50000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000036ce0000413d000000000420004c000036e30000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000036f30000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000036ec0000413d000000000420004c000037010000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000037110000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000370a0000413d000000000420004c0000371f0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300000001105000029000000000051043500000012050000290000000005050433000000240650003900000060070000390000000000760435000000000704043300000084045000390000000000740435000000a404500039000000000870004c000037360000613d000000000800001900000000090204330000000000940435000000200220003900000020044000390000000108800039000000000978004b0000372f0000413d000000000264004900000064065000390000000000260435000000440250003900000013050000290000000000520435000000000303043300000000003404350000002002400039000000000430004c0000374a0000613d0000000004000019000000000501043300001147055001970000000000520435000000200220003900000020011000390000000104400039000000000534004b000037420000413d000000120300002900000000040304330000000001420049000000200110008a00000000001404350000000000230435001300000004001d00000020014000390000000002010433000011550220019700001187022001c700000000002104350000113f0100004100000000001004390000000e010000290000000c0200002900000000002104390000000d010000290000000b020000290000000000210439000011400100004100008005020000390000000003000415000001670330008a00000020033000c9001400000003001d448d44700000040f0000000f01000029000001660110024f000000000110004c0000391d0000613d0000001401000029000000200110011a0000000001010367000000000101043b00000012040000290000000002040433000000200320003900000000001304350000004001200039000000150300002900000000003104350000000003040433000000000131004900000000001304350000006001200039001200000004001d0000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001ef0330008a00000020033000c9448d44700000040f000001ef0100035f000000ff02000039000f00000002001d000001ee0220024f000000000220004c000038960000613d000000000101043b001500000001001d000000000010043500000005010000390000002002000039000e00000002001d0000000000120435000011430100004100008010020000390000000003000415000000a50330008a00000020033000c9448d44700000040f000000a50100035f0000000f02000029000000a40220024f000000000220004c0000398e0000613d000000000101043b448d448b0000040f001100000001001d000000000110004c00003b9f0000c13d000000120400002900000000010404330000004402100039000011880300004100000000003204350000002402100039000000160300003900000000003204350000113302000041000000000021043500000004021000390000000e0300002900000000003204350000000002040433000000000121004900000060011002100000113401100041000011350110019700000040022002100000113602200197000000000121019f0000448f000104300000001f0340018f0000000502400270000000000420004c000037c60000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000524004b000037bf0000413d000000000430004c000037d40000613d00000003033002100000000502200210000000000402043300000000043401cf000000000434022f000000000121034f000000000101043b0000010003300089000000000131022f00000000013101cf000000000141019f0000000000120435000000600100003900000001011001ff00001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000037e60000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000037df0000413d000000000420004c000037f40000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000038040000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000037fd0000413d000000000420004c000038120000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000038260000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000381f0000413d000000000420004c000038340000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000038440000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000383d0000413d000000000420004c000038520000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000038660000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000385f0000413d000000000420004c000038740000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000038840000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000387d0000413d000000000420004c000038920000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000038a40000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000389d0000413d000000000420004c000038b20000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000038c40000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000038bd0000413d000000000420004c000038d20000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000038e20000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000038db0000413d000000000420004c000038f00000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000039000000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000038f90000413d000000000420004c0000390e0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300000113301000041000000000010043500000014010000290000001302000029000000000021043500000007010000390000000c02000029000000000012043500001145010000410000004402000039000000000012043500001134010000410000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000392f0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000039280000413d000000000420004c0000393d0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000394d0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000039460000413d000000000420004c0000395b0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010004140000001502000029000000040220008c00003a620000c13d000000010400003100003a8b0000013d00000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000039710000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000396a0000413d000000000420004c0000397f0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300000113301000041000000000010043500000013010000290000000d02000029000000000021043500000007010000390000002402000039000000000012043500001145010000410000004402000039000000000012043500001134010000410000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000399c0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000039950000413d000000000420004c000039aa0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000039bc0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000039b50000413d000000000420004c000039ca0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000039da0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000039d30000413d000000000420004c000039e80000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000039f80000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000039f10000413d000000000420004c00003a060000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003a160000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003a0f0000413d000000000420004c00003a240000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003a340000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003a2d0000413d000000000420004c00003a420000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003a520000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003a4b0000413d000000000420004c00003a600000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000010030000290000000902000029000000000232004900000024022000390000004003300210000011360330019700000060022002100000113502200197000000000232019f000000c0011002100000114801100197000000000112019f0000000003000415000001270330008a00000020033000c90000001502000029448d44700000040f00000010060000290000000e01000029000001260210024f000001270100035f000000000300001900000005043002100000000005460019000000000441034f000000000404043b00000000004504350000000104300039000000000334004b00000000030000190000000103004039000000010330018f000000000330004c000000000304001900003a780000c13d00030000000103550000006003100270000111250030019d0000112504300197000000000220004c00003cbe0000613d00001131010000410000001f0240008c000000000200001900000000020120190000113103400197000000000530004c0000000001008019000011310330009c000000000302001900000000030160190000001f014000390000001102000029000000000121016f0000001204000029000000000204043300000000012100190000000000140435000000000330004c00003c350000613d0000000004020433000000000200041100000060032002100000004002100039001100000003001d000000000032043500000014020000290000006002200210000000540310003900000000002304350000002002100039001400000004001d00000000004204350000001204000029000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001710330008a00000020033000c9448d44700000040f000001710100035f0000000e02000029000001700220024f000000000220004c00003d1c0000613d000000000101043b000000000010043500000020020000390000000d01000029001000000002001d00000000001204350000114301000041000080100200003900000000030004150000011d0330008a00000020033000c9448d44700000040f0000011d0100035f0000000e020000290000011c0220024f000000000220004c00003e450000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c00003ffc0000c13d00000012040000290000000001040433000000400210003900000011030000290000000000320435000000200210003900000014030000290000000000320435000000540210003900001144030000410000000000320435000000000204043300000000032100490000004803300039000000000032043500000068011000390000000000140435000000400120021000001141011000410000113601100197000000000202043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000007d0330008a00000020033000c9448d44700000040f0000007d0100035f0000000e020000290000007c0220024f000000000220004c000040f90000613d000000000101043b00000000001004350000000d0100002900000010020000290000000000120435000011430100004100008010020000390000000003000415000001190330008a00000020033000c9448d44700000040f000001190100035f0000000e02000029000001180220024f000000000220004c000041e80000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c00003ffc0000c13d000011330100004100000000001004350000000d010000290000001002000029000000000021043500000007010000390000000b02000029000000000012043500001145010000410000004402000039000000000012043500001134010000410000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003b2f0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003b280000413d000000000420004c00003b3d0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003b4d0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003b460000413d000000000420004c00003b5b0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003b6f0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003b680000413d000000000420004c00003b7d0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003b8d0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003b860000413d000000000420004c00003b9b0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f000104300000000001000410000d00000001001d0000000301000039001400000001001d448d448b0000040f00001157020000410000001403000029000000000023041f000900000001001d0000001502000029000000000012041e0000001001000029000000000101043300000012030000290000000004030433000000c0024000390000000000230435000000000110004c0000000001000019000000010100c0390000008002400039000700000002001d000000000012043500000020024000390000001301000029000c00000002001d00000000001204350000000d010000290000114701100197000800000001001d00000000001404350000006001400039000a00000001001d0000000000010435001500000004001d0000004001400039000600000001001d00000000000104350000113b0100004100000000001004390000113c010000410000800b020000390000000003000415000001950330008a00000020033000c9448d44700000040f0000000f01000029000001940110024f000000000110004c00003d180000613d000001950100035f000000000101043b000000110200002900000000012100190000001502000029000000a002200039000500000002001d00000000001204350000001401000029448d448b0000040f001300000001001d00000001011000390000001402000029448d44890000040f0000001401000029000000000010043500000015010000290000000001010433001400000001001d00000013010000290000000201100210000b00000001001d0000115801100041001500000001001d448d448b0000040f000000140200002900001147022001970000115901100197000000000121019f0000001502000029448d44890000040f0000000c010000290000000001010433001500000001001d0000000001010433000c00000001001d0000000b010000290000115a01100041001100000001001d448d448b0000040f00000011020000290000000000200435001400000001001d000011370100004100008010020000390000000003000415000000b30330008a00000020033000c9448d44700000040f000000b30100035f0000000f02000029000000b20220024f000000000220004c00003dee0000613d00000015020000290000002002200039001300000002001d00000014040000290000000802400210000000010300008a000000000232013f000001000220018f000000010220008a000000000242016f00000001022002700000001f02200039000000000301043b0000000501200270001500000003001d0000000001130019001400000001001d0000000c010000290000001f0110008c00003f190000a13d0000000c01000029000000010110021000000001011001bf0000001102000029448d44890000040f00000013030000290000000c010000290000000001130019001100000001001d000000000131004b000000150200002900003f230000a13d001300000003001d001500000002001d0000000001030433448d44890000040f00000013030000290000001502000029000000010220003900000020033000390000001101000029000000000131004b00003c270000213d00003f230000013d00000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003c450000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003c3e0000413d000000000420004c00003c530000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003c630000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003c5c0000413d000000000420004c00003c710000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300000113301000041000000000010043500000014010000290000001102000029000000000021043500000007010000390000000c02000029000000000012043500001145010000410000004402000039000000000012043500001134010000410000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003c900000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003c890000413d000000000420004c00003c9e0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003cae0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003ca70000413d000000000420004c00003cbc0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300000001f0340018f0000000502400270000000000420004c00003cca0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000524004b00003cc30000413d000000000430004c00003cd80000613d00000003033002100000000502200210000000000402043300000000043401cf000000000434022f000000000121034f000000000101043b0000010003300089000000000131022f00000000013101cf000000000141019f0000000000120435000000600100003900000001011001ff00001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003cea0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003ce30000413d000000000420004c00003cf80000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003d080000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003d010000413d000000000420004c00003d160000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003d2a0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003d230000413d000000000420004c00003d380000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003d480000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003d410000413d000000000420004c00003d560000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003d660000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003d5f0000413d000000000420004c00003d740000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003d840000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003d7d0000413d000000000420004c00003d920000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003da20000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003d9b0000413d000000000420004c00003db00000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003dc00000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003db90000413d000000000420004c00003dce0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003dde0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003dd70000413d000000000420004c00003dec0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003dfc0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003df50000413d000000000420004c00003e0a0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000015030000290000002003300039001300000003001d000000000310004c00003e1f0000613d0000000003000019000000130600002900000000046300190000000005320019000000000505043300000000005404350000002003300039000000000413004b00003e130000413d000000000213004b00003e1f0000a13d0000001302000029000000000121001900000000000104350000114b010000410000000f02000029000000000012041f0000001001000029000000000001041e00000001010000390000000002000019448d44890000040f00000012010000290000000003010433000000200100003900000000001304350000001501000029000000000201043300000020013000390000000000210435000000000420004c00003e3f0000613d00000040033000390000000004000019000000130700002900000000053400190000000006740019000000000606043300000000006504350000002004400039000000000524004b00003e340000413d000000000424004b00003e3f0000a13d000000000332001900000000000304350000001f022000390000001403000029000000000232016f0000000001120019000000120a00002900000a0a0000013d00000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003e530000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003e4c0000413d000000000420004c00003e610000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003e710000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003e6a0000413d000000000420004c00003e7f0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003e8f0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003e880000413d000000000420004c00003e9d0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003ead0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003ea60000413d000000000420004c00003ebb0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003ecb0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003ec40000413d000000000420004c00003ed90000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003ee90000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003ee20000413d000000000420004c00003ef70000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c00003f070000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00003f000000413d000000000420004c00003f150000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000013010000290000000001010433000001000200008a000000000121016f0000000c020000290000000102200210000000000121019f0000001102000029448d44890000040f00000015020000290000001401000029000000000121004b00003f2e0000a13d001500000002001d0000000001000019448d44890000040f000000150200002900000001022000390000001401000029000000000121004b00003f260000213d00000006010000290000000001010433001400000001001d0000000b010000290000115b01100041001500000001001d448d448b0000040f000000070200002900000000020204330000115c03000041000000000220004c000000000203001900000000020060190000001403000029000000000330004c0000000003000019000000010300c0390000115d01100197000000000131019f0000000a030000290000000003030433000000000330004c00000100030000390000000003006019000000000131019f000000000121019f0000001502000029448d44890000040f0000000b010000290000115e0210004100000005010000290000000001010433448d44890000040f0000113f01000041000000000010043900000000010004120000000402000039001300000002001d0000000000120439000000c00100003900000024020000390000000000120439000011400100004100008005020000390000000003000415000001830330008a00000020033000c9448d44700000040f0000000f01000029000001820110024f000000000110004c00003ffa0000613d000001830100035f000000000101043b000000120400002900000000020404330000002003200039000000000013043500000040012000390000000903000029000000000031043500000000030404330000000001310049000000000013043500000060012000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c7000080100200003900000000030004150000013d0330008a00000020033000c9448d44700000040f0000013d0100035f0000000f020000290000013c0220024f000000000220004c000040810000613d00000010020000290000000002020433000000000220004c00000a060000613d0000000d020000290000006002200210000b00000002001d00000010020000290000002002200039000a00000002001d000000000101043b001100000001001d0000801001000039001400000001001d001500000000001d00003f990000013d0000001502000029000000010220003900000010010000290000000001010433001500000002001d000000000112004b00000a060000813d000000150100002900000005011002100000000a0200002900000000011200190000000001010433000d00000001001d0000006001100210000000120400002900000000020404330000004003200039000000000013043500000020012000390000001103000029000000000031043500000054012000390000000b030000290000000000310435000000000104043300000000031200490000004803300039000000000031043500000068022000390000000000240435000000400210021000001141022000410000113602200197000000000101043300000060011002100000113501100197000000000112019f00001142011001c70000000003000415000000290330008a00000020033000c90000001402000029448d44700000040f000000290100035f0000000f02000029000000280220024f000000000220004c000042440000613d000000000101043b000c00000001001d00000000001004350000000e010000290000001302000029000000000021043500001143010000410000000003000415000001050330008a00000020033000c90000001402000029448d44700000040f000001050100035f0000000f02000029000001040220024f000000000220004c000042620000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c00003f920000c13d0000000c0100002900000000001004350000000e01000029000000130200002900000000002104350000114301000041000080100200003900000000030004150000003f0330008a00000020033000c9448d44700000040f0000003f0100035f0000000f020000290000003e0220024f000000010220008c000043c10000c13d000000000101043b000c00000001001d448d448b0000040f000001000200008a000000000121016f00000001011001bf0000000c02000029448d44890000040f0000115f010000410000001302000029000000000012041f0000000d0100002900001147011001970000001102000029000000000012041e0000000801000029000000000001041e00003f920000013d00000000010000190000448f0001043000000014010000290000000000100435000000050100003900000010020000290000000000120435000011430100004100008010020000390000000003000415000001cf0330008a00000020033000c9448d44700000040f000001cf0100035f0000000e02000029000001ce0220024f000000000220004c0000409f0000613d000000000101043b448d448b0000040f000800000001001d000000000110004c000041190000c13d00000012040000290000000001040433000000440210003900001188030000410000000000320435000000240210003900000016030000390000000000320435000011330200004100000000002104350000000402100039000000100300002900000000003204350000000002040433000000000121004900000060011002100000113401100041000011350110019700000040022002100000113602200197000000000121019f0000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000040350000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000402e0000413d000000000420004c000040430000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000040530000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000404c0000413d000000000420004c000040610000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000040710000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000406a0000413d000000000420004c0000407f0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000408f0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000040880000413d000000000420004c0000409d0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000040ad0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000040a60000413d000000000420004c000040bb0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000040cb0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000040c40000413d000000000420004c000040d90000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000040e90000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000040e20000413d000000000420004c000040f70000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000041070000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000041000000413d000000000420004c000041150000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f000104300000000301000039001100000001001d448d448b0000040f00001157020000410000001103000029000000000023041f000900000001001d0000001402000029000000000012041e0000000f01000029000000000101043300000012030000290000000004030433000000c0024000390000000000230435000000000110004c0000000001000019000000010100c0390000008002400039000500000002001d000000000012043500000020024000390000001301000029000700000002001d0000000000120435000000150100002900000000001404350000006001400039000600000001001d0000000000010435001400000004001d0000004001400039000400000001001d00000000000104350000113b0100004100000000001004390000113c010000410000800b020000390000000003000415000001970330008a00000020033000c9448d44700000040f0000000e01000029000001960110024f000000000110004c000042420000613d000001970100035f000000000101043b000000080200002900000000012100190000001402000029000000a002200039000300000002001d00000000001204350000001101000029448d448b0000040f001500000001001d00000001011000390000001102000029448d44890000040f0000001101000029000000000010043500000014010000290000000001010433001400000001001d00000015010000290000000201100210000800000001001d0000115801100041001500000001001d448d448b0000040f000000140200002900001147022001970000115901100197000000000121019f0000001502000029448d44890000040f00000007010000290000000001010433001500000001001d0000000001010433000700000001001d00000008010000290000115a01100041001100000001001d448d448b0000040f00000011020000290000000000200435001300000001001d000011370100004100008010020000390000000003000415000000b70330008a00000020033000c9448d44700000040f000000b70100035f0000000e02000029000000b60220024f000000000220004c000042bc0000613d00000015020000290000002002200039001400000002001d00000013040000290000000802400210000000010300008a000000000232013f000001000220018f000000010220008a000000000242016f00000001022002700000001f02200039000000000301043b0000000501200270001500000003001d0000000001130019001300000001001d00000007010000290000001f0110008c000042da0000a13d0000000701000029000000010110021000000001011001bf0000001102000029448d44890000040f000000140100002900000007020000290000000002210019001100000002001d000000000112004b000042e30000a13d0000001401000029001400000001001d00000000010104330000001502000029001500000002001d448d44890000040f00000015010000290000000101100039001500000001001d00000014020000290000002002200039001400000002001d0000001101000029000000000121004b0000419c0000213d000042e30000013d00000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000041ba0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000041b30000413d000000000420004c000041c80000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000041d80000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000041d10000413d000000000420004c000041e60000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000041f60000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000041ef0000413d000000000420004c000042040000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000042140000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000420d0000413d000000000420004c000042220000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000042320000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000422b0000413d000000000420004c000042400000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000042520000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000424b0000413d000000000420004c000042600000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000042700000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000042690000413d000000000420004c0000427e0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000428e0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000042870000413d000000000420004c0000429c0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000042ac0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000042a50000413d000000000420004c000042ba0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000042ca0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000042c30000413d000000000420004c000042d80000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000014010000290000000001010433000001000200008a000000000121016f00000007020000290000000102200210000000000121019f0000001102000029448d44890000040f00000015010000290000001302000029000000000112004b000042f10000a13d00000000010000190000001502000029001500000002001d448d44890000040f00000015020000290000000102200039001500000002001d0000001301000029000000000121004b000042e70000213d00000004010000290000000001010433001400000001001d00000008010000290000115b01100041001500000001001d448d448b0000040f000000050200002900000000020204330000115c03000041000000000220004c000000000203001900000000020060190000001403000029000000000330004c0000000003000019000000010300c0390000115d01100197000000000131019f00000006030000290000000003030433000000000330004c00000100030000390000000003006019000000000131019f000000000121019f0000001502000029448d44890000040f00000008010000290000115e0210004100000003010000290000000001010433448d44890000040f0000113f0100004100000000001004390000000d010000290000000a020000290000000000210439000000c0010000390000000b020000290000000000120439000011400100004100008005020000390000000003000415000001870330008a00000020033000c9448d44700000040f0000000e01000029000001860110024f000000000110004c000043bf0000613d000001870100035f000000000101043b000000120400002900000000020404330000002003200039000000000013043500000040012000390000000903000029000000000031043500000000030404330000000001310049000000000013043500000060012000390000000000140435000000400130021000001141011000410000113601100197000000000203043300000060022002100000113502200197000000000121019f00001142011001c700008010020000390000000003000415000001410330008a00000020033000c9448d44700000040f000001410100035f0000000e02000029000001400220024f000000000220004c000043df0000613d0000000c020000290000114702200197000800000002001d0000000f020000290000000002020433000000000220004c00000a060000613d0000000c020000290000006002200210000c00000002001d0000000f020000290000002002200039000b00000002001d000000000101043b001400000001001d0000801001000039000a00000001001d001500000000001d0000435e0000013d000000150200002900000001022000390000000f010000290000000001010433001500000002001d000000000112004b00000a060000813d000000150100002900000005011002100000000b0200002900000000011200190000000001010433001300000001001d0000006001100210000000120400002900000000020404330000004003200039000000000013043500000020012000390000001403000029000000000031043500000054012000390000000c030000290000000000310435000000000104043300000000031200490000004803300039000000000031043500000068022000390000000000240435000000400210021000001141022000410000113602200197000000000101043300000060011002100000113501100197000000000112019f00001142011001c700000000030004150000002d0330008a00000020033000c90000000a02000029448d44700000040f0000002d0100035f0000000e020000290000002c0220024f000000000220004c000043fd0000613d000000000101043b001100000001001d00000000001004350000000d01000029000000100200002900000000001204350000114301000041000080100200003900000000030004150000011b0330008a00000020033000c9448d44700000040f0000011b0100035f0000000e020000290000011a0220024f000000000220004c0000441b0000613d000000000101043b448d448b0000040f000000ff0110018f000000000110004c000043570000c13d000000110100002900000000001004350000000d0100002900000010020000290000000000120435000011430100004100008010020000390000000003000415000000430330008a00000020033000c9448d44700000040f000000430100035f0000000e02000029000000420220024f000000010220008c000044390000c13d000000000101043b001100000001001d448d448b0000040f000001000200008a000000000121016f00000001011001bf0000001102000029448d44890000040f0000115f010000410000000d02000029000000000012041f000000130100002900001147011001970000001402000029000000000012041e0000000801000029000000000001041e000043570000013d00000000010000190000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000043cf0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000043c80000413d000000000420004c000043dd0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000043ed0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000043e60000413d000000000420004c000043fb0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c0000440b0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000044040000413d000000000420004c000044190000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000044290000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000044220000413d000000000420004c000044370000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f0001043000000060021002700000001f0220018f00000065031002700000113803300197000000000430004c000044470000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000044400000413d000000000420004c000044550000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f000000000023043500001135011001970000448f000104300002000000000002000200000003001d0000002003300039000100000003001d00004466002104210000000203000029000000200230011a000000000201035500001131010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a0000000002010355000011a6010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0002000000000002000200000003001d0000002003300039000100000003001d0000447f002104230000000203000029000000200230011a000000000201035500001131010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a0000000002010355000011a6010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d000000000012041b000000000001042d000000000101041a000000000001042d0000448d000004320000448e0001042e0000448f00010430000000000000000100000000000000010000000000000001000000000000000100000000000000000000000000000000000000000000000000000000ffffffff1806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000007e1c556d00000000000000000000000000000000000000000000000000000000d00bef4d00000000000000000000000000000000000000000000000000000000e8104ea00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e8104ea000000000000000000000000000000000000000000000000000000000f084552200000000000000000000000000000000000000000000000000000000f0bb940600000000000000000000000000000000000000000000000000000000f1521d7600000000000000000000000000000000000000000000000000000000fc78a22800000000000000000000000000000000000000000000000000000000fe0d94c18000000000000000000000000000000000000000000000000000000000000000414354494f4e5f444f45535f4e4f545f4558495354000000000000000000000008c379a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000ffffffff0000000000000000000000000000000000000000000000000000000000000000ffffffff0000000000000000020000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000007ffffffffffffff414354494f4e5f414c52454144595f4558454355544544000000000000000000414354494f4e5f414c52454144595f43414e43454c4c45440000000000000000796b89b91644bc98cd93958e4c9038275d622183e25ac5af08cc6b5d955391320200020000000000000000000000000000000004000000000000000000000000414354494f4e5f4e4f545f45584543555441424c4500000000000000000000000000000000000000000000000000000000000000000000000000000000ff0000310ab089e4439a4c15d089f94afb7896ff553aecb10793d0ab882de59d99a32e0200020000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000000000000020000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000040000000000000000000000000ffffffffffffffffffffffffffffffffffffffff00000000000000000000000042414c23343031000000000000000000000000000000000000000000000000001cff79cd00000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff00000000ffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff00000000000000000000000000000000000000000000000100000000000000004fa5548c15e2d4a0b806eee962935acea143d79644d2340af39f4edf13b335a942414c23343030000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000851c1bb300000000000000000000000000000000000000000000000000000000058a628f0000000000000000000000000000000000000000000000000000000044454c41595f455843454544535f5345545f415554484f52495a4552000000000e182617f9e5f9ce5f761c791ec15ad52176d97f9706b5c2707ffda7b6bdf7900000000000000000000000000000000000000000000000000000000003c2670144454c41595f544f4f5f4c415247450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006978000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bb94060000000000000000000000000000000000000000000000000000000026ce5ffb7ab1ce72d9ca4a3e4f906d2b99194d6c53dd9832fd7a59d0b2fc6bedc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85bffffffffffffffffffffffff0000000000000000000000000000000000000000c2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85cc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d0000000000000000000000000000000000000000000000000000000000010000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000c2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85eef6ee312a0062a24a46be2eba5284183a87ff848110e8d4df979bd690d9e9f6800000000000000000000000000000000000000000000000000000000d00bef4d00000000000000000000000000000000000000000000000000000000d754bad900000000000000000000000000000000000000000000000000000000d7ad1dcf00000000000000000000000000000000000000000000000000000000df6b0d0100000000000000000000000000000000000000000000000000000000e2b4146b00000000000000000000000000000000000000000000000000000000e5e6e8ae9be2a88400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009be2a884000000000000000000000000000000000000000000000000000000009f81aed700000000000000000000000000000000000000000000000000000000b3eb281d00000000000000000000000000000000000000000000000000000000c284b6b900000000000000000000000000000000000000000000000000000000cc63604a00000000000000000000000000000000000000000000000000000000cf8475da000000000000000000000000000000000000000000000000000000007e1c556d0000000000000000000000000000000000000000000000000000000082938ca800000000000000000000000000000000000000000000000000000000851c1bb300000000000000000000000000000000000000000000000000000000863bac6b0000000000000000000000000000000000000000000000000000000086ff254b000000000000000000000000000000000000000000000000000000008d928af86f8bc59600000000000000000000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000000000007b42e026d3b17cf41399915c285780d0f724b3464b269297aff73c0de0fe417f42414c23313033000000000000000000000000000000000000000000000000004125ff900000000000000000000000000000000000000000000000000000000062cde1ba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000062cde1ba000000000000000000000000000000000000000000000000000000006badd2ab000000000000000000000000000000000000000000000000000000006c1032af000000000000000000000000000000000000000000000000000000006f8bc59600000000000000000000000000000000000000000000000000000000715716a20000000000000000000000000000000000000000000000000000000078a0837700000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000003c26700000000000000000000000000000000000000000000000000000000004125ff90000000000000000000000000000000000000000000000000000000004c07348100000000000000000000000000000000000000000000000000000000557a64030000000000000000000000000000000000000000000000000000000055ed08a1000000000000000000000000000000000000000000000000000000005b78b780000000000000000000000000000000000000000000000000000000005ca1e1654c0734810000000000000000000000000000000000000000000000000000000043414e4e4f545f5343484544554c455f414354494f4e000000000000000000001b3c85eb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b3c85eb000000000000000000000000000000000000000000000000000000002362716d000000000000000000000000000000000000000000000000000000002debdd2e000000000000000000000000000000000000000000000000000000002e3ed05b000000000000000000000000000000000000000000000000000000003bf467970000000000000000000000000000000000000000000000000000000040e58ee5000000ff000000000000000000000000000000000000000000000000000000000000ff000000000000000000000000000000000000000000000000000000000000ff000000000000000000000000000000000000000000000000000000000000ff00000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff2a6bef66de603fc0ec07223576486bd905cd9bb6e05364286d9a5cd1be046ae6566fe119ff450afc2580186c62762b6c1258245c8b1b6bb095e7276eb5a75b55000000000000000000000000000000000000000000000000000000000df322a60000000000000000000000000000000000000000000000000000000010697a3a0000000000000000000000000000000000000000000000000000000014ea35e700000000000000000000000000000000000000000000000000000000151b89d100000000000000000000000000000000000000000000000000000000169f1468415454454d5054494e475f4558454355544f525f5245454e5452414e435900004e5300000000000000000000000000000000000000000000000000000000000043414e4e4f545f5343484544554c455f415554484f52495a45525f414354494f39510b933a9d010f906528d6019d3f4e2450a10dc33b10887503b31ed82f11110100009ba48d3c74535a0a1428e82ae576617acae775fb6f210513e4c19166fa9c4d535bdea7cd8a978f128b93471df48c7dbab89d703809115bdc118c235bfd0000000000000000000000000000000000000084000000000000000000000000fe0d94c100000000000000000000000000000000000000000000000000000000f08455220000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000002800000010000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
						}
					},
					"factoryDependencies": {
						"0100009ba48d3c74535a0a1428e82ae576617acae775fb6f210513e4c19166fa": "contracts/authorizer/TimelockExecutor.sol:TimelockExecutor"
					},
					"hash": "010011a7db0c8806623190493f7c62752bb28fd1af894003d69146a5791f916a"
				}
			},
			"contracts/authorizer/TimelockExecutor.sol": {
				"TimelockExecutor": {
					"abi": [{
						"inputs": [],
						"stateMutability": "nonpayable",
						"type": "constructor"
					}, {
						"inputs": [],
						"name": "authorizer",
						"outputs": [{
							"internalType": "contract TimelockAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "target",
							"type": "address"
						}, {
							"internalType": "bytes",
							"name": "data",
							"type": "bytes"
						}],
						"name": "execute",
						"outputs": [{
							"internalType": "bytes",
							"name": "result",
							"type": "bytes"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": ""
						}
					},
					"factoryDependencies": {},
					"hash": "0100009ba48d3c74535a0a1428e82ae576617acae775fb6f210513e4c19166fa"
				}
			},
			"contracts/balances/BalanceAllocation.sol": {
				"BalanceAllocation": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": "000000010120018f000000000110004c000000040000c13d005b00070000040f005b00050000040f0000000101000039005b00290000040f00020000000000020000000001000410000080020210008c000000220000613d0000000002000411000080010220008c000000220000613d0000001802000041000000000020043900000004020000390000000000120439000000190100004100008002020000390000000003000415000000020330008a00000020033000c9005b00420000040f000000ff01000039000000010110024f000000000110004c000000270000613d000000020100035f000000000101043b000000000110004c000000220000c13d00000000010000190000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d0001043000000000010000190000005d00010430000000000110004c0000003d0000613d0000000b0100003900000000020104330000001a022001970000001b022001c700000000002104350000000002000410000000000020043500000000020104330000001a022001970000001b022001c70000000000210435000000200100003900000100020000390000000000120439000001200100003900000000000104390000001c010000410000005c0001042e00000080010000390000004002000039000000000012043500000000010000190000005d000104300002000000000002000200000003001d0000002003300039000100000003001d00000051002104230000000203000029000000200230011a00000000020103550000001e010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000001d010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000005b000004320000005c0001042e0000005d00010430000000000000000100000000000000011806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b83020002000000000000000000000000000000002400000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff730000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"
						}
					},
					"factoryDependencies": {},
					"hash": "0100001f3343be38db229b61d7a08448654e1fa2fd20c5a6d1bf409fdcbb3e57"
				}
			},
			"contracts/balances/GeneralPoolsBalance.sol": {
				"GeneralPoolsBalance": {
					"abi": [],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"contracts/balances/MinimalSwapInfoPoolsBalance.sol": {
				"MinimalSwapInfoPoolsBalance": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "AuthorizerChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "ExternalBalanceTransfer",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "feeAmount",
							"type": "uint256"
						}],
						"name": "FlashLoan",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "delta",
							"type": "int256"
						}],
						"name": "InternalBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "PausedStateChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "liquidityProvider",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "int256[]",
							"name": "deltas",
							"type": "int256[]"
						}, {
							"indexed": false,
							"internalType": "uint256[]",
							"name": "protocolFeeAmounts",
							"type": "uint256[]"
						}],
						"name": "PoolBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "cashDelta",
							"type": "int256"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "managedDelta",
							"type": "int256"
						}],
						"name": "PoolBalanceManaged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "poolAddress",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "PoolRegistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "RelayerApprovalChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenIn",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenOut",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountIn",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountOut",
							"type": "uint256"
						}],
						"name": "Swap",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "TokensDeregistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "TokensRegistered",
						"type": "event"
					}, {
						"inputs": [],
						"name": "WETH",
						"outputs": [{
							"internalType": "contract IWETH",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "int256[]",
							"name": "limits",
							"type": "int256[]"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "batchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "",
							"type": "int256[]"
						}],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "deregisterTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address payable",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "minAmountsOut",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.ExitPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "exitPool",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "amounts",
							"type": "uint256[]"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "flashLoan",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "getInternalBalance",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getPausedState",
						"outputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}, {
							"internalType": "uint256",
							"name": "pauseWindowEndTime",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "bufferPeriodEndTime",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPool",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}, {
							"internalType": "enum IVault.PoolSpecialization",
							"name": "",
							"type": "uint8"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}],
						"name": "getPoolTokenInfo",
						"outputs": [{
							"internalType": "uint256",
							"name": "cash",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "managed",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPoolTokens",
						"outputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getProtocolFeesCollector",
						"outputs": [{
							"internalType": "contract IProtocolFeesCollector",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}],
						"name": "hasApprovedRelayer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "maxAmountsIn",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.JoinPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "joinPool",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.PoolBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "contract IERC20",
								"name": "token",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}],
							"internalType": "struct IVault.PoolBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "managePoolBalance",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.UserBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "asset",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}],
							"internalType": "struct IVault.UserBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "manageUserBalance",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}],
						"name": "queryBatchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "assetDeltas",
							"type": "int256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "registerPool",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "registerTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "setAuthorizer",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "setPaused",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "setRelayerApproval",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "assetIn",
								"type": "address"
							}, {
								"internalType": "contract IAsset",
								"name": "assetOut",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.SingleSwap",
							"name": "singleSwap",
							"type": "tuple"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "uint256",
							"name": "limit",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "swap",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "payable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"contracts/balances/TwoTokenPoolsBalance.sol": {
				"TwoTokenPoolsBalance": {
					"abi": [{
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "AuthorizerChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "ExternalBalanceTransfer",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "feeAmount",
							"type": "uint256"
						}],
						"name": "FlashLoan",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "delta",
							"type": "int256"
						}],
						"name": "InternalBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "PausedStateChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "liquidityProvider",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "int256[]",
							"name": "deltas",
							"type": "int256[]"
						}, {
							"indexed": false,
							"internalType": "uint256[]",
							"name": "protocolFeeAmounts",
							"type": "uint256[]"
						}],
						"name": "PoolBalanceChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "cashDelta",
							"type": "int256"
						}, {
							"indexed": false,
							"internalType": "int256",
							"name": "managedDelta",
							"type": "int256"
						}],
						"name": "PoolBalanceManaged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "poolAddress",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "PoolRegistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "RelayerApprovalChanged",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenIn",
							"type": "address"
						}, {
							"indexed": true,
							"internalType": "contract IERC20",
							"name": "tokenOut",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountIn",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "amountOut",
							"type": "uint256"
						}],
						"name": "Swap",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "TokensDeregistered",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": true,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"indexed": false,
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "TokensRegistered",
						"type": "event"
					}, {
						"inputs": [],
						"name": "WETH",
						"outputs": [{
							"internalType": "contract IWETH",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "int256[]",
							"name": "limits",
							"type": "int256[]"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "batchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "",
							"type": "int256[]"
						}],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "deregisterTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address payable",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "minAmountsOut",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.ExitPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "exitPool",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IFlashLoanRecipient",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "amounts",
							"type": "uint256[]"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "flashLoan",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getDomainSeparator",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "getInternalBalance",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "getNextNonce",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getPausedState",
						"outputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}, {
							"internalType": "uint256",
							"name": "pauseWindowEndTime",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "bufferPeriodEndTime",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPool",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}, {
							"internalType": "enum IVault.PoolSpecialization",
							"name": "",
							"type": "uint8"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}],
						"name": "getPoolTokenInfo",
						"outputs": [{
							"internalType": "uint256",
							"name": "cash",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "managed",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "address",
							"name": "assetManager",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}],
						"name": "getPoolTokens",
						"outputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "balances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getProtocolFeesCollector",
						"outputs": [{
							"internalType": "contract IProtocolFeesCollector",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "user",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}],
						"name": "hasApprovedRelayer",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"components": [{
								"internalType": "contract IAsset[]",
								"name": "assets",
								"type": "address[]"
							}, {
								"internalType": "uint256[]",
								"name": "maxAmountsIn",
								"type": "uint256[]"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.JoinPoolRequest",
							"name": "request",
							"type": "tuple"
						}],
						"name": "joinPool",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.PoolBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "contract IERC20",
								"name": "token",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}],
							"internalType": "struct IVault.PoolBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "managePoolBalance",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.UserBalanceOpKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "asset",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}],
							"internalType": "struct IVault.UserBalanceOp[]",
							"name": "ops",
							"type": "tuple[]"
						}],
						"name": "manageUserBalance",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.SwapKind",
							"name": "kind",
							"type": "uint8"
						}, {
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "assetInIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "assetOutIndex",
								"type": "uint256"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.BatchSwapStep[]",
							"name": "swaps",
							"type": "tuple[]"
						}, {
							"internalType": "contract IAsset[]",
							"name": "assets",
							"type": "address[]"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}],
						"name": "queryBatchSwap",
						"outputs": [{
							"internalType": "int256[]",
							"name": "assetDeltas",
							"type": "int256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"name": "registerPool",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "registerTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IAuthorizer",
							"name": "newAuthorizer",
							"type": "address"
						}],
						"name": "setAuthorizer",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bool",
							"name": "paused",
							"type": "bool"
						}],
						"name": "setPaused",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "relayer",
							"type": "address"
						}, {
							"internalType": "bool",
							"name": "approved",
							"type": "bool"
						}],
						"name": "setRelayerApproval",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IAsset",
								"name": "assetIn",
								"type": "address"
							}, {
								"internalType": "contract IAsset",
								"name": "assetOut",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IVault.SingleSwap",
							"name": "singleSwap",
							"type": "tuple"
						}, {
							"components": [{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "fromInternalBalance",
								"type": "bool"
							}, {
								"internalType": "address payable",
								"name": "recipient",
								"type": "address"
							}, {
								"internalType": "bool",
								"name": "toInternalBalance",
								"type": "bool"
							}],
							"internalType": "struct IVault.FundManagement",
							"name": "funds",
							"type": "tuple"
						}, {
							"internalType": "uint256",
							"name": "limit",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "deadline",
							"type": "uint256"
						}],
						"name": "swap",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "payable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": null
					}
				}
			},
			"contracts/test/BalanceAllocationMock.sol": {
				"BalanceAllocationMock": {
					"abi": [{
						"inputs": [{
							"internalType": "bytes32",
							"name": "balance",
							"type": "bytes32"
						}],
						"name": "cash",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "balance",
							"type": "bytes32"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "cashToManaged",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "balance",
							"type": "bytes32"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "decreaseCash",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "sharedCash",
							"type": "bytes32"
						}, {
							"internalType": "bytes32",
							"name": "sharedManaged",
							"type": "bytes32"
						}],
						"name": "fromSharedToBalanceA",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "sharedCash",
							"type": "bytes32"
						}, {
							"internalType": "bytes32",
							"name": "sharedManaged",
							"type": "bytes32"
						}],
						"name": "fromSharedToBalanceB",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "balance",
							"type": "bytes32"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "increaseCash",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "balance",
							"type": "bytes32"
						}],
						"name": "isNotZero",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "balance",
							"type": "bytes32"
						}],
						"name": "isZero",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "balance",
							"type": "bytes32"
						}],
						"name": "lastChangeBlock",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "balance",
							"type": "bytes32"
						}],
						"name": "managed",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "balance",
							"type": "bytes32"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "managedToCash",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "balance",
							"type": "bytes32"
						}, {
							"internalType": "uint256",
							"name": "newManaged",
							"type": "uint256"
						}],
						"name": "setManaged",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "uint256",
							"name": "_cash",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "_managed",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "_lastChangeBlock",
							"type": "uint256"
						}],
						"name": "toBalance",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "tokenABalance",
							"type": "bytes32"
						}, {
							"internalType": "bytes32",
							"name": "tokenBBalance",
							"type": "bytes32"
						}],
						"name": "toSharedCash",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "tokenABalance",
							"type": "bytes32"
						}, {
							"internalType": "bytes32",
							"name": "tokenBBalance",
							"type": "bytes32"
						}],
						"name": "toSharedManaged",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "balance",
							"type": "bytes32"
						}],
						"name": "total",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32[]",
							"name": "balances",
							"type": "bytes32[]"
						}],
						"name": "totals",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "result",
							"type": "uint256[]"
						}],
						"stateMutability": "pure",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": ""
						}
					},
					"factoryDependencies": {},
					"hash": "010000e9860305502cc6a83268c2b619447179152a1f0ef9e0eba185d6a239a3"
				}
			},
			"contracts/test/MockAssetTransfersHandler.sol": {
				"MockAssetTransfersHandler": {
					"abi": [{
						"inputs": [{
							"internalType": "contract IWETH",
							"name": "weth",
							"type": "address"
						}],
						"stateMutability": "nonpayable",
						"type": "constructor"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"name": "depositToInternalBalance",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "contract IERC20",
							"name": "token",
							"type": "address"
						}],
						"name": "getInternalBalance",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IAsset",
							"name": "asset",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "bool",
							"name": "fromInternalBalance",
							"type": "bool"
						}],
						"name": "receiveAsset",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IAsset",
							"name": "asset",
							"type": "address"
						}, {
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}, {
							"internalType": "address payable",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "bool",
							"name": "toInternalBalance",
							"type": "bool"
						}],
						"name": "sendAsset",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"stateMutability": "payable",
						"type": "receive"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": ""
						}
					},
					"factoryDependencies": {},
					"hash": "010002058fc973ec3ae54e32f6032632bcf3d1764e582784a0d85e82f264480d"
				}
			},
			"contracts/test/MockAuthenticatedContract.sol": {
				"MockAuthenticatedContract": {
					"abi": [{
						"inputs": [{
							"internalType": "contract IVault",
							"name": "vault",
							"type": "address"
						}],
						"stateMutability": "nonpayable",
						"type": "constructor"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bytes",
							"name": "data",
							"type": "bytes"
						}],
						"name": "ProtectedFunctionCalled",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bytes",
							"name": "data",
							"type": "bytes"
						}],
						"name": "SecondProtectedFunctionCalled",
						"type": "event"
					}, {
						"inputs": [{
							"internalType": "bytes4",
							"name": "selector",
							"type": "bytes4"
						}],
						"name": "getActionId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getAuthorizer",
						"outputs": [{
							"internalType": "contract IAuthorizer",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getVault",
						"outputs": [{
							"internalType": "contract IVault",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes",
							"name": "data",
							"type": "bytes"
						}],
						"name": "protectedFunction",
						"outputs": [{
							"internalType": "bytes",
							"name": "",
							"type": "bytes"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes",
							"name": "data",
							"type": "bytes"
						}],
						"name": "secondProtectedFunction",
						"outputs": [{
							"internalType": "bytes",
							"name": "",
							"type": "bytes"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": ""
						}
					},
					"factoryDependencies": {},
					"hash": "010001a3df80e7b01c863a283cbed7a76a3fc653c021c8096deced79ccc3b2bf"
				}
			},
			"contracts/test/MockBasicAuthorizer.sol": {
				"MockBasicAuthorizer": {
					"abi": [{
						"inputs": [],
						"stateMutability": "nonpayable",
						"type": "constructor"
					}, {
						"inputs": [],
						"name": "DEFAULT_ADMIN_ROLE",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "actionId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "",
							"type": "address"
						}],
						"name": "canPerform",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}],
						"name": "getRoleAdmin",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"internalType": "uint256",
							"name": "index",
							"type": "uint256"
						}],
						"name": "getRoleMember",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}],
						"name": "getRoleMemberCount",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "grantRole",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32[]",
							"name": "roles",
							"type": "bytes32[]"
						}, {
							"internalType": "address[]",
							"name": "accounts",
							"type": "address[]"
						}],
						"name": "grantRolesToMany",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "role",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "account",
							"type": "address"
						}],
						"name": "hasRole",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": ""
						}
					},
					"factoryDependencies": {},
					"hash": "010001edf67c0ddc60e88e40f774b022e20f07dafe08b0eb554614c39bbdf7dc"
				}
			},
			"contracts/test/MockFlashLoanRecipient.sol": {
				"MockFlashLoanRecipient": {
					"abi": [{
						"inputs": [{
							"internalType": "address",
							"name": "_vault",
							"type": "address"
						}],
						"stateMutability": "nonpayable",
						"type": "constructor"
					}, {
						"inputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "uint256[]",
							"name": "amounts",
							"type": "uint256[]"
						}, {
							"internalType": "uint256[]",
							"name": "feeAmounts",
							"type": "uint256[]"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "receiveFlashLoan",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "reenter",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "repayInExcess",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "repayLoan",
						"outputs": [{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bool",
							"name": "_reenter",
							"type": "bool"
						}],
						"name": "setReenter",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bool",
							"name": "_repayInExcess",
							"type": "bool"
						}],
						"name": "setRepayInExcess",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bool",
							"name": "_repayLoan",
							"type": "bool"
						}],
						"name": "setRepayLoan",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "vault",
						"outputs": [{
							"internalType": "address",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": ""
						}
					},
					"factoryDependencies": {},
					"hash": "0100017db513d366e701f174a31dbc1104276ad5c3da321e0ac3fd7d17212750"
				}
			},
			"contracts/test/MockInternalBalanceRelayer.sol": {
				"MockInternalBalanceRelayer": {
					"abi": [{
						"inputs": [{
							"internalType": "contract IVault",
							"name": "_vault",
							"type": "address"
						}],
						"stateMutability": "nonpayable",
						"type": "constructor"
					}, {
						"inputs": [{
							"internalType": "address payable",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "contract IAsset",
							"name": "asset",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "depositAmounts",
							"type": "uint256[]"
						}, {
							"internalType": "uint256[]",
							"name": "withdrawAmounts",
							"type": "uint256[]"
						}],
						"name": "depositAndWithdraw",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "vault",
						"outputs": [{
							"internalType": "contract IVault",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": "000300000000000200020000000103550000006003100270000000c50030019d000000c503300197000000000131034f0000006001100270000100c50010019d000000010120018f000000000110004c0000000c0000c13d030d000f0000040f030d000d0000040f0000000101000039030d002e0000040f00020000000000020000000001000410000080020210008c0000002a0000613d0000000002000411000080010220008c0000002a0000613d000000c602000041000000000020043900000004020000390000000000120439000000c70100004100008002020000390000000003000415000000020330008a00000020033000c9030d02f00000040f000000ff01000039000000010110024f000000000110004c0000002c0000613d000000020100035f000000000101043b000000000110004c0000002a0000c13d00000000010000190000030e0001042e0000000001000019030d002e0000040f00000000010000190000030f0001043000160000000000020000008002000039000000400900003900000000002904350000000002000416000000000110004c000000760000613d000000000120004c0000007d0000c13d000000020300036700000000020000310000001f0420018f00000000010904330000000505200270000000000650004c000000470000613d000000000600001900000005076002100000000008710019000000000773034f000000000707043b00000000007804350000000106600039000000000756004b0000003f0000413d000000000640004c000000560000613d0000000505500210000000000353034f00000000055100190000000304400210000000000605043300000000064601cf000000000646022f000000000303043b0000010004400089000000000343022f00000000034301cf000000000363019f000000000035043500000000031200190000000000390435000000ce03000041000000200420008c00000000040000190000000004034019000000ce02200197000000000520004c000000000300a019000000ce0220009c00000000020400190000000002036019000000000220004c000000810000c13d0000000002010433000000ca0120009c000000c90000213d0000000001000019000e00000002001d030d030b0000040f000000d6011001970000000e02000029000000000121019f0000000002000019030d03090000040f00000020010000390000010002000039000000000012043900000120010000390000000000010439000000d7010000410000030e0001042e000000000120004c0000007f0000c13d0000000001000031000000030210008c000000830000213d00000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f000104300000000202000367000000000302043b000000e003300270000000c80430009c000000cb0000c13d000000040310008a000000ce040000410000007f0530008c00000000050000190000000005042019000000ce03300197000000000630004c0000000004008019000000ce0330009c00000000030500190000000003046019000000000330004c000000dd0000613d0000000403200370000000000303043b000000ca04300197000c00000004001d000000ca0330009c000000e10000213d0000002403200370000000000303043b000000ca04300197000a00000004001d000000ca0330009c000000e30000213d0000004403200370000000000303043b000000cf0430009c000000e50000213d0000002304300039000000ce05000041000000000614004b00000000060000190000000006054019000000ce07100197000000ce04400197000000000874004b000000000500a019000000000474013f000000ce0440009c00000000040600190000000004056019000000000440004c000000e70000613d0000000404300039000000000242034f000000000202043b000000d00520009c000000e90000813d0000000008090433000000050520021000000020055000390000000006850019000000cf0760009c000000eb0000213d000000000786004b000000eb0000413d0000000000690435000200000008001d00000000002804350000000004450019000000000441004b000000ed0000813d00000000010000190000030f0001043000000000010000190000030f00010430000000c90130009c000000df0000c13d0000000001000019000e00000009001d030d030b0000040f000000ca011001970000000e0300002900000000020304330000000000120435000000000103043300000000021200490000006002200210000000cb02200041000000cc022001970000004001100210000000cd01100197000000000112019f0000030e0001042e00000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f00010430000000000420004c000000fb0000613d0000002403300039000000020400002900000000050000190000000206000367000000000636034f000000000606043b0000002004400039000000000064043500000020033000390000000105500039000000000625004b000000f20000413d00000002020003670000006403200370000000000303043b000000d00430009c000001290000813d000e00000009001d0000002304300039000000ce05000041000000000614004b00000000060000190000000006054019000000ce07100197000000ce04400197000000000874004b000000000500a019000000000474013f000000ce0440009c00000000040600190000000004056019000000000440004c0000012b0000613d0000000404300039000000000242034f000000000202043b000000d00520009c0000012d0000813d0000000e05000029000000000605043300000005052002100000002005500039000100000006001d0000000006650019000000cf0760009c0000012f0000213d0000000107000029000000000776004b0000012f0000413d0000000e070000290000000000670435000000010600002900000000002604350000000004450019000000000141004b000001310000813d00000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f00010430000000000120004c000001380000c13d00000002010000290000000001010433000000000110004c0000014e0000613d000001500000013d0000002401300039000000010300002900000000040000190000000205000367000000000515034f000000000505043b0000002003300039000000000053043500000020011000390000000104400039000000000524004b0000013b0000413d0000000101000029000000000101043300000002030000290000000002030433000000000212004b00000000020300190000000e04000029000001500000c13d000000000110004c0000015d0000c13d00000000010000190000030e0001042e000000d3010000410000000000100435000000200100003900000004020000390000000000120435000000070100003900000024020000390000000000120435000000d40100004100000044020000390000000000120435000000d5010000410000030f000104300000000101000039000900000001001d0000002001000039000800000001001d0000000005000019000001690000013d000000010550003900000002020000290000000001020433000000000115004b0000000e040000290000014e0000813d000d00000005001d00000005015002100000002001100039000600000001001d00000000012100190000000002010433000000000704043300000009010000290000000000170435000000e0017000390000000000140435000000c0017000390000000000010435000000a0017000390000000000010435000000800170003900000000000104350000006001700039000000000001043500000040017000390000002006700039000000000016043500000000000104350000000001040433000000a003100039000000000034043500000080031000390000000c050000290000000000530435000000600310003900000000005304350000004003100039000000000023043500000020021000390000000a0300002900000000003204350000000000010435000b00000007001d0000000002070433000000000220004c000002ab0000613d00000000001604350000000001000019000700000006001d030d030b0000040f00000007090000290000000e060000290000000003060433000000d10200004100000000002304350000000402300039000000080400002900000000004204350000000b020000290000000002020433000000240430003900000000002404350000004408300039000000ca07100197000000000120004c000001c40000613d000000000100001900000000030904330000000004030433000000040540008c000002a70000813d000000000048043500000020043000390000000004040433000000ca0440019700000020058000390000000000450435000000400430003900000000040404330000004005800039000000000045043500000060043000390000000004040433000000ca044001970000006005800039000000000045043500000080033000390000000003030433000000ca03300197000000800480003900000000003404350000002009900039000000a0088000390000000101100039000000000321004b000001a70000413d000500000008001d0000000001060433000300000001001d000000c60100004100000000001004390000000401000039000400000001001d000700000007001d0000000000710439000000c70100004100008002020000390000000003000415000000160330008a00000020033000c9030d02f00000040f000000ff01000039000b00000001001d000000150110024f000000000110004c000002ad0000613d000000160100035f000000000101043b000000000110004c0000000d040000290000000702000029000002af0000613d0000000001000414000000040320008c0000000503000029000001f90000613d000000030500002900000000045300490000004003500210000000cd033001970000006004400210000000cc04400197000000000334019f000000c001100210000000d201100197000000000113019f0000000003000415000000120330008a00000020033000c9030d02d70000040f0000000d04000029000000120100035f0000006002100270000100c50020019d000000c5022001970000000b03000029000000110330024f000000000330004c000002b90000613d00000001020000290000000001020433000000000114004b0000000e04000029000002b10000813d000000060100002900000000012100190000000002010433000000000804043300000009060000290000000000680435000000e0018000390000000000140435000000c0018000390000000000010435000000a0018000390000000000010435000000800180003900000000000104350000006001800039000000000001043500000040018000390000002007800039000000000017043500000000000104350000000001040433000000a003100039000000000034043500000080031000390000000c050000290000000000530435000000600310003900000000005304350000004003100039000000000023043500000020021000390000000a0300002900000000003204350000000000610435000700000008001d0000000002080433000000000220004c000002b30000613d00000000001704350000000001000019000600000007001d030d030b0000040f00000006080000290000000e060000290000000003060433000000d102000041000000000023043500000004023000390000000804000029000000000042043500000007020000290000000002020433000000240430003900000000002404350000004409300039000000ca07100197000000000120004c000002560000613d000000000100001900000000030804330000000004030433000000040540008c000002a90000813d000000000049043500000020043000390000000004040433000000ca0440019700000020059000390000000000450435000000400430003900000000040404330000004005900039000000000045043500000060043000390000000004040433000000ca044001970000006005900039000000000045043500000080033000390000000003030433000000ca03300197000000800490003900000000003404350000002008800039000000a0099000390000000101100039000000000321004b000002390000413d000600000009001d0000000001060433000500000001001d000000c60100004100000000001004390000000401000029000700000007001d0000000000710439000000c70100004100008002020000390000000003000415000000140330008a00000020033000c9030d02f00000040f0000000b01000029000000130110024f000000000110004c000002b50000613d000000140100035f000000000101043b000000000110004c0000000d050000290000000702000029000002b70000613d0000000001000414000000040320008c0000000603000029000001630000613d000000050500002900000000045300490000004003500210000000cd033001970000006004400210000000cc04400197000000000334019f000000c001100210000000d201100197000000000113019f0000000003000415000000100330008a00000020033000c9030d02d70000040f0000000d05000029000000100100035f0000006002100270000100c50020019d000000c5022001970000000b030000290000000f0330024f000000000330004c000001630000c13d0000001f0320018f0000000502200270000000000420004c000002950000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000524004b0000028e0000413d000000000430004c000002a30000613d00000003033002100000000502200210000000000402043300000000043401cf000000000434022f000000000121034f000000000101043b0000010003300089000000000131022f00000000013101cf000000000141019f0000000000120435000000600100003900000001011001ff000000cc011001970000030f0001043000000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f0001043000000000010000190000030f000104300000001f0320018f0000000502200270000000000420004c000002c50000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000524004b000002be0000413d000000000430004c000002d30000613d00000003033002100000000502200210000000000402043300000000043401cf000000000434022f000000000121034f000000000101043b0000010003300089000000000131022f00000000013101cf000000000141019f0000000000120435000000600100003900000001011001ff000000cc011001970000030f000104300002000000000002000200000003001d0000002003300039000100000003001d000002e6002104210000000203000029000000200230011a0000000002010355000000ce010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a0000000002010355000000d8010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0002000000000002000200000003001d0000002003300039000100000003001d000002ff002104230000000203000029000000200230011a0000000002010355000000ce010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a0000000002010355000000d8010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d000000000012041b000000000001042d000000000101041a000000000001042d0000030d000004320000030e0001042e0000030f00010430000000000000000100000000000000010000000000000001000000000000000100000000000000000000000000000000000000000000000000000000ffffffff1806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b830200020000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000000000000000000007b58efc100000000000000000000000000000000000000000000000000000000fbfa77cf000000000000000000000000ffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000ffffffff0000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff00000000000000000000000000000000000000000000000100000000000000000e8e3e840000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000008c379a00000000000000000000000000000000000000000000000000000000042414c23313033000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
						}
					},
					"factoryDependencies": {},
					"hash": "010000d934cc6a106e4c5b374c630bc926aaabe1209491c0df2eb7ae7b902bd5"
				}
			},
			"contracts/test/MockPool.sol": {
				"MockPool": {
					"abi": [{
						"inputs": [{
							"internalType": "contract IVault",
							"name": "vault",
							"type": "address"
						}, {
							"internalType": "enum IVault.PoolSpecialization",
							"name": "specialization",
							"type": "uint8"
						}],
						"stateMutability": "nonpayable",
						"type": "constructor"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256[]",
							"name": "currentBalances",
							"type": "uint256[]"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "protocolSwapFeePercentage",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "OnExitPoolCalled",
						"type": "event"
					}, {
						"anonymous": false,
						"inputs": [{
							"indexed": false,
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"indexed": false,
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"indexed": false,
							"internalType": "uint256[]",
							"name": "currentBalances",
							"type": "uint256[]"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "uint256",
							"name": "protocolSwapFeePercentage",
							"type": "uint256"
						}, {
							"indexed": false,
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "OnJoinPoolCalled",
						"type": "event"
					}, {
						"inputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}],
						"name": "deregisterTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getPoolId",
						"outputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getScalingFactors",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getSwapFeePercentage",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [],
						"name": "getVault",
						"outputs": [{
							"internalType": "contract IVault",
							"name": "",
							"type": "address"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "currentBalances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "protocolSwapFeePercentage",
							"type": "uint256"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "onExitPool",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "amountsOut",
							"type": "uint256[]"
						}, {
							"internalType": "uint256[]",
							"name": "dueProtocolFeeAmounts",
							"type": "uint256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "poolId",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "recipient",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "currentBalances",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "lastChangeBlock",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "protocolSwapFeePercentage",
							"type": "uint256"
						}, {
							"internalType": "bytes",
							"name": "userData",
							"type": "bytes"
						}],
						"name": "onJoinPool",
						"outputs": [{
							"internalType": "uint256[]",
							"name": "amountsIn",
							"type": "uint256[]"
						}, {
							"internalType": "uint256[]",
							"name": "dueProtocolFeeAmounts",
							"type": "uint256[]"
						}],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IERC20",
								"name": "tokenIn",
								"type": "address"
							}, {
								"internalType": "contract IERC20",
								"name": "tokenOut",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "lastChangeBlock",
								"type": "uint256"
							}, {
								"internalType": "address",
								"name": "from",
								"type": "address"
							}, {
								"internalType": "address",
								"name": "to",
								"type": "address"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IPoolSwapStructs.SwapRequest",
							"name": "swapRequest",
							"type": "tuple"
						}, {
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"name": "onSwap",
						"outputs": [{
							"internalType": "uint256",
							"name": "amount",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"components": [{
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							}, {
								"internalType": "contract IERC20",
								"name": "tokenIn",
								"type": "address"
							}, {
								"internalType": "contract IERC20",
								"name": "tokenOut",
								"type": "address"
							}, {
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}, {
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}, {
								"internalType": "uint256",
								"name": "lastChangeBlock",
								"type": "uint256"
							}, {
								"internalType": "address",
								"name": "from",
								"type": "address"
							}, {
								"internalType": "address",
								"name": "to",
								"type": "address"
							}, {
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}],
							"internalType": "struct IPoolSwapStructs.SwapRequest",
							"name": "swapRequest",
							"type": "tuple"
						}, {
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"name": "onSwap",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}],
						"stateMutability": "view",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}, {
							"internalType": "bytes",
							"name": "",
							"type": "bytes"
						}],
						"name": "queryExit",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}, {
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}, {
							"internalType": "address",
							"name": "",
							"type": "address"
						}, {
							"internalType": "address",
							"name": "",
							"type": "address"
						}, {
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}, {
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}, {
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}, {
							"internalType": "bytes",
							"name": "",
							"type": "bytes"
						}],
						"name": "queryJoin",
						"outputs": [{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}, {
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						}],
						"stateMutability": "pure",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "contract IERC20[]",
							"name": "tokens",
							"type": "address[]"
						}, {
							"internalType": "address[]",
							"name": "assetManagers",
							"type": "address[]"
						}],
						"name": "registerTokens",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}, {
						"inputs": [{
							"internalType": "uint256",
							"name": "newMultiplier",
							"type": "uint256"
						}],
						"name": "setMultiplier",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					}],
					"evm": {
						"legacyAssembly": null,
						"bytecode": {
							"object": ""
						}
					},
					"factoryDependencies": {},
					"hash": "0100029bd9dea6536ccd0a5cfd30e0c1f227129f0b8d886e2aff30e79d401f55"
				}
			}
		}
	}
}